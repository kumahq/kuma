"use strict";(self["webpackChunkkuma_gui"]=self["webpackChunkkuma_gui"]||[]).push([[253],{44006:function(e,t,a){a.d(t,{Z:function(){return p}});var n=function(){var e=this,t=e._self._c;return t("div",{staticClass:"wizard-switcher"},[t("KEmptyState",{ref:"emptyState",staticClass:"my-6 wizard-empty-state",attrs:{"cta-is-hidden":"","is-error":!e.environment},scopedSlots:e._u(["kubernetes"===e.environment||"universal"===e.environment?{key:"title",fn:function(){return[e._v(" Running on "),t("span",{staticClass:"capitalize"},[e._v(e._s(e.environment))])]},proxy:!0}:null,{key:"message",fn:function(){return["kubernetes"===e.environment?t("div",[e.$route.name===e.wizardRoutes.kubernetes?t("div",[t("p",[e._v(" We have detected that you are running on a "),t("strong",[e._v("Kubernetes environment")]),e._v(", and we are going to be showing you instructions for Kubernetes unless you decide to visualize the instructions for Universal. ")]),t("p",[t("KButton",{attrs:{to:{name:e.wizardRoutes.universal},appearance:"secondary"}},[e._v(" Switch to Universal instructions ")])],1)]):e.$route.name===e.wizardRoutes.universal?t("div",[t("p",[e._v(" We have detected that you are running on a "),t("strong",[e._v("Kubernetes environment")]),e._v(", but you are viewing instructions for Universal. ")]),t("p",[t("KButton",{attrs:{to:{name:e.wizardRoutes.kubernetes},appearance:"secondary"}},[e._v(" Switch back to Kubernetes instructions ")])],1)]):e._e()]):"universal"===e.environment?t("div",[e.$route.name===e.wizardRoutes.kubernetes?t("div",[t("p",[e._v(" We have detected that you are running on a "),t("strong",[e._v("Universal environment")]),e._v(", but you are viewing instructions for Kubernetes. ")]),t("p",[t("KButton",{attrs:{to:{name:e.wizardRoutes.universal},appearance:"secondary"}},[e._v(" Switch back to Universal instructions ")])],1)]):e.$route.name===e.wizardRoutes.universal?t("div",[t("p",[e._v(" We have detected that you are running on a "),t("strong",[e._v("Universal environment")]),e._v(", and we are going to be showing you instructions for Universal unless you decide to visualize the instructions for Kubernetes. ")]),t("p",[t("KButton",{attrs:{to:{name:e.wizardRoutes.kubernetes},appearance:"secondary"}},[e._v(" Switch to Kubernetes instructions ")])],1)]):e._e()]):e._e()]},proxy:!0}],null,!0)})],1)},r=[],i=a(20629),o={name:"EnvironmentSwitcher",data(){return{wizardRoutes:{kubernetes:"kubernetes-dataplane",universal:"universal-dataplane"}}},computed:{...(0,i.Se)({environment:"config/getEnvironment"}),instructionsCtaText(){return"universal"===this.environment?"Switch to Kubernetes instructions":"Switch to Universal instructions"},instructionsCtaRoute(){return"kubernetes"===this.environment?{name:"universal-dataplane"}:{name:"kubernetes-dataplane"}}}},s=o,l=a(1001),u=(0,l.Z)(s,n,r,!1,null,null,null),p=u.exports},57138:function(e,t,a){a.r(t),a.d(t,{default:function(){return T}});var n=function(){var e=this,t=e._self._c;return t("div",{staticClass:"wizard"},[t("div",{staticClass:"wizard__content"},[t("StepSkeleton",{attrs:{steps:e.steps,"sidebar-content":e.sidebarContent,"footer-enabled":!1===e.hideScannerSiblings,"next-disabled":e.nextDisabled},scopedSlots:e._u([{key:"general",fn:function(){return[t("h3",[e._v(" Create Universal Dataplane ")]),t("p",[e._v(" Welcome to the wizard to create a new Dataplane resource in "+e._s(e.title)+". We will be providing you with a few steps that will get you started. ")]),t("p",[e._v(" As you know, the "+e._s(e.productName)+" GUI is read-only. ")]),t("h3",[e._v(" To get started, please select on what Mesh you would like to add the Dataplane: ")]),t("p",[e._v(" If you've got an existing Mesh that you would like to associate with your Dataplane, you can select it below, or create a new one using our Mesh Wizard. ")]),t("small",[e._v("Would you like to see instructions for Kubernetes? Use sidebar to change wizard!")]),t("KCard",{staticClass:"my-6",attrs:{"has-shadow":""},scopedSlots:e._u([{key:"body",fn:function(){return[t("FormFragment",{attrs:{title:"Choose a Mesh","for-attr":"dp-mesh","all-inline":""}},[t("div",[t("select",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshName,expression:"validate.meshName"}],staticClass:"k-input w-100",attrs:{id:"dp-mesh","data-testid":"mesh-select"},on:{change:function(t){var a=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){var t="_value"in e?e._value:e.value;return t}));e.$set(e.validate,"meshName",t.target.multiple?a:a[0])}}},[t("option",{attrs:{disabled:"",value:""}},[e._v(" Select an existing Meshâ€¦ ")]),e._l(e.meshes.items,(function(a){return t("option",{key:a.name,domProps:{value:a.name}},[e._v(" "+e._s(a.name)+" ")])}))],2)]),t("div",[t("label",{staticClass:"k-input-label mr-4"},[e._v(" or ")]),t("KButton",{attrs:{to:{name:"create-mesh"},appearance:"secondary"}},[e._v(" Create a new Mesh ")])],1)])]},proxy:!0}])})]},proxy:!0},{key:"topology",fn:function(){return[t("h3",[e._v(" Setup Dataplane Mode ")]),t("p",[e._v(" You can create a data plane for a service or a data plane for a Gateway. ")]),t("FormFragment",{attrs:{"all-inline":"","equal-cols":"","hide-label-col":"","shift-right":""}},[t("div",[t("label",{attrs:{for:"service-dataplane"}},[t("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.univDataplaneType,expression:"validate.univDataplaneType"}],staticClass:"k-input",attrs:{id:"service-dataplane",type:"radio",name:"dataplane-type",value:"dataplane-type-service",checked:""},domProps:{checked:e._q(e.validate.univDataplaneType,"dataplane-type-service")},on:{change:function(t){return e.$set(e.validate,"univDataplaneType","dataplane-type-service")}}}),t("span",[e._v(" Service Dataplane ")])]),t("label",{attrs:{for:"gateway-dataplane"}},[t("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.univDataplaneType,expression:"validate.univDataplaneType"}],staticClass:"k-input",attrs:{id:"gateway-dataplane",type:"radio",name:"dataplane-type",value:"dataplane-type-gateway"},domProps:{checked:e._q(e.validate.univDataplaneType,"dataplane-type-gateway")},on:{change:function(t){return e.$set(e.validate,"univDataplaneType","dataplane-type-gateway")}}}),t("span",[e._v(" Gateway Dataplane ")])])])]),t("FormFragment",{attrs:{"all-inline":"",title:"Service name","for-attr":"service-name"}},[t("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.univDataplaneServiceName,expression:"validate.univDataplaneServiceName"}],staticClass:"k-input w-100 mr-4",attrs:{id:"service-name","data-testid":"service-name",type:"text"},domProps:{value:e.validate.univDataplaneServiceName},on:{input:function(t){t.target.composing||e.$set(e.validate,"univDataplaneServiceName",t.target.value)}}})]),t("FormFragment",{attrs:{"all-inline":"",title:"Dataplane ID","for-attr":"dataplane-id"}},[t("div",[t("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.univDataplaneId,expression:"validate.univDataplaneId"}],staticClass:"k-input w-100",attrs:{id:"dataplane-id",type:"text",disabled:e.validate.univDataplaneCustomIdDisabled},domProps:{value:e.validate.univDataplaneId},on:{input:function(t){t.target.composing||e.$set(e.validate,"univDataplaneId",t.target.value)}}})]),t("div",[t("KButton",{attrs:{appearance:"secondary"},on:{click:function(t){e.validate.univDataplaneCustomIdDisabled=!1}}},[e._v(" Edit ")]),t("HelperTooltip",[e._v(" This is a unique ID for the Dataplane instance. ")])],1)])]},proxy:!0},{key:"networking",fn:function(){return[t("h3",[e._v(" Networking ")]),t("p",[e._v(" It's time to now configure the networking settings so that the Dataplane can connect to the local service, and other data planes can consume your service. ")]),t("p",[t("strong",[e._v("All fields below are required to proceed.")])]),t("FormFragment",{attrs:{"all-inline":"",title:"Data Plane IP Address","for-attr":"network-address"}},[t("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.univDataplaneNetworkAddress,expression:"validate.univDataplaneNetworkAddress"}],staticClass:"k-input w-100",attrs:{id:"network-address",type:"text"},domProps:{value:e.validate.univDataplaneNetworkAddress},on:{input:function(t){t.target.composing||e.$set(e.validate,"univDataplaneNetworkAddress",t.target.value)}}}),t("HelperTooltip",[e._v(" The IP address that other services will use to consume this data plane. ")])],1),t("FormFragment",{attrs:{"all-inline":"","fill-first":"",title:"Data Plane Port","for-attr":"network-dataplane-port"}},[t("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.univDataplaneNetworkDPPort,expression:"validate.univDataplaneNetworkDPPort"}],staticClass:"k-input w-100",attrs:{id:"network-dataplane-port",type:"text"},domProps:{value:e.validate.univDataplaneNetworkDPPort},on:{input:function(t){t.target.composing||e.$set(e.validate,"univDataplaneNetworkDPPort",t.target.value)}}}),t("HelperTooltip",[e._v(" The data plane port (that other services will use to consume this service). ")])],1),t("FormFragment",{attrs:{"all-inline":"",title:"Service IP Address","for-attr":"network-service-address"}},[t("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.univDataplaneNetworkServiceAddress,expression:"validate.univDataplaneNetworkServiceAddress"}],staticClass:"k-input w-100",attrs:{id:"network-service-address",type:"text"},domProps:{value:e.validate.univDataplaneNetworkServiceAddress},on:{input:function(t){t.target.composing||e.$set(e.validate,"univDataplaneNetworkServiceAddress",t.target.value)}}}),t("HelperTooltip",[e._v(" The address where your service is listening on the machine. ")])],1),t("FormFragment",{attrs:{"all-inline":"",title:"Service Port","for-attr":"network-service-port"}},[t("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.univDataplaneNetworkServicePort,expression:"validate.univDataplaneNetworkServicePort"}],staticClass:"k-input w-100",attrs:{id:"network-service-port",type:"text"},domProps:{value:e.validate.univDataplaneNetworkServicePort},on:{input:function(t){t.target.composing||e.$set(e.validate,"univDataplaneNetworkServicePort",t.target.value)}}}),t("HelperTooltip",[e._v(" The port where your service is listening on the machine. ")])],1),t("FormFragment",{attrs:{"all-inline":"",title:"Protocol","for-attr":"network-dataplane-protocol"}},[t("select",{directives:[{name:"model",rawName:"v-model",value:e.validate.univDataplaneNetworkProtocol,expression:"validate.univDataplaneNetworkProtocol"}],staticClass:"k-input w-100",attrs:{id:"network-dataplane-protocol",name:"network-dataplane-protocol"},on:{change:function(t){var a=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){var t="_value"in e?e._value:e.value;return t}));e.$set(e.validate,"univDataplaneNetworkProtocol",t.target.multiple?a:a[0])}}},e._l(e.formFields.protocols,(function(a,n){return t("option",{key:n,domProps:{value:a,selected:e.validate.univDataplaneNetworkProtocol===a}},[e._v(" "+e._s(a)+" ")])})),0),t("HelperTooltip",[e._v(" The protocol of the service. ")])],1)]},proxy:!0},{key:"complete",fn:function(){return[e.validate.meshName?t("div",[!1===e.hideScannerSiblings?t("div",[t("h3",[e._v(" Auto-Inject DPP ")]),t("p",[e._v(" It's time to first generate the credentials so that "+e._s(e.title)+" will allow the Dataplane to successfully authenticate itself with the control plane, and then finally install the Dataplane process (powered by Envoy). ")]),t("TabsWidget",{attrs:{loaders:!1,tabs:e.tabs,"initial-tab-override":"universal"},scopedSlots:e._u([{key:"universal",fn:function(){return[t("CodeView",{attrs:{title:"Generate Dataplane Token","copy-button-text":"Copy Command to Clipboard",lang:"bash",content:e.generateDpTokenCodeOutput}}),t("CodeView",{attrs:{title:"Start Dataplane Process","copy-button-text":"Copy Command to Clipboard",lang:"bash",content:e.startDpCodeOutput}})]},proxy:!0}],null,!1,1949471199)})],1):e._e(),t("EntityScanner",{attrs:{"loader-function":e.scanForEntity,"should-start":!0,"has-error":e.scanError,"can-complete":e.scanFound},on:{hideSiblings:e.hideSiblings},scopedSlots:e._u([{key:"loading-title",fn:function(){return[t("h3",[e._v("Searchingâ€¦")])]},proxy:!0},{key:"loading-content",fn:function(){return[t("p",[e._v("We are looking for your dataplane.")])]},proxy:!0},{key:"complete-title",fn:function(){return[t("h3",[e._v("Done!")])]},proxy:!0},{key:"complete-content",fn:function(){return[t("p",[e._v(" Your Dataplane "),e.validate.univDataplaneId?t("strong",[e._v(" "+e._s(e.validate.univDataplaneId)+" ")]):e._e(),e._v(" was found! ")]),t("p",[e._v(" Proceed to the next step where we will show you your new Dataplane. ")]),t("p",[t("KButton",{attrs:{appearance:"primary"},on:{click:e.compeleteDataPlaneSetup}},[e._v(" View Your Dataplane ")])],1)]},proxy:!0},{key:"error-title",fn:function(){return[t("h3",[e._v("Dataplane not found")])]},proxy:!0},{key:"error-content",fn:function(){return[t("p",[e._v("We were unable to find your dataplane.")])]},proxy:!0}],null,!1,3707222966)})],1):t("KAlert",{attrs:{appearance:"danger"},scopedSlots:e._u([{key:"alertMessage",fn:function(){return[t("p",[e._v(" Please return to the first step and make sure to select an existing Mesh, or create a new one. ")])]},proxy:!0}])})]},proxy:!0},{key:"dataplane",fn:function(){return[t("h3",[e._v("Dataplane")]),t("p",[e._v(" In "+e._s(e.title)+", a Dataplane resource represents a data plane proxy running alongside one of your services. Data plane proxies can be added in any Mesh that you may have created, and in Kubernetes, they will be auto-injected by "+e._s(e.title)+". ")])]},proxy:!0},{key:"example",fn:function(){return[t("h3",[e._v("Example")]),t("p",[e._v(" Below is an example of a Dataplane resource output: ")]),t("code",{staticClass:"block"},[t("pre",[e._v("type: Dataplane\nmesh: default\nname: dp-echo-1\nnetworking:\n  address: 10.0.0.1\n  inbound:\n  - port: 10000\n    servicePort: 9000\n    tags:\n      kuma.io/service: echo")])])]},proxy:!0},{key:"switch",fn:function(){return[t("EnvironmentSwitcher")]},proxy:!0}])})],1)])},r=[],i=a(20629),o=a(73570),s=a.n(o),l=a(17463),u=a(76227),p=a(53419),d=a(5035),v=a(7001),c=a(5872),m=a(44006),h=function(){var e=this,t=e._self._c;return t("KPop",{staticClass:"help-icon",attrs:{trigger:"hover"},scopedSlots:e._u([{key:"content",fn:function(){return[t("div",[e._t("default")],2)]},proxy:!0}],null,!0)},[t("a",[e._v("?")])])},w=[],g={},y=g,k=a(1001),D=(0,k.Z)(y,h,w,!1,null,null,null),f=D.exports,_=a(22330),b=a(69328),S=a(81191),N=a.n(S),P=a(45689),x={name:"DataplaneWizardUniversal",metaInfo:{title:"Create a new Dataplane on Universal"},components:{FormFragment:d.Z,TabsWidget:v.Z,StepSkeleton:c.Z,EnvironmentSwitcher:m.Z,HelperTooltip:f,CodeView:_.Z,EntityScanner:b.Z},data(){return{productName:P.sG,randString:Math.random().toString(36).substring(2,8),schema:N(),steps:[{label:"General",slug:"general"},{label:"Topology",slug:"topology"},{label:"Networking",slug:"networking"},{label:"Install",slug:"complete"}],tabs:[{hash:"#universal",title:"Universal"}],sidebarContent:[{name:"dataplane"},{name:"example"},{name:"switch"}],startScanner:!1,scanFound:!1,hideScannerSiblings:!1,scanError:!1,isComplete:!1,validate:{meshName:"",univDataplaneType:"dataplane-type-service",univDataplaneServiceName:"",univDataplaneId:"",univDataplaneCustomIdDisabled:!0,univDataplaneNetworkAddress:null,univDataplaneNetworkServicePort:null,univDataplaneNetworkServiceAddress:"127.0.0.1",univDataplaneNetworkDPPort:null,univDataplaneNetworkProtocol:"tcp"},formFields:{protocols:["tcp","http","grpc"]}}},computed:{...(0,i.Se)({title:"config/getTagline",version:"config/getVersion",environment:"config/getEnvironment",meshes:"getMeshList"}),getDataplaneSchema(){const e=Object.assign({},this.schema),{meshName:t,univDataplaneType:a,univDataplaneServiceName:n,univDataplaneId:r,univDataplaneNetworkAddress:i,univDataplaneNetworkServicePort:o,univDataplaneNetworkServiceAddress:s,univDataplaneNetworkDPPort:l,univDataplaneNetworkProtocol:u}=this.validate;if(t)return e.name=r,e.mesh=t,"dataplane-type-service"===a?(e.networking.gateway&&delete e.networking.gateway,e.networking={address:i,inbound:[{port:l,servicePort:o,serviceAddress:s,tags:{"kuma.io/service":n,"kuma.io/protocol":u}}]}):"dataplane-type-gateway"===a&&(e.networking.inbound&&delete e.networking.inbound,e.networking={address:i,gateway:{tags:{"kuma.io/service":n}}}),e},generateDpTokenCodeOutput(){const{univDataplaneId:e}=this.validate,t=`kumactl generate dataplane-token --name=${e} > kuma-token-${e}`;return t},startDpCodeOutput(){const{univDataplaneId:e}=this.validate,t=`kuma-dp run \\\n      --cp-address=${(0,u.H)()} \\\n      --dataplane="${s()(this.getDataplaneSchema)}" \\\n      --dataplane-token-file=kuma-token-${e}`;return t},nextDisabled(){const{meshName:e,univDataplaneServiceName:t,univDataplaneId:a,univDataplaneNetworkAddress:n,univDataplaneNetworkServicePort:r,univDataplaneNetworkDPPort:i,univDataplaneNetworkProtocol:o}=this.validate;return!e.length||("1"===this.$route.query.step?!(t&&a):"2"===this.$route.query.step&&!(n&&r&&i&&o))}},watch:{"validate.univDataplaneId"(e){this.validate.univDataplaneId=(0,p.GL)(e)},"validate.univDataplaneServiceName"(e){const t=(0,p.GL)(e);this.validate.univDataplaneServiceName=t,""===this.validate.univDataplaneServiceName?this.validate.univDataplaneId="":this.validate.univDataplaneId=(0,p.GL)(`${e}-${this.randString}`)},"validate.univDataplaneNetworkServicePort"(e){const t=e.replace(/[a-zA-Z]*$/g,"").trim();this.validate.univDataplaneNetworkServicePort=t},"validate.univDataplaneNetworkDPPort"(e){const t=e.replace(/[a-zA-Z]*$/g,"").trim();this.validate.univDataplaneNetworkDPPort=t}},methods:{hideSiblings(){this.hideScannerSiblings=!0},scanForEntity(){const{meshName:e,univDataplaneId:t}=this.validate;this.scanComplete=!1,this.scanError=!1,e&&t&&l.Z.getDataplaneFromMesh({mesh:e,name:t}).then((e=>{e&&e.name.length>0?(this.isRunning=!0,this.scanFound=!0):this.scanError=!0})).catch((e=>{this.scanError=!0,console.error(e)})).finally((()=>{this.scanComplete=!0}))},compeleteDataPlaneSetup(){this.$store.dispatch("updateSelectedMesh",this.validate.meshName),this.$router.push({name:"dataplanes",params:{mesh:this.validate.meshName}})}}},C=x,I=(0,k.Z)(C,n,r,!1,null,null,null),T=I.exports},81191:function(e){e.exports={type:"Dataplane",mesh:null,name:null,networking:{}}}}]);