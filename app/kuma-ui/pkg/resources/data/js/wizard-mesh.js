"use strict";(self["webpackChunkkuma_gui"]=self["webpackChunkkuma_gui"]||[]).push([[708],{38190:function(e,a,t){t.r(a),t.d(a,{default:function(){return E}});var n=function(){var e=this,a=e._self._c;return a("div",{staticClass:"wizard"},[a("div",{staticClass:"wizard__content"},[a("StepSkeleton",{attrs:{steps:e.steps,"sidebar-content":e.sidebarContent,"footer-enabled":!1===e.hideScannerSiblings,"next-disabled":e.nextDisabled},scopedSlots:e._u([{key:"general",fn:function(){return[a("p",[e._v(" Welcome to the wizard for creating a new Mesh resource in "+e._s(e.productName)+". We will be providing you with a few steps that will get you started. ")]),a("p",[e._v(" As you know, the "+e._s(e.productName)+" GUI is read-only, so at the end of this wizard we will be generating the configuration that you can apply with either "),a("code",[e._v("kubectl")]),e._v(" (if you are running in Kubernetes mode) or "),a("code",[e._v("kumactl")]),e._v(" / API (if you are running in Universal mode). ")]),a("h3",[e._v(" To get started, please fill in the following information: ")]),a("KCard",{staticClass:"my-6 k-card--small",attrs:{title:"Mesh Information","has-shadow":""},scopedSlots:e._u([{key:"body",fn:function(){return[a("FormFragment",{attrs:{title:"Mesh name","for-attr":"mesh-name"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshName,expression:"validate.meshName"}],staticClass:"k-input w-100",attrs:{id:"mesh-name",type:"text",placeholder:"your-mesh-name",required:""},domProps:{value:e.validate.meshName},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshName",a.target.value)}}}),e.vmsg.meshName?a("KAlert",{attrs:{appearance:"danger",size:"small","alert-message":e.vmsg.meshName}}):e._e()],1),a("FormFragment",{attrs:{title:"Mutual TLS"}},[a("label",{staticClass:"k-input-label mx-2"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.mtlsEnabled,expression:"validate.mtlsEnabled"}],ref:"mtlsDisabled",staticClass:"k-input mr-2",attrs:{value:"disabled",name:"mtls",type:"radio"},domProps:{checked:e._q(e.validate.mtlsEnabled,"disabled")},on:{change:function(a){return e.$set(e.validate,"mtlsEnabled","disabled")}}}),a("span",[e._v("Disabled")])]),a("label",{staticClass:"k-input-label mx-2"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.mtlsEnabled,expression:"validate.mtlsEnabled"}],staticClass:"k-input mr-2",attrs:{id:"mtls-enabled",value:"enabled",name:"mtls",type:"radio"},domProps:{checked:e._q(e.validate.mtlsEnabled,"enabled")},on:{change:function(a){return e.$set(e.validate,"mtlsEnabled","enabled")}}}),a("span",[e._v("Enabled")])])]),"enabled"===e.validate.mtlsEnabled?a("FormFragment",{attrs:{title:"Certificate name","for-attr":"certificate-name"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshCAName,expression:"validate.meshCAName"}],staticClass:"k-input w-100",attrs:{id:"certificate-name",type:"text",placeholder:"your-certificate-name"},domProps:{value:e.validate.meshCAName},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshCAName",a.target.value)}}})]):e._e(),"enabled"===e.validate.mtlsEnabled?a("FormFragment",{attrs:{title:"Certificate Authority","for-attr":"certificate-authority"}},[a("select",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshCA,expression:"validate.meshCA"}],staticClass:"k-input w-100",attrs:{id:"certificate-authority",name:"certificate-authority"},on:{change:function(a){var t=Array.prototype.filter.call(a.target.options,(function(e){return e.selected})).map((function(e){var a="_value"in e?e._value:e.value;return a}));e.$set(e.validate,"meshCA",a.target.multiple?t:t[0])}}},[a("option",{attrs:{value:"builtin"}},[e._v(" builtin ")]),a("option",{attrs:{value:"provided"}},[e._v(" provided ")])]),a("p",{staticClass:"help"},[e._v(" If you've enabled mTLS, you must select a CA. ")])]):e._e()]},proxy:!0}])})]},proxy:!0},{key:"logging",fn:function(){return[a("h3",[e._v(" Setup Logging ")]),a("p",[e._v(' You can setup as many logging backends as you need that you can later use to log traffic via the "TrafficLog" policy. In this wizard, we allow you to configure one backend, but you can add more manually if you wish. ')]),a("KCard",{staticClass:"my-6 k-card--small",attrs:{title:"Logging Configuration","has-shadow":""},scopedSlots:e._u([{key:"body",fn:function(){return[a("FormFragment",{attrs:{title:"Logging"}},[a("label",{staticClass:"k-input-label mx-2"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.loggingEnabled,expression:"validate.loggingEnabled"}],staticClass:"k-input mr-2",attrs:{id:"logging-disabled",value:"disabled",name:"logging",type:"radio"},domProps:{checked:e._q(e.validate.loggingEnabled,"disabled")},on:{change:function(a){return e.$set(e.validate,"loggingEnabled","disabled")}}}),a("span",[e._v("Disabled")])]),a("label",{staticClass:"k-input-label mx-2"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.loggingEnabled,expression:"validate.loggingEnabled"}],staticClass:"k-input mr-2",attrs:{id:"logging-enabled",value:"enabled",name:"logging",type:"radio"},domProps:{checked:e._q(e.validate.loggingEnabled,"enabled")},on:{change:function(a){return e.$set(e.validate,"loggingEnabled","enabled")}}}),a("span",[e._v("Enabled")])])]),"enabled"===e.validate.loggingEnabled?a("FormFragment",{attrs:{title:"Backend name","for-attr":"backend-name"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshLoggingBackend,expression:"validate.meshLoggingBackend"}],staticClass:"k-input w-100",attrs:{id:"backend-name",type:"text",placeholder:"your-backend-name"},domProps:{value:e.validate.meshLoggingBackend},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshLoggingBackend",a.target.value)}}})]):e._e(),"enabled"===e.validate.loggingEnabled?a("div",[a("FormFragment",{attrs:{title:"Type"}},[a("select",{directives:[{name:"model",rawName:"v-model",value:e.validate.loggingType,expression:"validate.loggingType"}],ref:"loggingTypeSelect",staticClass:"k-input w-100",attrs:{id:"logging-type",name:"logging-type"},on:{change:function(a){var t=Array.prototype.filter.call(a.target.options,(function(e){return e.selected})).map((function(e){var a="_value"in e?e._value:e.value;return a}));e.$set(e.validate,"loggingType",a.target.multiple?t:t[0])}}},[a("option",{attrs:{value:"tcp"}},[e._v(" TCP ")]),a("option",{attrs:{value:"file"}},[e._v(" File ")])])]),"file"===e.validate.loggingType?a("FormFragment",{attrs:{title:"Path","for-attr":"backend-address"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshLoggingPath,expression:"validate.meshLoggingPath"}],staticClass:"k-input w-100",attrs:{id:"backend-address",type:"text"},domProps:{value:e.validate.meshLoggingPath},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshLoggingPath",a.target.value)}}})]):e._e(),"tcp"===e.validate.loggingType?a("FormFragment",{attrs:{title:"Address","for-attr":"backend-address"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshLoggingAddress,expression:"validate.meshLoggingAddress"}],staticClass:"k-input w-100",attrs:{id:"backend-address",type:"text"},domProps:{value:e.validate.meshLoggingAddress},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshLoggingAddress",a.target.value)}}})]):e._e(),a("FormFragment",{attrs:{title:"Format","for-attr":"backend-format"}},[a("textarea",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshLoggingBackendFormat,expression:"validate.meshLoggingBackendFormat"}],staticClass:"k-input w-100 code-sample",attrs:{id:"backend-format",rows:"12"},domProps:{value:e.validate.meshLoggingBackendFormat},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshLoggingBackendFormat",a.target.value)}}})])],1):e._e()]},proxy:!0}])})]},proxy:!0},{key:"tracing",fn:function(){return[a("h3",[e._v(" Setup Tracing ")]),a("p",[e._v(' You can setup as many tracing backends as you need that you can later use to log traffic via the "TrafficTrace" policy. In this wizard we allow you to configure one backend, but you can add more manually as you wish. ')]),a("KCard",{staticClass:"my-6 k-card--small",attrs:{title:"Tracing Configuration","has-shadow":""},scopedSlots:e._u([{key:"body",fn:function(){return[a("FormFragment",{attrs:{title:"Tracing"}},[a("label",{staticClass:"k-input-label mx-2"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.tracingEnabled,expression:"validate.tracingEnabled"}],staticClass:"k-input mr-2",attrs:{id:"tracing-disabled",value:"disabled",name:"tracing",type:"radio"},domProps:{checked:e._q(e.validate.tracingEnabled,"disabled")},on:{change:function(a){return e.$set(e.validate,"tracingEnabled","disabled")}}}),a("span",[e._v("Disabled")])]),a("label",{staticClass:"k-input-label mx-2"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.tracingEnabled,expression:"validate.tracingEnabled"}],staticClass:"k-input mr-2",attrs:{id:"tracing-enabled",value:"enabled",name:"tracing",type:"radio"},domProps:{checked:e._q(e.validate.tracingEnabled,"enabled")},on:{change:function(a){return e.$set(e.validate,"tracingEnabled","enabled")}}}),a("span",[e._v("Enabled")])])]),"enabled"===e.validate.tracingEnabled?a("FormFragment",{attrs:{title:"Backend name","for-attr":"tracing-backend-name"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshTracingBackend,expression:"validate.meshTracingBackend"}],staticClass:"k-input w-100",attrs:{id:"tracing-backend-name",type:"text",placeholder:"your-tracing-backend-name"},domProps:{value:e.validate.meshTracingBackend},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshTracingBackend",a.target.value)}}})]):e._e(),"enabled"===e.validate.tracingEnabled?a("FormFragment",{attrs:{title:"Type","for-attr":"tracing-type"}},[a("select",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshTracingType,expression:"validate.meshTracingType"}],staticClass:"k-input w-100",attrs:{id:"tracing-type",name:"tracing-type"},on:{change:function(a){var t=Array.prototype.filter.call(a.target.options,(function(e){return e.selected})).map((function(e){var a="_value"in e?e._value:e.value;return a}));e.$set(e.validate,"meshTracingType",a.target.multiple?t:t[0])}}},[a("option",{attrs:{value:"zipkin"}},[e._v(" Zipkin ")])])]):e._e(),"enabled"===e.validate.tracingEnabled?a("FormFragment",{attrs:{title:"Sampling","for-attr":"tracing-sampling"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshTracingSampling,expression:"validate.meshTracingSampling"}],staticClass:"k-input w-100",attrs:{id:"tracing-sampling",type:"number",step:"0.1",min:"0",max:"100"},domProps:{value:e.validate.meshTracingSampling},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshTracingSampling",a.target.value)}}})]):e._e(),"enabled"===e.validate.tracingEnabled?a("FormFragment",{attrs:{title:"URL","for-attr":"tracing-zipkin-url"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshTracingZipkinURL,expression:"validate.meshTracingZipkinURL"}],staticClass:"k-input w-100",attrs:{id:"tracing-zipkin-url",type:"text",placeholder:"http://zipkin.url:1234"},domProps:{value:e.validate.meshTracingZipkinURL},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshTracingZipkinURL",a.target.value)}}})]):e._e()]},proxy:!0}])})]},proxy:!0},{key:"metrics",fn:function(){return[a("h3",[e._v(" Setup Metrics ")]),a("p",[e._v(" You can expose metrics from every data-plane on a configurable path and port that a metrics service, like Prometheus, can use to fetch them. ")]),a("KCard",{staticClass:"my-6 k-card--small",attrs:{title:"Metrics Configuration","has-shadow":""},scopedSlots:e._u([{key:"body",fn:function(){return[a("FormFragment",{attrs:{title:"Metrics"}},[a("label",{staticClass:"k-input-label mx-2"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.metricsEnabled,expression:"validate.metricsEnabled"}],staticClass:"k-input mr-2",attrs:{id:"metrics-disabled",value:"disabled",name:"metrics",type:"radio"},domProps:{checked:e._q(e.validate.metricsEnabled,"disabled")},on:{change:function(a){return e.$set(e.validate,"metricsEnabled","disabled")}}}),a("span",[e._v("Disabled")])]),a("label",{staticClass:"k-input-label mx-2"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.metricsEnabled,expression:"validate.metricsEnabled"}],staticClass:"k-input mr-2",attrs:{id:"metrics-enabled",value:"enabled",name:"metrics",type:"radio"},domProps:{checked:e._q(e.validate.metricsEnabled,"enabled")},on:{change:function(a){return e.$set(e.validate,"metricsEnabled","enabled")}}}),a("span",[e._v("Enabled")])])]),"enabled"===e.validate.metricsEnabled?a("FormFragment",{attrs:{title:"Backend name","for-attr":"metrics-name"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshMetricsName,expression:"validate.meshMetricsName"}],staticClass:"k-input w-100",attrs:{id:"metrics-name",type:"text",placeholder:"your-metrics-backend-name"},domProps:{value:e.validate.meshMetricsName},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshMetricsName",a.target.value)}}})]):e._e(),"enabled"===e.validate.metricsEnabled?a("FormFragment",{attrs:{title:"Type","for-attr":"metrics-type"}},[a("select",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshMetricsType,expression:"validate.meshMetricsType"}],staticClass:"k-input w-100",attrs:{id:"metrics-type",name:"metrics-type"},on:{change:function(a){var t=Array.prototype.filter.call(a.target.options,(function(e){return e.selected})).map((function(e){var a="_value"in e?e._value:e.value;return a}));e.$set(e.validate,"meshMetricsType",a.target.multiple?t:t[0])}}},[a("option",{attrs:{value:"prometheus"}},[e._v(" Prometheus ")])])]):e._e(),"enabled"===e.validate.metricsEnabled?a("FormFragment",{attrs:{title:"Dataplane port","for-attr":"metrics-dataplane-port"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshMetricsDataplanePort,expression:"validate.meshMetricsDataplanePort"}],staticClass:"k-input w-100",attrs:{id:"metrics-dataplane-port",type:"number",step:"1",min:"0",max:"65535",placeholder:"1234"},domProps:{value:e.validate.meshMetricsDataplanePort},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshMetricsDataplanePort",a.target.value)}}})]):e._e(),"enabled"===e.validate.metricsEnabled?a("FormFragment",{attrs:{title:"Dataplane path","for-attr":"metrics-dataplane-path"}},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.validate.meshMetricsDataplanePath,expression:"validate.meshMetricsDataplanePath"}],staticClass:"k-input w-100",attrs:{id:"metrics-dataplane-path",type:"text"},domProps:{value:e.validate.meshMetricsDataplanePath},on:{input:function(a){a.target.composing||e.$set(e.validate,"meshMetricsDataplanePath",a.target.value)}}})]):e._e()]},proxy:!0}])})]},proxy:!0},{key:"complete",fn:function(){return[e.codeOutput?a("div",[!1===e.hideScannerSiblings?a("div",[a("h3",[e._v(" Install a new Mesh ")]),a("p",[e._v(" Since the "+e._s(e.productName)+" GUI is read-only mode to follow Ops best practices, please execute the following command in your shell to create the entity. "+e._s(e.productName)+" will automatically detect when the new entity has been created. ")]),a("TabsWidget",{attrs:{loaders:!1,tabs:e.tabs,"initial-tab-override":e.environment},on:{onTabChange:e.onTabChange},scopedSlots:e._u([{key:"kubernetes",fn:function(){return[a("CodeView",{attrs:{title:"Kubernetes","copy-button-text":"Copy Command to Clipboard",lang:"bash",content:e.codeOutput}})]},proxy:!0},{key:"universal",fn:function(){return[a("CodeView",{attrs:{title:"Universal","copy-button-text":"Copy Command to Clipboard",lang:"bash",content:e.codeOutput}})]},proxy:!0}],null,!1,2548625193)})],1):e._e(),a("EntityScanner",{attrs:{"loader-function":e.scanForEntity,"should-start":!0,"has-error":e.scanError,"can-complete":e.scanFound},on:{hideSiblings:e.hideSiblings},scopedSlots:e._u([{key:"loading-title",fn:function(){return[a("h3",[e._v("Searching…")])]},proxy:!0},{key:"loading-content",fn:function(){return[a("p",[e._v("We are looking for your mesh.")])]},proxy:!0},{key:"complete-title",fn:function(){return[a("h3",[e._v("Done!")])]},proxy:!0},{key:"complete-content",fn:function(){return[a("p",[e._v(" Your Mesh "),e.validate.meshName?a("strong",[e._v(e._s(e.validate.meshName))]):e._e(),e._v(" was found! ")]),a("p",[a("KButton",{attrs:{appearance:"primary",to:{name:"all-meshes"}}},[e._v(" See Meshes ")])],1)]},proxy:!0},{key:"error-title",fn:function(){return[a("h3",[e._v("Mesh not found")])]},proxy:!0},{key:"error-content",fn:function(){return[a("p",[e._v("We were unable to find your mesh.")])]},proxy:!0}],null,!1,293133655)})],1):a("KAlert",{attrs:{appearance:"danger"},scopedSlots:e._u([{key:"alertMessage",fn:function(){return[a("p",[e._v(" You haven't filled any data out yet! Please return to the first step and fill out your information. ")])]},proxy:!0}])})]},proxy:!0},{key:"mesh",fn:function(){return[a("h3",[e._v("Mesh")]),a("p",[e._v(" In "+e._s(e.title)+", a Mesh resource allows you to define an isolated environment for your data-planes and policies. It's isolated because the mTLS CA you choose can be different from the one configured for our Meshes. Ideally, you will have either a large Mesh with all the workloads, or one Mesh per application for better isolation. ")]),a("p",[a("a",{attrs:{href:`https://kuma.io/docs/${e.kumaDocsVersion}/policies/mesh/${e.utm}`,target:"_blank"}},[e._v(" Learn More ")])])]},proxy:!0},{key:"did-you-know",fn:function(){return[a("h3",[e._v("Did You Know?")]),a("p",[e._v(" As you know, the GUI is read-only, but it will be providing instructions to create a new Mesh and verify everything worked well. ")])]},proxy:!0}])})],1)])},i=[],s=t(20629),r=t(17463);function l(e,a){return Object.keys(e).filter((e=>!a.includes(e))).map((a=>Object.assign({},{[a]:e[a]}))).reduce(((e,a)=>Object.assign(e,a)),{})}var o=t(53419),d=t(88523),m=t(5035),c=t(7001),u=t(5872),g=t(22330),p=t(69328),v=t(27545),h=t.n(v),b=t(45689),f={name:"MeshWizard",metaInfo:{title:"Create a new Mesh"},components:{FormFragment:m.Z,TabsWidget:c.Z,StepSkeleton:u.Z,CodeView:g.Z,EntityScanner:p.Z},mixins:[d.Z],data(){return{productName:b.sG,selectedTab:"",schema:h(),steps:[{label:"General & Security",slug:"general"},{label:"Logging",slug:"logging"},{label:"Tracing",slug:"tracing"},{label:"Metrics",slug:"metrics"},{label:"Install",slug:"complete"}],tabs:[{hash:"#kubernetes",title:"Kubernetes"},{hash:"#universal",title:"Universal"}],sidebarContent:[{name:"mesh"},{name:"did-you-know"}],formConditions:{mtlsEnabled:!1,loggingEnabled:!1,tracingEnabled:!1,metricsEnabled:!1,loggingType:null},startScanner:!1,scanFound:!1,hideScannerSiblings:!1,scanError:!1,isComplete:!1,validate:{meshName:"",meshCAName:"",meshLoggingBackend:"",meshTracingBackend:"",meshMetricsName:"",meshTracingZipkinURL:"",mtlsEnabled:"disabled",meshCA:"builtin",loggingEnabled:"disabled",loggingType:"tcp",meshLoggingPath:"/",meshLoggingAddress:"127.0.0.1:5000",meshLoggingBackendFormat:"{ start_time: '%START_TIME%', source: '%KUMA_SOURCE_SERVICE%', destination: '%KUMA_DESTINATION_SERVICE%', source_address: '%KUMA_SOURCE_ADDRESS_WITHOUT_PORT%', destination_address: '%UPSTREAM_HOST%', duration_millis: '%DURATION%', bytes_received: '%BYTES_RECEIVED%', bytes_sent: '%BYTES_SENT%' }",tracingEnabled:"disabled",meshTracingType:"zipkin",meshTracingSampling:99.9,metricsEnabled:"disabled",meshMetricsType:"prometheus",meshMetricsDataplanePort:5670,meshMetricsDataplanePath:"/metrics"},vmsg:[],utm:"?utm_source=Kuma&utm_medium=Kuma-GUI"}},computed:{...(0,s.Se)({title:"config/getTagline",kumaDocsVersion:"config/getKumaDocsVersion",environment:"config/getEnvironment"}),codeOutput(){const e=this.schema,a=Object.assign({},e),t=this.validate;if(!t)return;const n="enabled"===t.mtlsEnabled,i="enabled"===t.loggingEnabled,s="enabled"===t.tracingEnabled,r="enabled"===t.metricsEnabled,o={mtls:n,logging:i,tracing:s,metrics:r},d=[];if(Object.entries(o).forEach((e=>{const a=e[1],t=e[0];a?d.filter((e=>e!==t)):d.push(t)})),n){a.mtls.enabled=!0;const e=a.mtls,t=this.validate.meshCA,n=this.validate.meshCAName;e.backends=[],e.enabledBackend=n,e.backends="provided"===t?[{name:n,type:t,conf:{cert:{secret:""},key:{secret:""}}}]:[{name:n,type:t}]}if(i){const e=a.logging.backends[0],n=e.format;e.conf={},e.name=t.meshLoggingBackend,e.type=t.loggingType,e.format=t.meshLoggingBackendFormat||n,"tcp"===t.loggingType?e.conf.address=t.meshLoggingAddress||"127.0.0.1:5000":"file"===t.loggingType&&(e.conf.path=t.meshLoggingPath)}if(s){const e=a.tracing;e.backends[0].conf={},e.defaultBackend=t.meshTracingBackend,e.backends[0].type=t.meshTracingType||"zipkin",e.backends[0].name=t.meshTracingBackend,e.backends[0].conf.sampling=t.meshTracingSampling||100,e.backends[0].conf.url=t.meshTracingZipkinURL}if(r){const e=a.metrics;e.backends[0].conf={},e.enabledBackend=t.meshMetricsName,e.backends[0].type=t.meshMetricsType||"prometheus",e.backends[0].name=t.meshMetricsName,e.backends[0].conf.port=t.meshMetricsDataplanePort||5670,e.backends[0].conf.path=t.meshMetricsDataplanePath||"/metrics"}const m=l(a,d);let c;return c="#kubernetes"===this.selectedTab?{apiVersion:"kuma.io/v1alpha1",kind:"Mesh",metadata:{name:t.meshName},spec:m}:{type:"Mesh",name:t.meshName,...m},this.formatForCLI(c,'" | kumactl apply -f -')},nextDisabled(){const{meshName:e,meshCAName:a,meshLoggingBackend:t,meshTracingBackend:n,meshTracingZipkinURL:i,meshMetricsName:s,mtlsEnabled:r,loggingEnabled:l,tracingEnabled:o,metricsEnabled:d,meshLoggingPath:m,loggingType:c}=this.validate;return!e.length||"enabled"===r&&!a||("1"===this.$route.query.step?"disabled"!==l&&(!t||"file"===c&&!m):"2"===this.$route.query.step?"enabled"===o&&!(n&&i):"3"===this.$route.query.step&&("enabled"===d&&!s))}},watch:{"validate.meshName"(e){const a=(0,o.GL)(e);this.validate.meshName=a,this.validateMeshName(a)},"validate.meshCAName"(e){this.validate.meshCAName=(0,o.GL)(e)},"validate.meshLoggingBackend"(e){this.validate.meshLoggingBackend=(0,o.GL)(e)},"validate.meshTracingBackend"(e){this.validate.meshTracingBackend=(0,o.GL)(e)},"validate.meshMetricsName"(e){this.validate.meshMetricsName=(0,o.GL)(e)}},methods:{onTabChange(e){this.selectedTab=e},hideSiblings(){this.hideScannerSiblings=!0},validateMeshName(e){this.vmsg.meshName=e&&""!==e?"":"A Mesh name is required to proceed"},scanForEntity(){const e=this.validate.meshName;this.scanComplete=!1,this.scanError=!1,e&&r.Z.getMesh({name:e}).then((e=>{e&&e.name.length>0?(this.isRunning=!0,this.scanFound=!0):this.scanError=!0})).catch((e=>{this.scanError=!0,console.error(e)})).finally((()=>{this.scanComplete=!0}))}}},y=f,k=t(1001),_=(0,k.Z)(y,n,i,!1,null,null,null),E=_.exports},88523:function(e,a,t){var n=t(73570),i=t.n(n);a["Z"]={methods:{formatForCLI(e,a='" | kumactl apply -f -'){const t='echo "',n=i()(e);return`${t}${n}${a}`}}}},27545:function(e){e.exports={mtls:{enabledBackend:null,backends:[]},tracing:{defaultBackend:null,backends:[{name:null,type:null}]},logging:{backends:[{name:null,format:'{ "destination": "%KUMA_DESTINATION_SERVICE%", "destinationAddress": "%UPSTREAM_LOCAL_ADDRESS%", "source": "%KUMA_SOURCE_SERVICE%", "sourceAddress": "%KUMA_SOURCE_ADDRESS%", "bytesReceived": "%BYTES_RECEIVED%", "bytesSent": "%BYTES_SENT%"}',type:null}]},metrics:{enabledBackend:null,backends:[{name:null,type:null}]}}}}]);