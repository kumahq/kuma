import{k as Z,bU as b,c6 as f,c9 as l,cd as t,o as n,i as x,w as r,a as c,b as s,e as a,bV as k,c as o,j as O}from"./index.2d238a59.js";import{L as y}from"./LoadingBox.49616a46.js";import{O as z}from"./OnboardingNavigation.8f3c988a.js";import{O as v,a as I}from"./OnboardingPage.a10858c9.js";const g=1e3,T={name:"MultiZoneView",components:{OnboardingNavigation:z,OnboardingHeading:v,OnboardingPage:I,LoadingBox:y,KCard:b},data(){return{hasZones:!1,hasZoneIngresses:!1,zoneTimeout:null,zoneIngressTimeout:null}},computed:{servicesOnline(){return this.hasZoneIngresses&&this.hasZones},...f({kumaDocsVersion:"config/getKumaDocsVersion"}),documentationLink(){return`https://kuma.io/docs/${this.kumaDocsVersion}/deployments/multi-zone/#zone-control-plane`}},created(){this.getZoneIngresses(),this.getZones()},unmounted(){clearTimeout(this.zoneTimeout),clearTimeout(this.zoneIngressTimeout)},methods:{async getZones(){try{const{total:e}=await l.getZones();this.hasZones=e>0}catch(e){console.error(e)}this.hasZones||(this.zoneTimeout=setTimeout(()=>this.getZones(),g))},async getZoneIngresses(){try{const{total:e}=await l.getAllZoneIngressOverviews();this.hasZoneIngresses=e>0}catch(e){console.error(e)}this.hasZoneIngresses||(this.zoneIngressTimeout=setTimeout(()=>this.getZoneIngresses(),g))}}},V=a("p",{class:"text-center mb-4"},`
        A zone requires both the zone control plane and zone ingress. On Kubernetes, you run a single command to create both resources. On Universal, you must create them separately.
      `,-1),L=["href"],N={class:"text-center my-4"},w={key:0,class:"text-green-500","data-testid":"zone-connected"},B={key:1,class:"text-red-500","data-testid":"zone-disconnected"},C={class:"text-center mt-4 mb-10"},D={key:0,class:"text-green-500","data-testid":"zone-ingress-connected"},A={key:1,class:"text-red-500","data-testid":"zone-ingress-disconnected"},K={key:0,class:"flex justify-center"};function P(e,G,H,j,i,d){const m=t("OnboardingHeading"),h=t("KCard"),u=t("LoadingBox"),_=t("OnboardingNavigation"),p=t("OnboardingPage");return n(),x(p,null,{header:r(()=>[c(m,{title:"Add zones"})]),content:r(()=>[V,s(),c(h,{title:"See the documentation for options to install:","border-variant":"noBorder"},{body:r(()=>[a("a",{target:"_blank",class:"external-link-code-block",href:d.documentationLink},k(d.documentationLink),9,L)]),_:1}),s(),a("div",null,[a("p",N,[s(`
          Zone status:
          `),i.hasZones?(n(),o("span",w,"Connected")):(n(),o("span",B,"Disconnected"))]),s(),a("p",C,[s(`
          Zone ingress status:
          `),i.hasZoneIngresses?(n(),o("span",D,"Connected")):(n(),o("span",A,"Disconnected"))]),s(),!i.hasZoneIngresses||!i.hasZones?(n(),o("div",K,[c(u)])):O("",!0)])]),navigation:r(()=>[c(_,{"next-step":"onboarding-create-mesh","previous-step":"onboarding-configuration-types","should-allow-next":d.servicesOnline},null,8,["should-allow-next"])]),_:1})}const q=Z(T,[["render",P]]);export{q as default};
