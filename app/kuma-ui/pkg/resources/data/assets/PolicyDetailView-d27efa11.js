import{d as $,a2 as b,v as R,r as u,o as e,j as p,h as i,i as h,ax as L,l as _,w as o,g as s,E as w,t as x,ae as P,F as S,G as C,D as q,p as N,P as A,m as B,Y as E,a4 as j}from"./index-ba2f01fe.js";import{_ as F}from"./ResourceCodeBlock.vue_vue_type_style_index_0_lang-1cb0d308.js";import"./CodeBlock.vue_vue_type_style_index_0_lang-cf1d5714.js";import"./toYaml-4e00099e.js";const I={key:3,"data-testid":"affected-data-plane-proxies"},D=$({__name:"PolicyConnections",props:{mesh:{type:String,required:!0},policyPath:{type:String,required:!0},policyName:{type:String,required:!0}},setup(y){const t=y,{t:f}=b(),r=R("");return(k,n)=>{const c=u("RouterLink");return e(),p("div",null,[i(h(L),{id:"dataplane-search",modelValue:r.value,"onUpdate:modelValue":n[0]||(n[0]=a=>r.value=a),type:"text",placeholder:h(f)("policies.detail.dataplane_input_placeholder"),required:"","data-testid":"dataplane-search-input"},null,8,["modelValue","placeholder"]),_(),i(N,{src:`/meshes/${t.mesh}/policy-path/${t.policyPath}/policy/${t.policyName}/dataplanes`},{default:o(({data:a,error:m})=>[m?(e(),s(w,{key:0,error:m},null,8,["error"])):a===void 0?(e(),s(x,{key:1})):a.items.length===0?(e(),s(P,{key:2})):(e(),p("ul",I,[(e(!0),p(S,null,C(a.items.filter(l=>l.dataplane.name.toLowerCase().includes(r.value.toLowerCase())),(l,v)=>(e(),p("li",{key:v,"data-testid":"dataplane-name"},[i(c,{to:{name:"data-plane-detail-view",params:{mesh:l.dataplane.mesh,dataPlane:l.dataplane.name}}},{default:o(()=>[_(q(l.dataplane.name),1)]),_:2},1032,["to"])]))),128))]))]),_:1},8,["src"])])}}}),G={class:"stack"},K=$({__name:"PolicyDetails",props:{policy:{type:Object,required:!0},path:{type:String,required:!0}},setup(y){const t=y,{t:f}=b(),r=A();return(k,n)=>(e(),p("div",G,[i(h(E),null,{body:o(()=>[B("h2",null,q(h(f)("policies.detail.affected_dpps")),1),_(),i(D,{class:"mt-4",mesh:t.policy.mesh,"policy-name":t.policy.name,"policy-path":t.path},null,8,["mesh","policy-name","policy-path"])]),_:1}),_(),i(F,{id:"code-block-policy",resource:t.policy,"resource-fetcher":c=>h(r).getSinglePolicyEntity({name:t.policy.name,mesh:t.policy.mesh,path:t.path},c),"is-searchable":""},null,8,["resource","resource-fetcher"])]))}}),z=$({__name:"PolicyDetailView",setup(y){return(t,f)=>{const r=u("RouteTitle"),k=u("DataSource"),n=u("AppView"),c=u("RouteView");return e(),s(c,{name:"policy-detail-view",params:{mesh:"",policy:"",policyPath:""}},{default:o(({route:a,t:m})=>[i(k,{src:"/*/policy-types"},{default:o(({data:l,error:v})=>[v?(e(),s(w,{key:0,error:v},null,8,["error"])):l===void 0?(e(),s(x,{key:1})):l.policies.length===0?(e(),s(P,{key:2})):(e(!0),p(S,{key:3},C([l.policies.find(d=>d.path===a.params.policyPath)??l.policies[0]],d=>(e(),s(n,{key:d.name,breadcrumbs:[{to:{name:"mesh-detail-view",params:{mesh:a.params.mesh}},text:a.params.mesh},{to:{name:"policy-list-view",params:{mesh:a.params.mesh,policyPath:a.params.policyPath}},text:m("policies.routes.item.breadcrumbs")}]},{title:o(()=>[B("h1",null,[i(j,{text:a.params.policy},{default:o(()=>[i(r,{title:m("policies.routes.item.title",{name:a.params.policy}),render:!0},null,8,["title"])]),_:2},1032,["text"])])]),default:o(()=>[_(),i(k,{src:`/meshes/${a.params.mesh}/policy-path/${d.path}/policy/${a.params.policy}`},{default:o(({data:g,error:V})=>[V?(e(),s(w,{key:0,error:V},null,8,["error"])):g===void 0?(e(),s(x,{key:1})):(e(),s(K,{key:2,policy:g,path:d.path,"data-testid":"detail-view-details"},null,8,["policy","path"]))]),_:2},1032,["src"])]),_:2},1032,["breadcrumbs"]))),128))]),_:2},1024)]),_:1})}}});export{z as default};
