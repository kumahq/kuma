import{L as k}from"./LoadingBox-5fef5267.js";import{O as w,a as x,b as y}from"./OnboardingPage-5b400b7c.js";import{g as A,o as N,e as C,A as T,_ as I,f as P}from"./RouteView.vue_vue_type_script_setup_true_lang-6a5fe479.js";import{_ as D}from"./RouteTitle.vue_vue_type_script_setup_true_lang-2cdb0685.js";import{_ as m}from"./CodeBlock.vue_vue_type_style_index_0_lang-7aedd777.js";import{d as E,l as p,c as L,A as O,o as n,a as S,w as s,h as t,b as R,g as e,e as c,F as V,i as o,f as B,q as $,s as q}from"./index-109d614e.js";import"./WarningIcon.vue_vue_type_script_setup_true_lang-f6b38182.js";const h=i=>($("data-v-93fc7858"),i=i(),q(),i),G=h(()=>o("p",{class:"mb-4 text-center"},`
            The demo application includes two services: a Redis backend to store a counter value, and a frontend web UI to show and increment the counter.
          `,-1)),K=h(()=>o("p",null,"To run execute the following command:",-1)),F={key:1},H={class:"status-box mt-4"},M={key:0,class:"status--is-connected","data-testid":"dpps-connected"},U={key:1,class:"status--is-disconnected","data-testid":"dpps-disconnected"},j={key:0,class:"status-loading-box mt-4"},z=1e3,_="https://github.com/kumahq/kuma-counter-demo/",J="https://github.com/kumahq/kuma-counter-demo/blob/master/README.md",Q="kubectl apply -f https://bit.ly/3Kh2Try",W=E({__name:"AddNewServicesCode",setup(i){const{t:f}=A(),g=N(),b=C(),a=p(!1),l=p(null),v=L(()=>b.getters["config/getEnvironment"]==="kubernetes");r(),O(function(){u()});async function r(){try{const{total:d}=await g.getAllDataplanes();a.value=d>0}catch(d){console.error(d)}finally{a.value||(u(),l.value=window.setTimeout(()=>r(),z))}}function u(){l.value!==null&&window.clearTimeout(l.value)}return(d,X)=>(n(),S(I,null,{default:s(()=>[t(D,{title:R(f)("onboarding.routes.add-services-code.title")},null,8,["title"]),e(),t(T,null,{default:s(()=>[t(w,null,{header:s(()=>[t(x,null,{title:s(()=>[e(`
              Add services
            `)]),_:1})]),content:s(()=>[G,e(),v.value?(n(),c(V,{key:0},[K,e(),t(m,{id:"code-block-kubernetes-command",language:"bash",code:Q})],64)):(n(),c("div",F,[o("p",{class:"mb-4 text-center"},[e(`
              Clone `),o("a",{href:_,target:"_blank"},"the GitHub repository"),e(` for the demo application:
            `)]),e(),t(m,{id:"code-block-clone-command",language:"bash",code:`git clone ${_}`},null,8,["code"]),e(),o("p",{class:"mt-4 text-center"},[e(`
              And follow the instructions in `),o("a",{href:J,target:"_blank"},"the README"),e(`.
            `)])])),e(),o("div",null,[o("p",H,[e(`
              DPPs status:

              `),a.value?(n(),c("span",M,"Connected")):(n(),c("span",U,"Disconnected"))]),e(),a.value?B("",!0):(n(),c("div",j,[t(k)]))])]),navigation:s(()=>[t(y,{"next-step":"onboarding-dataplanes-overview","previous-step":"onboarding-add-services","should-allow-next":a.value},null,8,["should-allow-next"])]),_:1})]),_:1})]),_:1}))}});const ae=P(W,[["__scopeId","data-v-93fc7858"]]);export{ae as default};
