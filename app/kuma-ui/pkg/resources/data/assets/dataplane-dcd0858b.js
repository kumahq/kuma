function c(e){let o=[];e.networking.inbound&&(o=e.networking.inbound.filter(n=>"tags"in n).flatMap(n=>Object.entries(n.tags)).map(([n,t])=>`${n}=${t}`)),e.networking.gateway&&(o=Object.entries(e.networking.gateway.tags).map(([n,t])=>`${n}=${t}`));const a=Array.from(new Set(o));return a.sort((n,t)=>n.localeCompare(t)),a.map(n=>n.split("=")).map(([n,t])=>({label:n,value:t}))}function s(e={subscriptions:[]}){return(e.subscriptions??[]).some(a=>{var n;return((n=a.connectTime)==null?void 0:n.length)&&!a.disconnectTime})?"online":"offline"}function l(e,o={subscriptions:[]}){const a=e.networking.inbound??[],n=a.filter(i=>i.health&&!i.health.ready).map(i=>`Inbound on port ${i.port} is not ready (kuma.io/service: ${i.tags["kuma.io/service"]})`);let t;switch(!0){case a.length===0:t="online";break;case n.length===a.length:t="offline";break;case n.length>0:t="partially_degraded";break;default:t=s(o)}return{status:t,reason:n}}function m(e){var n,t;return((n=e.kumaDp)==null?void 0:n.kumaCpCompatible)??!0?((t=e.envoy)==null?void 0:t.kumaDpCompatible)??!0?{kind:r}:{kind:p,payload:{envoy:e.envoy.version,kumaDp:e.kumaDp.version}}:{kind:u,payload:{kumaDp:e.kumaDp.version}}}const r="COMPATIBLE",u="INCOMPATIBLE_UNSUPPORTED_KUMA_DP",p="INCOMPATIBLE_UNSUPPORTED_ENVOY",g="INCOMPATIBLE_WRONG_FORMAT";export{r as C,g as I,l as a,m as c,c as d,s as g};
