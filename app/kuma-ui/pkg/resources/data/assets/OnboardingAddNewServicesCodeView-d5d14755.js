import{L as y}from"./LoadingBox-954b38b8.js";import{O as A,a as C,b as N}from"./OnboardingPage-1cede428.js";import{C as m}from"./CodeBlock-e20cd205.js";import{d as V,N as O,B as _,O as T,a as r,o as n,b as R,w as a,e as t,f as e,c,F as P,m as o,p as B,x as D,y as I,_ as L}from"./index-4198b723.js";import"./uniqueId-90cc9b93.js";const h=d=>(D("data-v-d7fb9949"),d=d(),I(),d),E=h(()=>o("p",{class:"mb-4 text-center"},`
            The demo application includes two services: a Redis backend to store a counter value, and a frontend web UI to show and increment the counter.
          `,-1)),S=h(()=>o("p",null,"To run execute the following command:",-1)),G={key:1},q={class:"status-box mt-4"},F={key:0,class:"status--is-connected","data-testid":"dpps-connected"},H={key:1,class:"status--is-disconnected","data-testid":"dpps-disconnected"},K={key:0,class:"status-loading-box mt-4"},M=1e3,b="https://github.com/kumahq/kuma-counter-demo/",U="https://github.com/kumahq/kuma-counter-demo/blob/master/README.md",$="kubectl apply -f https://bit.ly/3Kh2Try",j=V({__name:"OnboardingAddNewServicesCodeView",setup(d){const g=O(),s=_(!1),l=_(null);u(),T(function(){p()});async function u(){try{const{total:i}=await g.getAllDataplanes();s.value=i>0}catch(i){console.error(i)}finally{s.value||(p(),l.value=window.setTimeout(()=>u(),M))}}function p(){l.value!==null&&window.clearTimeout(l.value)}return(i,z)=>{const f=r("RouteTitle"),v=r("AppView"),w=r("RouteView");return n(),R(w,{name:"onboarding-add-new-services"},{default:a(({can:k,t:x})=>[t(f,{title:x("onboarding.routes.add-services-code.title"),render:!1},null,8,["title"]),e(),t(v,null,{default:a(()=>[t(A,null,{header:a(()=>[t(C,null,{title:a(()=>[e(`
              Add services
            `)]),_:1})]),content:a(()=>[E,e(),k("use kubernetes")?(n(),c(P,{key:0},[S,e(),t(m,{id:"code-block-kubernetes-command",language:"bash",code:$})],64)):(n(),c("div",G,[o("p",{class:"mb-4 text-center"},[e(`
              Clone `),o("a",{href:b,target:"_blank"},"the GitHub repository"),e(` for the demo application:
            `)]),e(),t(m,{id:"code-block-clone-command",language:"bash",code:`git clone ${b}`},null,8,["code"]),e(),o("p",{class:"mt-4 text-center"},[e(`
              And follow the instructions in `),o("a",{href:U,target:"_blank"},"the README"),e(`.
            `)])])),e(),o("div",null,[o("p",q,[e(`
              DPPs status:

              `),s.value?(n(),c("span",F,"Connected")):(n(),c("span",H,"Disconnected"))]),e(),s.value?B("",!0):(n(),c("div",K,[t(y)]))])]),navigation:a(()=>[t(N,{"next-step":"onboarding-dataplanes-view","previous-step":"onboarding-add-new-services-view","should-allow-next":s.value},null,8,["should-allow-next"])]),_:2},1024)]),_:2},1024)]),_:1})}}});const Z=L(j,[["__scopeId","data-v-d7fb9949"]]);export{Z as default};
