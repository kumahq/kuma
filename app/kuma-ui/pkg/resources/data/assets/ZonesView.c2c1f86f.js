import{k as x,c1 as K,c2 as F,c3 as H,O as M,bU as P,c4 as q,c5 as G,c6 as R,c7 as L,c8 as g,c9 as J,ca as j,cb as Q,cc as l,o as c,c as m,i as y,w as n,a as h,b,j as _,e as I,bV as E,F as S,cd as C}from"./index.bd548025.js";import{D as U,Q as O}from"./DataOverview.c2f3fb00.js";import{_ as Y}from"./CodeBlock.vue_vue_type_style_index_0_lang.867fc141.js";import{F as X}from"./FrameSkeleton.9e99d08e.js";import{_ as $}from"./LabelList.vue_vue_type_style_index_0_lang.911f7b12.js";import{M as ee}from"./MultizoneInfo.473c76e5.js";import{S as te,a as se}from"./SubscriptionHeader.a51046a9.js";import{T as ne}from"./TabsWidget.d5ebbae2.js";import{W as ie}from"./WarningsWidget.98281218.js";import"./EmptyBlock.vue_vue_type_script_setup_true_lang.0d00632b.js";import"./ErrorBlock.ee0cc1df.js";import"./LoadingBlock.vue_vue_type_script_setup_true_lang.f0102383.js";import"./StatusBadge.fafdc81c.js";import"./TagList.4378af73.js";import"./_commonjsHelpers.f037b798.js";const ae={name:"ZonesView",components:{AccordionItem:K,AccordionList:F,CodeBlock:Y,DataOverview:U,FrameSkeleton:X,LabelList:$,MultizoneInfo:ee,SubscriptionDetails:te,SubscriptionHeader:se,TabsWidget:ne,WarningsWidget:ie,KBadge:H,KButton:M,KCard:P},props:{selectedZoneName:{type:String,required:!1,default:null},offset:{type:Number,required:!1,default:0}},data(){return{isLoading:!0,isEmpty:!1,error:null,entityIsLoading:!0,entityIsEmpty:!1,entityHasError:!1,tableDataIsEmpty:!1,empty_state:{title:"No Data",message:"There are no Zones present."},tableData:{headers:[{key:"actions",hideLabel:!0},{label:"Status",key:"status"},{label:"Name",key:"name"},{label:"Zone CP Version",key:"zoneCpVersion"},{label:"Storage type",key:"storeType"},{label:"Ingress",key:"hasIngress"},{label:"Egress",key:"hasEgress"},{key:"warnings",hideLabel:!0}],data:[]},tabs:[{hash:"#overview",title:"Overview"},{hash:"#insights",title:"Zone Insights"},{hash:"#config",title:"Config"},{hash:"#warnings",title:"Warnings"}],entity:{},pageSize:q,next:null,warnings:[],subscriptionsReversed:[],codeOutput:null,zonesWithIngress:new Set,pageOffset:this.offset}},computed:{...G({multicluster:"config/getMulticlusterStatus",globalCpVersion:"config/getVersion"})},watch:{$route(){this.isLoading=!0,this.isEmpty=!1,this.error=null,this.entityIsLoading=!0,this.entityIsEmpty=!1,this.entityHasError=!1,this.tableDataIsEmpty=!1,this.init(0)}},beforeMount(){this.init(this.offset)},methods:{init(t){this.multicluster&&this.loadData(t)},filterTabs(){return this.warnings.length?this.tabs:this.tabs.filter(t=>t.hash!=="#warnings")},tableAction(t){const s=t;this.getEntity(s)},parseData(t){const{zoneInsight:s={},name:i}=t;let a="-",e="",o=!0;s.subscriptions&&s.subscriptions.length&&s.subscriptions.forEach(p=>{if(p.version&&p.version.kumaCp){a=p.version.kumaCp.version;const{kumaCpGlobalCompatible:d=!0}=p.version.kumaCp;o=d,p.config&&(e=JSON.parse(p.config).store.type)}});const r=R(s);return{...t,status:r,zoneCpVersion:a,storeType:e,hasIngress:this.zonesWithIngress.has(i)?"Yes":"No",hasEgress:this.zonesWithEgress.has(i)?"Yes":"No",withWarnings:!o}},calculateZonesWithIngress(t){const s=new Set;t.forEach(({zoneIngress:{zone:i}})=>{s.add(i)}),this.zonesWithIngress=s},calculateZonesWithEgress(t){const s=new Set;t.forEach(({zoneEgress:{zone:i}})=>{s.add(i)}),this.zonesWithEgress=s},async loadData(t){var a;this.pageOffset=t,O.set("offset",t>0?t:null),this.isLoading=!0,this.isEmpty=!1;const s=this.$route.query.ns||null,i=this.pageSize;try{const[{data:e,next:o},{items:r},{items:p}]=await Promise.all([this.getZoneOverviews(s,i,t),L(g.getAllZoneIngressOverviews.bind(g)),L(g.getAllZoneEgressOverviews.bind(g))]);this.next=o,e.length?(this.calculateZonesWithIngress(r),this.calculateZonesWithEgress(p),this.tableData.data=e.map(this.parseData),this.tableDataIsEmpty=!1,this.isEmpty=!1,this.getEntity({name:(a=this.selectedZoneName)!=null?a:e[0].name})):(this.tableData.data=[],this.tableDataIsEmpty=!0,this.isEmpty=!0,this.entityIsEmpty=!0)}catch(e){e instanceof Error?this.error=e:console.error(e),this.isEmpty=!0}finally{this.isLoading=!1}},async getEntity(t){var a,e;this.entityIsLoading=!0,this.entityIsEmpty=!0;const s=["type","name"],i=setTimeout(()=>{this.entityIsEmpty=!0,this.entityIsLoading=!1},"500");if(t){this.entityIsEmpty=!1,this.warnings=[];try{const o=await g.getZoneOverview({name:t.name}),r=(e=(a=o.zoneInsight)==null?void 0:a.subscriptions)!=null?e:[];if(this.entity={...J(o,s),"Authentication Type":j(o)},O.set("zone",this.entity.name),this.subscriptionsReversed=Array.from(r).reverse(),r.length){const{version:p={}}=r[r.length-1],{kumaCp:d={}}=p,v=d.version||"-",{kumaCpGlobalCompatible:w=!0}=d;w||this.warnings.push({kind:Q,payload:{zoneCpVersion:v,globalCpVersion:this.globalCpVersion}}),r[r.length-1].config&&(this.codeOutput=JSON.stringify(JSON.parse(r[r.length-1].config),null,2))}}catch(o){console.error(o),this.entity={},this.entityHasError=!0,this.entityIsEmpty=!0}finally{clearTimeout(i)}}this.entityIsLoading=!1},async getZoneOverviews(t,s,i){if(t)return{data:[await g.getZoneOverview({name:t},{size:s,offset:i})],next:null};{const{items:a,next:e}=await g.getAllZoneOverviews({size:s,offset:i});return{data:a!=null?a:[],next:e}}}}},oe={class:"zones"},re={class:"entity-heading"},le={key:0},ce={key:1},pe={key:2};function ue(t,s,i,a,e,o){const r=l("MultizoneInfo"),p=l("KButton"),d=l("DataOverview"),v=l("KBadge"),w=l("LabelList"),D=l("SubscriptionHeader"),A=l("SubscriptionDetails"),W=l("AccordionItem"),Z=l("AccordionList"),k=l("KCard"),N=l("CodeBlock"),T=l("WarningsWidget"),V=l("TabsWidget"),B=l("FrameSkeleton");return c(),m("div",oe,[t.multicluster===!1?(c(),y(r,{key:0})):(c(),y(B,{key:1},{default:n(()=>{var z;return[h(d,{"selected-entity-name":(z=e.entity)==null?void 0:z.name,"page-size":e.pageSize,"is-loading":e.isLoading,error:e.error,"empty-state":e.empty_state,"table-data":e.tableData,"table-data-is-empty":e.tableDataIsEmpty,"show-warnings":e.tableData.data.some(u=>u.withWarnings),next:e.next,"page-offset":e.pageOffset,onTableAction:o.tableAction,onLoadData:o.loadData},{additionalControls:n(()=>[t.$route.query.ns?(c(),y(p,{key:0,class:"back-button",appearance:"primary",icon:"arrowLeft",to:{name:"zones"}},{default:n(()=>[b(`
            View all
          `)]),_:1})):_("",!0)]),_:1},8,["selected-entity-name","page-size","is-loading","error","empty-state","table-data","table-data-is-empty","show-warnings","next","page-offset","onTableAction","onLoadData"]),b(),e.isEmpty===!1?(c(),y(V,{key:0,"has-error":e.error,"is-loading":e.isLoading,tabs:o.filterTabs(),"initial-tab-override":"overview"},{tabHeader:n(()=>[I("h1",re,`
            Zone: `+E(e.entity.name),1)]),overview:n(()=>[h(w,{"has-error":e.entityHasError,"is-loading":e.entityIsLoading,"is-empty":e.entityIsEmpty},{default:n(()=>[I("div",null,[I("ul",null,[(c(!0),m(S,null,C(e.entity,(u,f)=>(c(),m("li",{key:f},[u?(c(),m("h4",le,E(f),1)):_("",!0),b(),f==="status"?(c(),m("p",ce,[h(v,{appearance:u==="Offline"?"danger":"success"},{default:n(()=>[b(E(u),1)]),_:2},1032,["appearance"])])):(c(),m("p",pe,E(u),1))]))),128))])])]),_:1},8,["has-error","is-loading","is-empty"])]),insights:n(()=>[h(k,{"border-variant":"noBorder"},{body:n(()=>[h(Z,{"initially-open":0},{default:n(()=>[(c(!0),m(S,null,C(e.subscriptionsReversed,(u,f)=>(c(),y(W,{key:f},{"accordion-header":n(()=>[h(D,{details:u},null,8,["details"])]),"accordion-content":n(()=>[h(A,{details:u},null,8,["details"])]),_:2},1024))),128))]),_:1})]),_:1})]),config:n(()=>[e.codeOutput?(c(),y(k,{key:0,"border-variant":"noBorder"},{body:n(()=>[h(N,{id:"code-block-zone-config",language:"json",code:e.codeOutput,"is-searchable":"","query-key":"zone-config"},null,8,["code"])]),_:1})):_("",!0)]),warnings:n(()=>[h(T,{warnings:e.warnings},null,8,["warnings"])]),_:1},8,["has-error","is-loading","tabs"])):_("",!0)]}),_:1}))])}const Se=x(ae,[["render",ue]]);export{Se as default};
