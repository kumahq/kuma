import{_ as Z,k as f,K as d,o as n,b,w as i,d as r,h as o,t as x,f as t,n as O,e as g,r as s}from"./index.2f6d90b0.js";import{L as k}from"./LoadingBox.e6e3fac6.js";import{O as y}from"./OnboardingNavigation.b197222c.js";import{O as z,a as I}from"./OnboardingPage.c673ce06.js";const l=1e3,v={name:"MultiZoneView",components:{OnboardingNavigation:y,OnboardingHeading:z,OnboardingPage:I,LoadingBox:k},metaInfo(){return{title:"Multizone"}},data(){return{hasZones:!1,hasZoneIngresses:!1,zoneTimeout:null,zoneIngressTimeout:null}},computed:{servicesOnline(){return this.hasZoneIngresses&&this.hasZones},...f({kumaDocsVersion:"config/getKumaDocsVersion"}),documentationLink(){return`https://kuma.io/docs/${this.kumaDocsVersion}/deployments/multi-zone/#zone-control-plane`}},created(){this.getZoneIngresses(),this.getZones()},unmounted(){clearTimeout(this.zoneTimeout),clearTimeout(this.zoneIngressTimeout)},methods:{async getZones(){try{const{total:e}=await d.getZones();this.hasZones=e>0}catch(e){console.error(e)}this.hasZones||(this.zoneTimeout=setTimeout(()=>this.getZones(),l))},async getZoneIngresses(){try{const{total:e}=await d.getAllZoneIngressOverviews();this.hasZoneIngresses=e>0}catch(e){console.error(e)}this.hasZoneIngresses||(this.zoneIngressTimeout=setTimeout(()=>this.getZoneIngresses(),l))}}},T=o("p",{class:"text-center mb-4"}," A zone requires both the zone control plane and zone ingress. On Kubernetes, you run a single command to create both resources. On Universal, you must create them separately. ",-1),L=["href"],N={class:"text-center my-4"},V=g(" Zone status: "),w={key:0,class:"text-green-500","data-testid":"zone-connected"},B={key:1,class:"text-red-500","data-testid":"zone-disconnected"},C={class:"text-center mt-4 mb-10"},D=g(" Zone ingress status: "),K={key:0,class:"text-green-500","data-testid":"zone-ingress-connected"},A={key:1,class:"text-red-500","data-testid":"zone-ingress-disconnected"},P={key:0,class:"flex justify-center"};function G(e,H,M,E,a,c){const h=s("OnboardingHeading"),m=s("KCard"),u=s("LoadingBox"),_=s("OnboardingNavigation"),p=s("OnboardingPage");return n(),b(p,null,{header:i(()=>[r(h,{title:"Add zones"})]),content:i(()=>[T,r(m,{title:"See the documentation for options to install:","border-variant":"noBorder"},{body:i(()=>[o("a",{target:"_blank",class:"external-link-code-block",href:c.documentationLink},x(c.documentationLink),9,L)]),_:1}),o("div",null,[o("p",N,[V,a.hasZones?(n(),t("span",w,"Connected")):(n(),t("span",B,"Disconnected"))]),o("p",C,[D,a.hasZoneIngresses?(n(),t("span",K,"Connected")):(n(),t("span",A,"Disconnected"))]),!a.hasZoneIngresses||!a.hasZones?(n(),t("div",P,[r(u)])):O("",!0)])]),navigation:i(()=>[r(_,{"next-step":"onboarding-create-mesh","previous-step":"onboarding-configuration-types","should-allow-next":c.servicesOnline},null,8,["should-allow-next"])]),_:1})}const U=Z(v,[["render",G]]);export{U as default};
