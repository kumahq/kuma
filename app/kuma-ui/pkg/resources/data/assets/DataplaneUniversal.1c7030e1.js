import{_ as I,r as u,o as v,b as T,w as l,h as e,A as F,a3 as K,k as W,cS as g,K as z,f as w,d as i,t as D,i as c,cG as S,F as b,j as N,cT as P,v as k,n as C,e as p}from"./index.b4c50a9a.js";import{j as B}from"./index.58caa11d.js";import{k as G}from"./configUrl.b3f5cf10.js";import{F as j,S as O,E as q}from"./EntityScanner.7e3cd41e.js";import{T as H}from"./TabsWidget.a658e878.js";import{E as R}from"./EnvironmentSwitcher.f390c901.js";import{C as Y}from"./CodeView.beb5647d.js";import"./ErrorBlock.63ee7be4.js";import"./CodeBlock.250aca45.js";const L={},Z=e("a",null,"?",-1);function J(n,a,s,h,t,r){const m=u("KPop");return v(),T(m,{trigger:"hover",class:"help-icon"},{content:l(()=>[e("div",null,[F(n.$slots,"default")])]),default:l(()=>[Z]),_:3})}const Q=I(L,[["render",J]]),X={type:"Dataplane",mesh:null,name:null,networking:{}},$={name:"DataplaneWizardUniversal",components:{FormFragment:j,TabsWidget:H,StepSkeleton:O,EnvironmentSwitcher:R,HelperTooltip:Q,CodeView:Y,EntityScanner:q},data(){return{productName:K,randString:Math.random().toString(36).substring(2,8),schema:X,steps:[{label:"General",slug:"general"},{label:"Topology",slug:"topology"},{label:"Networking",slug:"networking"},{label:"Install",slug:"complete"}],tabs:[{hash:"#universal",title:"Universal"}],sidebarContent:[{name:"dataplane"},{name:"example"},{name:"switch"}],startScanner:!1,scanFound:!1,hideScannerSiblings:!1,scanError:!1,isComplete:!1,validate:{meshName:"",univDataplaneType:"dataplane-type-service",univDataplaneServiceName:"",univDataplaneId:"",univDataplaneCustomIdDisabled:!0,univDataplaneNetworkAddress:null,univDataplaneNetworkServicePort:null,univDataplaneNetworkServiceAddress:"127.0.0.1",univDataplaneNetworkDPPort:null,univDataplaneNetworkProtocol:"tcp"},formFields:{protocols:["tcp","http","grpc"]}}},computed:{...W({title:"config/getTagline",version:"config/getVersion",environment:"config/getEnvironment",meshes:"getMeshList"}),getDataplaneSchema(){const n=Object.assign({},this.schema),{meshName:a,univDataplaneType:s,univDataplaneServiceName:h,univDataplaneId:t,univDataplaneNetworkAddress:r,univDataplaneNetworkServicePort:m,univDataplaneNetworkServiceAddress:d,univDataplaneNetworkDPPort:f,univDataplaneNetworkProtocol:_}=this.validate;if(!!a)return n.name=t,n.mesh=a,s==="dataplane-type-service"?(n.networking.gateway&&delete n.networking.gateway,n.networking={address:r,inbound:[{port:f,servicePort:m,serviceAddress:d,tags:{"kuma.io/service":h,"kuma.io/protocol":_}}]}):s==="dataplane-type-gateway"&&(n.networking.inbound&&delete n.networking.inbound,n.networking={address:r,gateway:{tags:{"kuma.io/service":h}}}),n},generateDpTokenCodeOutput(){const{univDataplaneId:n}=this.validate;return`kumactl generate dataplane-token --name=${n} > kuma-token-${n}`},startDpCodeOutput(){const{univDataplaneId:n}=this.validate;return`kuma-dp run \\
      --cp-address=${G()} \\
      --dataplane=${`"${B(this.getDataplaneSchema)}"`} \\
      --dataplane-token-file=kuma-token-${n}`},nextDisabled(){const{meshName:n,univDataplaneServiceName:a,univDataplaneId:s,univDataplaneNetworkAddress:h,univDataplaneNetworkServicePort:t,univDataplaneNetworkDPPort:r,univDataplaneNetworkProtocol:m}=this.validate;return n.length?this.$route.query.step==="1"?!(a&&s):this.$route.query.step==="2"?!(h&&t&&r&&m):!1:!0}},watch:{"validate.univDataplaneId"(n){this.validate.univDataplaneId=g(n)},"validate.univDataplaneServiceName"(n){const a=g(n);this.validate.univDataplaneServiceName=a,this.validate.univDataplaneServiceName===""?this.validate.univDataplaneId="":this.validate.univDataplaneId=g(`${n}-${this.randString}`)},"validate.univDataplaneNetworkServicePort"(n){const a=n.replace(/[a-zA-Z]*$/g,"").trim();this.validate.univDataplaneNetworkServicePort=a},"validate.univDataplaneNetworkDPPort"(n){const a=n.replace(/[a-zA-Z]*$/g,"").trim();this.validate.univDataplaneNetworkDPPort=a}},methods:{hideSiblings(){this.hideScannerSiblings=!0},scanForEntity(){const{meshName:n,univDataplaneId:a}=this.validate;this.scanComplete=!1,this.scanError=!1,!(!n||!a)&&z.getDataplaneFromMesh({mesh:n,name:a}).then(s=>{var h;((h=s==null?void 0:s.name)==null?void 0:h.length)>0?(this.isRunning=!0,this.scanFound=!0):this.scanError=!0}).catch(s=>{this.scanError=!0,console.error(s)}).finally(()=>{this.scanComplete=!0})},compeleteDataPlaneSetup(){this.$store.dispatch("updateSelectedMesh",this.validate.meshName),this.$router.push({name:"data-plane-list-view",params:{mesh:this.validate.meshName}})}}},ee={class:"wizard"},te={class:"wizard__content"},ae=e("h3",null," Create Universal Dataplane ",-1),ne=e("h3",null," To get started, please select on what Mesh you would like to add the Dataplane: ",-1),le=e("p",null," If you've got an existing Mesh that you would like to associate with your Dataplane, you can select it below, or create a new one using our Mesh Wizard. ",-1),oe=e("small",null,"Would you like to see instructions for Kubernetes? Use sidebar to change wizard!",-1),ie=e("option",{disabled:"",value:""}," Select an existing Mesh\u2026 ",-1),se=["value"],re=e("label",{class:"k-input-label mr-4"}," or ",-1),de=p(" Create a new Mesh "),ue=e("h3",null," Setup Dataplane Mode ",-1),pe=e("p",null," You can create a data plane for a service or a data plane for a Gateway. ",-1),ce={for:"service-dataplane"},ve=e("span",null," Service Dataplane ",-1),he={for:"gateway-dataplane"},me=e("span",null," Gateway Dataplane ",-1),_e=["disabled"],we=p(" Edit "),De=p(" This is a unique ID for the Dataplane instance. "),ke=e("h3",null," Networking ",-1),fe=e("p",null," It's time to now configure the networking settings so that the Dataplane can connect to the local service, and other data planes can consume your service. ",-1),ge=e("p",null,[e("strong",null,"All fields below are required to proceed.")],-1),ye=p(" The IP address that other services will use to consume this data plane. "),Se=p(" The data plane port (that other services will use to consume this service). "),be=p(" The address where your service is listening on the machine. "),Ne=p(" The port where your service is listening on the machine. "),Pe=["value","selected"],Ce=p(" The protocol of the service. "),Ie={key:0},Te={key:0},xe=e("h3",null," Auto-Inject DPP ",-1),Ae=e("h3",null,"Searching\u2026",-1),Ee=e("p",null,"We are looking for your dataplane.",-1),Ve=e("h3",null,"Done!",-1),Me=p(" Your Dataplane "),Ue={key:0},Fe=p(" was found! "),Ke=e("p",null," Proceed to the next step where we will show you your new Dataplane. ",-1),We=p(" View Your Dataplane "),ze=e("h3",null,"Dataplane not found",-1),Be=e("p",null,"We were unable to find your dataplane.",-1),Ge=e("p",null," Please return to the first step and make sure to select an existing Mesh, or create a new one. ",-1),je=e("h3",null,"Dataplane",-1),Oe=e("h3",null,"Example",-1),qe=e("p",null," Below is an example of a Dataplane resource output: ",-1),He=e("code",{class:"block"},[e("pre",null,`type: Dataplane
mesh: default
name: dp-echo-1
networking:
  address: 10.0.0.1
  inbound:
  - port: 10000
    servicePort: 9000
    tags:
      kuma.io/service: echo`)],-1);function Re(n,a,s,h,t,r){const m=u("KButton"),d=u("FormFragment"),f=u("KCard"),_=u("HelperTooltip"),y=u("CodeView"),x=u("TabsWidget"),A=u("EntityScanner"),E=u("KAlert"),V=u("EnvironmentSwitcher"),M=u("StepSkeleton");return v(),w("div",ee,[e("div",te,[i(M,{steps:t.steps,"sidebar-content":t.sidebarContent,"footer-enabled":t.hideScannerSiblings===!1,"next-disabled":r.nextDisabled},{general:l(()=>[ae,e("p",null," Welcome to the wizard to create a new Dataplane resource in "+D(n.title)+". We will be providing you with a few steps that will get you started. ",1),e("p",null," As you know, the "+D(t.productName)+" GUI is read-only. ",1),ne,le,oe,i(f,{class:"my-6","has-shadow":""},{body:l(()=>[i(d,{title:"Choose a Mesh","for-attr":"dp-mesh","all-inline":""},{default:l(()=>[e("div",null,[c(e("select",{id:"dp-mesh","onUpdate:modelValue":a[0]||(a[0]=o=>t.validate.meshName=o),class:"k-input w-100","data-testid":"mesh-select"},[ie,(v(!0),w(b,null,N(n.meshes.items,o=>(v(),w("option",{key:o.name,value:o.name},D(o.name),9,se))),128))],512),[[S,t.validate.meshName]])]),e("div",null,[re,i(m,{to:{name:"create-mesh"},appearance:"secondary"},{default:l(()=>[de]),_:1})])]),_:1})]),_:1})]),topology:l(()=>[ue,pe,i(d,{"all-inline":"","equal-cols":"","hide-label-col":"","shift-right":""},{default:l(()=>[e("div",null,[e("label",ce,[c(e("input",{id:"service-dataplane","onUpdate:modelValue":a[1]||(a[1]=o=>t.validate.univDataplaneType=o),class:"k-input",type:"radio",name:"dataplane-type",value:"dataplane-type-service",checked:""},null,512),[[P,t.validate.univDataplaneType]]),ve]),e("label",he,[c(e("input",{id:"gateway-dataplane","onUpdate:modelValue":a[2]||(a[2]=o=>t.validate.univDataplaneType=o),class:"k-input",type:"radio",name:"dataplane-type",value:"dataplane-type-gateway"},null,512),[[P,t.validate.univDataplaneType]]),me])])]),_:1}),i(d,{"all-inline":"",title:"Service name","for-attr":"service-name"},{default:l(()=>[c(e("input",{id:"service-name","onUpdate:modelValue":a[3]||(a[3]=o=>t.validate.univDataplaneServiceName=o),"data-testid":"service-name",type:"text",class:"k-input w-100 mr-4"},null,512),[[k,t.validate.univDataplaneServiceName]])]),_:1}),i(d,{"all-inline":"",title:"Dataplane ID","for-attr":"dataplane-id"},{default:l(()=>[e("div",null,[c(e("input",{id:"dataplane-id","onUpdate:modelValue":a[4]||(a[4]=o=>t.validate.univDataplaneId=o),type:"text",class:"k-input w-100",disabled:t.validate.univDataplaneCustomIdDisabled},null,8,_e),[[k,t.validate.univDataplaneId]])]),e("div",null,[i(m,{appearance:"secondary",onClick:a[5]||(a[5]=o=>t.validate.univDataplaneCustomIdDisabled=!1)},{default:l(()=>[we]),_:1}),i(_,null,{default:l(()=>[De]),_:1})])]),_:1})]),networking:l(()=>[ke,fe,ge,i(d,{"all-inline":"",title:"Data Plane IP Address","for-attr":"network-address"},{default:l(()=>[c(e("input",{id:"network-address","onUpdate:modelValue":a[6]||(a[6]=o=>t.validate.univDataplaneNetworkAddress=o),type:"text",class:"k-input w-100"},null,512),[[k,t.validate.univDataplaneNetworkAddress]]),i(_,null,{default:l(()=>[ye]),_:1})]),_:1}),i(d,{"all-inline":"","fill-first":"",title:"Data Plane Port","for-attr":"network-dataplane-port"},{default:l(()=>[c(e("input",{id:"network-dataplane-port","onUpdate:modelValue":a[7]||(a[7]=o=>t.validate.univDataplaneNetworkDPPort=o),type:"text",class:"k-input w-100"},null,512),[[k,t.validate.univDataplaneNetworkDPPort]]),i(_,null,{default:l(()=>[Se]),_:1})]),_:1}),i(d,{"all-inline":"",title:"Service IP Address","for-attr":"network-service-address"},{default:l(()=>[c(e("input",{id:"network-service-address","onUpdate:modelValue":a[8]||(a[8]=o=>t.validate.univDataplaneNetworkServiceAddress=o),type:"text",class:"k-input w-100"},null,512),[[k,t.validate.univDataplaneNetworkServiceAddress]]),i(_,null,{default:l(()=>[be]),_:1})]),_:1}),i(d,{"all-inline":"",title:"Service Port","for-attr":"network-service-port"},{default:l(()=>[c(e("input",{id:"network-service-port","onUpdate:modelValue":a[9]||(a[9]=o=>t.validate.univDataplaneNetworkServicePort=o),type:"text",class:"k-input w-100"},null,512),[[k,t.validate.univDataplaneNetworkServicePort]]),i(_,null,{default:l(()=>[Ne]),_:1})]),_:1}),i(d,{"all-inline":"",title:"Protocol","for-attr":"network-dataplane-protocol"},{default:l(()=>[c(e("select",{id:"network-dataplane-protocol","onUpdate:modelValue":a[10]||(a[10]=o=>t.validate.univDataplaneNetworkProtocol=o),class:"k-input w-100",name:"network-dataplane-protocol"},[(v(!0),w(b,null,N(t.formFields.protocols,(o,U)=>(v(),w("option",{key:U,value:o,selected:t.validate.univDataplaneNetworkProtocol===o},D(o),9,Pe))),128))],512),[[S,t.validate.univDataplaneNetworkProtocol]]),i(_,null,{default:l(()=>[Ce]),_:1})]),_:1})]),complete:l(()=>[t.validate.meshName?(v(),w("div",Ie,[t.hideScannerSiblings===!1?(v(),w("div",Te,[xe,e("p",null," It's time to first generate the credentials so that "+D(n.title)+" will allow the Dataplane to successfully authenticate itself with the control plane, and then finally install the Dataplane process (powered by Envoy). ",1),i(x,{loaders:!1,tabs:t.tabs,"initial-tab-override":"universal"},{universal:l(()=>[i(y,{title:"Generate Dataplane Token","copy-button-text":"Copy Command to Clipboard",lang:"bash",content:r.generateDpTokenCodeOutput},null,8,["content"]),i(y,{title:"Start Dataplane Process","copy-button-text":"Copy Command to Clipboard",lang:"bash",content:r.startDpCodeOutput},null,8,["content"])]),_:1},8,["tabs"])])):C("",!0),i(A,{"loader-function":r.scanForEntity,"should-start":!0,"has-error":t.scanError,"can-complete":t.scanFound,onHideSiblings:r.hideSiblings},{"loading-title":l(()=>[Ae]),"loading-content":l(()=>[Ee]),"complete-title":l(()=>[Ve]),"complete-content":l(()=>[e("p",null,[Me,t.validate.univDataplaneId?(v(),w("strong",Ue,D(t.validate.univDataplaneId),1)):C("",!0),Fe]),Ke,e("p",null,[i(m,{appearance:"primary",onClick:r.compeleteDataPlaneSetup},{default:l(()=>[We]),_:1},8,["onClick"])])]),"error-title":l(()=>[ze]),"error-content":l(()=>[Be]),_:1},8,["loader-function","has-error","can-complete","onHideSiblings"])])):(v(),T(E,{key:1,appearance:"danger"},{alertMessage:l(()=>[Ge]),_:1}))]),dataplane:l(()=>[je,e("p",null," In "+D(n.title)+", a Dataplane resource represents a data plane proxy running alongside one of your services. Data plane proxies can be added in any Mesh that you may have created, and in Kubernetes, they will be auto-injected by "+D(n.title)+". ",1)]),example:l(()=>[Oe,qe,He]),switch:l(()=>[i(V)]),_:1},8,["steps","sidebar-content","footer-enabled","next-disabled"])])])}const at=I($,[["render",Re]]);export{at as default};
