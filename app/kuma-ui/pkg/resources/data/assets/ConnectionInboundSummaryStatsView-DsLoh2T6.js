import{d as f,X as C,ap as p,r,p as $,o as A,w as n,b as c,e as d,m as k,a7 as w}from"./index-CHUyLuna.js";const V=f({__name:"ConnectionInboundSummaryStatsView",props:{data:{},networking:{},routeName:{}},setup(i){const a=i,e=C(()=>({...a.data,proxyResourceName:"proxyResourceName"in a.data?p.toString({...p.fromString(a.data.proxyResourceName),sectionName:a.data.port.toString()}):"",listenerAddress:"listenerAddress"in a.data?a.data.listenerAddress:"",clusterName:"clusterName"in a.data?a.data.clusterName:"",port:"port"in a.data?a.data.port.toString():"",servicePort:"servicePort"in a.data?a.data.servicePort:"",name:"name"in a.data?a.data.name:""}));return(S,l)=>{const m=r("RouteTitle"),u=r("XAction"),g=r("XCodeBlock"),x=r("DataCollection"),v=r("DataLoader"),y=r("AppView"),h=r("RouteView");return A(),$(h,{params:{codeSearch:"",codeFilter:!1,codeRegExp:!1,mesh:"",proxy:"",proxyType:"",connection:""},name:a.routeName},{default:n(({route:t,uri:N})=>[c(m,{render:!1,title:"Stats"}),l[1]||(l[1]=d()),c(y,null,{default:n(()=>[c(v,{src:N(k(w),"/connections/stats/for/:proxyType/:name/:mesh/:socketAddress",{proxyType:{ingresses:"zone-ingress",egresses:"zone-egress"}[t.params.proxyType]??"dataplane",name:t.params.proxy,mesh:t.params.mesh||"*",socketAddress:a.networking.inboundAddress})},{default:n(({data:_,refresh:R})=>[c(x,{items:_.raw.split(`
`),predicate:s=>[`listener.${e.value.listenerAddress?.length>0?e.value.listenerAddress:t.params.connection}`,`cluster.${e.value.name}.`,`cluster.${e.value.clusterName}.`,`http.${e.value.name}.`,`http.${e.value.clusterName}.`,`tcp.${e.value.name}.`,`cluster.${e.value.proxyResourceName}.`,`listener.${e.value.proxyResourceName}`,`cluster.${e.value.proxyResourceName}.`,`http.${e.value.proxyResourceName}.`,`http.${e.value.proxyResourceName}.`,`tcp.${e.value.proxyResourceName}.`].some(o=>s.startsWith(o))&&(!s.includes(".rds.")||s.includes(`_${e.value.port}`)||s.includes(`${e.value.servicePort}`))},{default:n(({items:s})=>[c(g,{language:"json",code:s.map(o=>o.replace(`${e.value.listenerAddress?.length>0?e.value.listenerAddress:e.value.proxyResourceName.length?e.value.proxyResourceName:t.params.connection}.`,"").replace(e.value.name.length?`${e.value.name}.`:"","").replace(e.value.clusterName.length?`${e.value.clusterName}.`:"","")).join(`
`),"is-searchable":"",query:t.params.codeSearch,"is-filter-mode":t.params.codeFilter,"is-reg-exp-mode":t.params.codeRegExp,onQueryChange:o=>t.update({codeSearch:o}),onFilterModeChange:o=>t.update({codeFilter:o}),onRegExpModeChange:o=>t.update({codeRegExp:o})},{"primary-actions":n(()=>[c(u,{action:"refresh",appearance:"primary",onClick:R},{default:n(()=>[...l[0]||(l[0]=[d(`
                Refresh
              `,-1)])]),_:1},8,["onClick"])]),_:2},1032,["code","query","is-filter-mode","is-reg-exp-mode","onQueryChange","onFilterModeChange","onRegExpModeChange"])]),_:2},1032,["items","predicate"])]),_:2},1032,["src"])]),_:2},1024)]),_:1},8,["name"])}}});export{V as default};
