import{_ as C,o as c,b as T,w as l,i as e,D as F,r as h,a2 as V,l as K,cR as g,K as B,h as w,e as i,t as D,j as p,cH as S,F as b,k as N,cS as P,v as k,p as I,f as u}from"./index.f2463021.js";import{j as z}from"./index.58caa11d.js";import{k as W}from"./configUrl.b3f5cf10.js";import{C as j}from"./CodeBlock.f31221ad.js";import{F as G,S as H,E as O}from"./EntityScanner.9fa391eb.js";import{E as q}from"./EnvironmentSwitcher.c847a08b.js";const R={},Y=e("a",null,"?",-1);function L(n,t,s,v,a,r){const m=h("KPop");return c(),T(m,{trigger:"hover",class:"help-icon"},{content:l(()=>[e("div",null,[F(n.$slots,"default")])]),default:l(()=>[Y]),_:3})}const Z=C(R,[["render",L]]),J={type:"Dataplane",mesh:null,name:null,networking:{}},Q={name:"DataplaneWizardUniversal",components:{CodeBlock:j,FormFragment:G,StepSkeleton:H,EnvironmentSwitcher:q,HelperTooltip:Z,EntityScanner:O},data(){return{productName:V,randString:Math.random().toString(36).substring(2,8),schema:J,steps:[{label:"General",slug:"general"},{label:"Topology",slug:"topology"},{label:"Networking",slug:"networking"},{label:"Install",slug:"complete"}],tabs:[{hash:"#universal",title:"Universal"}],sidebarContent:[{name:"dataplane"},{name:"example"},{name:"switch"}],startScanner:!1,scanFound:!1,hideScannerSiblings:!1,scanError:!1,isComplete:!1,validate:{meshName:"",univDataplaneType:"dataplane-type-service",univDataplaneServiceName:"",univDataplaneId:"",univDataplaneCustomIdDisabled:!0,univDataplaneNetworkAddress:null,univDataplaneNetworkServicePort:null,univDataplaneNetworkServiceAddress:"127.0.0.1",univDataplaneNetworkDPPort:null,univDataplaneNetworkProtocol:"tcp"},formFields:{protocols:["tcp","http","grpc"]}}},computed:{...K({title:"config/getTagline",version:"config/getVersion",environment:"config/getEnvironment",meshes:"getMeshList"}),getDataplaneSchema(){const n=Object.assign({},this.schema),{meshName:t,univDataplaneType:s,univDataplaneServiceName:v,univDataplaneId:a,univDataplaneNetworkAddress:r,univDataplaneNetworkServicePort:m,univDataplaneNetworkServiceAddress:d,univDataplaneNetworkDPPort:f,univDataplaneNetworkProtocol:_}=this.validate;if(!!t)return n.name=a,n.mesh=t,s==="dataplane-type-service"?(n.networking.gateway&&delete n.networking.gateway,n.networking={address:r,inbound:[{port:f,servicePort:m,serviceAddress:d,tags:{"kuma.io/service":v,"kuma.io/protocol":_}}]}):s==="dataplane-type-gateway"&&(n.networking.inbound&&delete n.networking.inbound,n.networking={address:r,gateway:{tags:{"kuma.io/service":v}}}),n},generateDpTokenCodeOutput(){const{univDataplaneId:n}=this.validate;return`kumactl generate dataplane-token --name=${n} > kuma-token-${n}`},startDpCodeOutput(){const{univDataplaneId:n}=this.validate;return`kuma-dp run \\
      --cp-address=${W()} \\
      --dataplane=${`"${z(this.getDataplaneSchema)}"`} \\
      --dataplane-token-file=kuma-token-${n}`},nextDisabled(){const{meshName:n,univDataplaneServiceName:t,univDataplaneId:s,univDataplaneNetworkAddress:v,univDataplaneNetworkServicePort:a,univDataplaneNetworkDPPort:r,univDataplaneNetworkProtocol:m}=this.validate;return n.length?this.$route.query.step==="1"?!(t&&s):this.$route.query.step==="2"?!(v&&a&&r&&m):!1:!0}},watch:{"validate.univDataplaneId"(n){this.validate.univDataplaneId=g(n)},"validate.univDataplaneServiceName"(n){const t=g(n);this.validate.univDataplaneServiceName=t,this.validate.univDataplaneServiceName===""?this.validate.univDataplaneId="":this.validate.univDataplaneId=g(`${n}-${this.randString}`)},"validate.univDataplaneNetworkServicePort"(n){const t=n.replace(/[a-zA-Z]*$/g,"").trim();this.validate.univDataplaneNetworkServicePort=t},"validate.univDataplaneNetworkDPPort"(n){const t=n.replace(/[a-zA-Z]*$/g,"").trim();this.validate.univDataplaneNetworkDPPort=t}},methods:{hideSiblings(){this.hideScannerSiblings=!0},scanForEntity(){const{meshName:n,univDataplaneId:t}=this.validate;this.scanComplete=!1,this.scanError=!1,!(!n||!t)&&B.getDataplaneFromMesh({mesh:n,name:t}).then(s=>{var v;((v=s==null?void 0:s.name)==null?void 0:v.length)>0?(this.isRunning=!0,this.scanFound=!0):this.scanError=!0}).catch(s=>{this.scanError=!0,console.error(s)}).finally(()=>{this.scanComplete=!0})},compeleteDataPlaneSetup(){this.$store.dispatch("updateSelectedMesh",this.validate.meshName),this.$router.push({name:"data-plane-list-view",params:{mesh:this.validate.meshName}})}}},X={class:"wizard"},$={class:"wizard__content"},ee=e("h3",null," Create Universal Dataplane ",-1),te=e("h3",null," To get started, please select on what Mesh you would like to add the Dataplane: ",-1),ae=e("p",null," If you've got an existing Mesh that you would like to associate with your Dataplane, you can select it below, or create a new one using our Mesh Wizard. ",-1),ne=e("small",null,"Would you like to see instructions for Kubernetes? Use sidebar to change wizard!",-1),le=e("option",{disabled:"",value:""}," Select an existing Mesh\u2026 ",-1),oe=["value"],ie=e("label",{class:"k-input-label mr-4"}," or ",-1),se=u(" Create a new Mesh "),re=e("h3",null," Setup Dataplane Mode ",-1),de=e("p",null," You can create a data plane for a service or a data plane for a Gateway. ",-1),ue={for:"service-dataplane"},pe=e("span",null," Service Dataplane ",-1),ce={for:"gateway-dataplane"},he=e("span",null," Gateway Dataplane ",-1),ve=["disabled"],me=u(" Edit "),_e=u(" This is a unique ID for the Dataplane instance. "),we=e("h3",null," Networking ",-1),De=e("p",null," It's time to now configure the networking settings so that the Dataplane can connect to the local service, and other data planes can consume your service. ",-1),ke=e("p",null,[e("strong",null,"All fields below are required to proceed.")],-1),fe=u(" The IP address that other services will use to consume this data plane. "),ge=u(" The data plane port (that other services will use to consume this service). "),ye=u(" The address where your service is listening on the machine. "),Se=u(" The port where your service is listening on the machine. "),be=["value","selected"],Ne=u(" The protocol of the service. "),Pe={key:0},Ie={key:0},Ce=e("h3",null," Auto-Inject DPP ",-1),Te=e("h4",null,"Generate Dataplane Token",-1),xe=e("h4",null,"Start Dataplane Process",-1),Ee=e("h3",null,"Searching\u2026",-1),Ae=e("p",null,"We are looking for your dataplane.",-1),Me=e("h3",null,"Done!",-1),Ue=u(" Your Dataplane "),Fe={key:0},Ve=u(" was found! "),Ke=e("p",null," Proceed to the next step where we will show you your new Dataplane. ",-1),Be=u(" View Your Dataplane "),ze=e("h3",null,"Dataplane not found",-1),We=e("p",null,"We were unable to find your dataplane.",-1),je=e("p",null," Please return to the first step and make sure to select an existing Mesh, or create a new one. ",-1),Ge=e("h3",null,"Dataplane",-1),He=e("h3",null,"Example",-1),Oe=e("p",null," Below is an example of a Dataplane resource output: ",-1),qe=e("code",{class:"block"},[e("pre",null,`type: Dataplane
mesh: default
name: dp-echo-1
networking:
  address: 10.0.0.1
  inbound:
  - port: 10000
    servicePort: 9000
    tags:
      kuma.io/service: echo`)],-1);function Re(n,t,s,v,a,r){const m=h("KButton"),d=h("FormFragment"),f=h("KCard"),_=h("HelperTooltip"),y=h("CodeBlock"),x=h("EntityScanner"),E=h("KAlert"),A=h("EnvironmentSwitcher"),M=h("StepSkeleton");return c(),w("div",X,[e("div",$,[i(M,{steps:a.steps,"sidebar-content":a.sidebarContent,"footer-enabled":a.hideScannerSiblings===!1,"next-disabled":r.nextDisabled},{general:l(()=>[ee,e("p",null," Welcome to the wizard to create a new Dataplane resource in "+D(n.title)+". We will be providing you with a few steps that will get you started. ",1),e("p",null," As you know, the "+D(a.productName)+" GUI is read-only. ",1),te,ae,ne,i(f,{class:"my-6","has-shadow":""},{body:l(()=>[i(d,{title:"Choose a Mesh","for-attr":"dp-mesh","all-inline":""},{default:l(()=>[e("div",null,[p(e("select",{id:"dp-mesh","onUpdate:modelValue":t[0]||(t[0]=o=>a.validate.meshName=o),class:"k-input w-100","data-testid":"mesh-select"},[le,(c(!0),w(b,null,N(n.meshes.items,o=>(c(),w("option",{key:o.name,value:o.name},D(o.name),9,oe))),128))],512),[[S,a.validate.meshName]])]),e("div",null,[ie,i(m,{to:{name:"create-mesh"},appearance:"secondary"},{default:l(()=>[se]),_:1})])]),_:1})]),_:1})]),topology:l(()=>[re,de,i(d,{"all-inline":"","equal-cols":"","hide-label-col":"","shift-right":""},{default:l(()=>[e("div",null,[e("label",ue,[p(e("input",{id:"service-dataplane","onUpdate:modelValue":t[1]||(t[1]=o=>a.validate.univDataplaneType=o),class:"k-input",type:"radio",name:"dataplane-type",value:"dataplane-type-service",checked:""},null,512),[[P,a.validate.univDataplaneType]]),pe]),e("label",ce,[p(e("input",{id:"gateway-dataplane","onUpdate:modelValue":t[2]||(t[2]=o=>a.validate.univDataplaneType=o),class:"k-input",type:"radio",name:"dataplane-type",value:"dataplane-type-gateway"},null,512),[[P,a.validate.univDataplaneType]]),he])])]),_:1}),i(d,{"all-inline":"",title:"Service name","for-attr":"service-name"},{default:l(()=>[p(e("input",{id:"service-name","onUpdate:modelValue":t[3]||(t[3]=o=>a.validate.univDataplaneServiceName=o),"data-testid":"service-name",type:"text",class:"k-input w-100 mr-4"},null,512),[[k,a.validate.univDataplaneServiceName]])]),_:1}),i(d,{"all-inline":"",title:"Dataplane ID","for-attr":"dataplane-id"},{default:l(()=>[e("div",null,[p(e("input",{id:"dataplane-id","onUpdate:modelValue":t[4]||(t[4]=o=>a.validate.univDataplaneId=o),type:"text",class:"k-input w-100",disabled:a.validate.univDataplaneCustomIdDisabled},null,8,ve),[[k,a.validate.univDataplaneId]])]),e("div",null,[i(m,{appearance:"secondary",onClick:t[5]||(t[5]=o=>a.validate.univDataplaneCustomIdDisabled=!1)},{default:l(()=>[me]),_:1}),i(_,null,{default:l(()=>[_e]),_:1})])]),_:1})]),networking:l(()=>[we,De,ke,i(d,{"all-inline":"",title:"Data Plane IP Address","for-attr":"network-address"},{default:l(()=>[p(e("input",{id:"network-address","onUpdate:modelValue":t[6]||(t[6]=o=>a.validate.univDataplaneNetworkAddress=o),type:"text",class:"k-input w-100"},null,512),[[k,a.validate.univDataplaneNetworkAddress]]),i(_,null,{default:l(()=>[fe]),_:1})]),_:1}),i(d,{"all-inline":"","fill-first":"",title:"Data Plane Port","for-attr":"network-dataplane-port"},{default:l(()=>[p(e("input",{id:"network-dataplane-port","onUpdate:modelValue":t[7]||(t[7]=o=>a.validate.univDataplaneNetworkDPPort=o),type:"text",class:"k-input w-100"},null,512),[[k,a.validate.univDataplaneNetworkDPPort]]),i(_,null,{default:l(()=>[ge]),_:1})]),_:1}),i(d,{"all-inline":"",title:"Service IP Address","for-attr":"network-service-address"},{default:l(()=>[p(e("input",{id:"network-service-address","onUpdate:modelValue":t[8]||(t[8]=o=>a.validate.univDataplaneNetworkServiceAddress=o),type:"text",class:"k-input w-100"},null,512),[[k,a.validate.univDataplaneNetworkServiceAddress]]),i(_,null,{default:l(()=>[ye]),_:1})]),_:1}),i(d,{"all-inline":"",title:"Service Port","for-attr":"network-service-port"},{default:l(()=>[p(e("input",{id:"network-service-port","onUpdate:modelValue":t[9]||(t[9]=o=>a.validate.univDataplaneNetworkServicePort=o),type:"text",class:"k-input w-100"},null,512),[[k,a.validate.univDataplaneNetworkServicePort]]),i(_,null,{default:l(()=>[Se]),_:1})]),_:1}),i(d,{"all-inline":"",title:"Protocol","for-attr":"network-dataplane-protocol"},{default:l(()=>[p(e("select",{id:"network-dataplane-protocol","onUpdate:modelValue":t[10]||(t[10]=o=>a.validate.univDataplaneNetworkProtocol=o),class:"k-input w-100",name:"network-dataplane-protocol"},[(c(!0),w(b,null,N(a.formFields.protocols,(o,U)=>(c(),w("option",{key:U,value:o,selected:a.validate.univDataplaneNetworkProtocol===o},D(o),9,be))),128))],512),[[S,a.validate.univDataplaneNetworkProtocol]]),i(_,null,{default:l(()=>[Ne]),_:1})]),_:1})]),complete:l(()=>[a.validate.meshName?(c(),w("div",Pe,[a.hideScannerSiblings===!1?(c(),w("div",Ie,[Ce,e("p",null," It's time to first generate the credentials so that "+D(n.title)+" will allow the Dataplane to successfully authenticate itself with the control plane, and then finally install the Dataplane process (powered by Envoy). ",1),Te,i(y,{language:"bash",code:r.generateDpTokenCodeOutput},null,8,["code"]),xe,i(y,{language:"bash",code:r.startDpCodeOutput},null,8,["code"])])):I("",!0),i(x,{"loader-function":r.scanForEntity,"should-start":!0,"has-error":a.scanError,"can-complete":a.scanFound,onHideSiblings:r.hideSiblings},{"loading-title":l(()=>[Ee]),"loading-content":l(()=>[Ae]),"complete-title":l(()=>[Me]),"complete-content":l(()=>[e("p",null,[Ue,a.validate.univDataplaneId?(c(),w("strong",Fe,D(a.validate.univDataplaneId),1)):I("",!0),Ve]),Ke,e("p",null,[i(m,{appearance:"primary",onClick:r.compeleteDataPlaneSetup},{default:l(()=>[Be]),_:1},8,["onClick"])])]),"error-title":l(()=>[ze]),"error-content":l(()=>[We]),_:1},8,["loader-function","has-error","can-complete","onHideSiblings"])])):(c(),T(E,{key:1,appearance:"danger"},{alertMessage:l(()=>[je]),_:1}))]),dataplane:l(()=>[Ge,e("p",null," In "+D(n.title)+", a Dataplane resource represents a data plane proxy running alongside one of your services. Data plane proxies can be added in any Mesh that you may have created, and in Kubernetes, they will be auto-injected by "+D(n.title)+". ",1)]),example:l(()=>[He,Oe,qe]),switch:l(()=>[i(A)]),_:1},8,["steps","sidebar-content","footer-enabled","next-disabled"])])])}const $e=C(Q,[["render",Re]]);export{$e as default};
