import{d as w,r as o,p as i,o as m,w as n,b as t,e as l,m as N,Z as T,c as V,N as E,L as F}from"./index-e9EOlcJX.js";const D=w({__name:"ConnectionInboundSummaryClustersView",props:{routeName:{},data:{}},setup(d){const r=d;return(B,s)=>{const u=o("RouteTitle"),_=o("XAction"),g=o("XCodeBlock"),y=o("DataCollection"),C=o("DataLoader"),f=o("AppView"),h=o("RouteView");return m(),i(h,{params:{codeSearch:"",codeFilter:!1,codeRegExp:!1,proxyType:"",mesh:"",proxy:"",connection:""},name:r.routeName},{default:n(({route:e,uri:x})=>[t(u,{render:!1,title:"Clusters"}),s[1]||(s[1]=l()),t(f,null,{default:n(()=>[t(C,{src:x(N(T),"/connections/clusters/for/:proxyType/:name/:mesh",{proxyType:{ingresses:"zone-ingress",egresses:"zone-egress"}[e.params.proxyType]??"dataplane",name:e.params.proxy,mesh:e.params.mesh||"*"})},{default:n(({data:R,refresh:k})=>[(m(!0),V(E,null,F([(r.data.clusterName?r.data.clusterName:e.params.connection).replace("_",":")],c=>(m(),i(y,{key:typeof c,items:R.split(`
`),predicate:p=>p.startsWith(`${c}::`)},{default:n(({items:p})=>[t(g,{language:"json",code:p.map(a=>a.replace(`${c}::`,"")).join(`
`),"is-searchable":"",query:e.params.codeSearch,"is-filter-mode":e.params.codeFilter,"is-reg-exp-mode":e.params.codeRegExp,onQueryChange:a=>e.update({codeSearch:a}),onFilterModeChange:a=>e.update({codeFilter:a}),onRegExpModeChange:a=>e.update({codeRegExp:a})},{"primary-actions":n(()=>[t(_,{action:"refresh",appearance:"primary",onClick:k},{default:n(()=>s[0]||(s[0]=[l(`
                  Refresh
                `)])),_:2,__:[0]},1032,["onClick"])]),_:2},1032,["code","query","is-filter-mode","is-reg-exp-mode","onQueryChange","onFilterModeChange","onRegExpModeChange"])]),_:2},1032,["items","predicate"]))),128))]),_:2},1032,["src"])]),_:2},1024)]),_:1,__:[1]},8,["name"])}}});export{D as default};
