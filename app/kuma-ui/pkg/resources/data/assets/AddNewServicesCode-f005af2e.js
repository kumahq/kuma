import{L as x}from"./LoadingBox-96212d17.js";import{O as y,a as A,b as N}from"./OnboardingPage-92514748.js";import{_ as p}from"./CodeBlock.vue_vue_type_style_index_0_lang-c7bd4e33.js";import{u as C}from"./store-f2021894.js";import{u as T}from"./index-36b3783c.js";import{d as P,r as _,c as D,j as E,o,a as I,w as d,e as s,f as e,u as L,h as a,F as O,g as t,b as S,p as R,k as B}from"./runtime-dom.esm-bundler-9284044f.js";import{_ as V}from"./_plugin-vue_export-helper-c27b6911.js";import"./kongponents.es-3ba46133.js";import"./production-554ae9d4.js";const h=c=>(R("data-v-9b23b64f"),c=c(),B(),c),G=h(()=>t("p",{class:"mb-4 text-center"},`
        The demo application includes two services: a Redis backend to store a counter value, and a frontend web UI to show and increment the counter.
      `,-1)),K=h(()=>t("p",null,"To run execute the following command:",-1)),q={key:1},F={class:"status-box mt-4"},H={key:0,class:"status--is-connected","data-testid":"dpps-connected"},M={key:1,class:"status--is-disconnected","data-testid":"dpps-disconnected"},U={key:0,class:"status-loading-box mt-4"},$=P({__name:"AddNewServicesCode",setup(c){const b=T(),f=C(),g=1e3,l="https://github.com/kumahq/kuma-counter-demo/",v="https://github.com/kumahq/kuma-counter-demo/blob/master/README.md",k="kubectl apply -f https://bit.ly/3Kh2Try",n=_(!1),r=_(null),w=D(()=>f.getters["config/getEnvironment"]==="kubernetes");u(),E(function(){m()});async function u(){try{const{total:i}=await b.getAllDataplanes();n.value=i>0}catch(i){console.error(i)}finally{n.value||(m(),r.value=window.setTimeout(()=>u(),g))}}function m(){r.value!==null&&window.clearTimeout(r.value)}return(i,j)=>(o(),I(N,null,{header:d(()=>[s(y,null,{title:d(()=>[e(`
          Add services
        `)]),_:1})]),content:d(()=>[G,e(),L(w)?(o(),a(O,{key:0},[K,e(),s(p,{id:"code-block-kubernetes-command",language:"bash",code:k})],64)):(o(),a("div",q,[t("p",{class:"mb-4 text-center"},[e(`
          Clone `),t("a",{href:l,target:"_blank"},"the GitHub repository"),e(` for the demo application:
        `)]),e(),s(p,{id:"code-block-clone-command",language:"bash",code:`git clone ${l}`},null,8,["code"]),e(),t("p",{class:"mt-4 text-center"},[e(`
          And follow the instructions in `),t("a",{href:v,target:"_blank"},"the README"),e(`.
        `)])])),e(),t("div",null,[t("p",F,[e(`
          DPPs status:

          `),n.value?(o(),a("span",H,"Connected")):(o(),a("span",M,"Disconnected"))]),e(),n.value?S("",!0):(o(),a("div",U,[s(x)]))])]),navigation:d(()=>[s(A,{"next-step":"onboarding-dataplanes-overview","previous-step":"onboarding-add-services","should-allow-next":n.value},null,8,["should-allow-next"])]),_:1}))}});const oe=V($,[["__scopeId","data-v-9b23b64f"]]);export{oe as default};
