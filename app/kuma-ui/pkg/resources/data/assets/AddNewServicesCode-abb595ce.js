import{L as y}from"./LoadingBox-07898608.js";import{O as A,a as C,b as N}from"./OnboardingPage-1ab903f3.js";import{_ as m}from"./CodeBlock.vue_vue_type_style_index_0_lang-b2b0573a.js";import{d as T,u as R,m as _,V,a as u,o as n,b as P,w as a,e as t,f as e,c,F as D,p as o,v as I,B as L,C as O,_ as B}from"./index-3dc6e8c8.js";const b=d=>(L("data-v-447cbfa3"),d=d(),O(),d),E=b(()=>o("p",{class:"mb-4 text-center"},`
            The demo application includes two services: a Redis backend to store a counter value, and a frontend web UI to show and increment the counter.
          `,-1)),S=b(()=>o("p",null,"To run execute the following command:",-1)),G={key:1},q={class:"status-box mt-4"},F={key:0,class:"status--is-connected","data-testid":"dpps-connected"},H={key:1,class:"status--is-disconnected","data-testid":"dpps-disconnected"},K={key:0,class:"status-loading-box mt-4"},M=1e3,h="https://github.com/kumahq/kuma-counter-demo/",U="https://github.com/kumahq/kuma-counter-demo/blob/master/README.md",$="kubectl apply -f https://bit.ly/3Kh2Try",j=T({__name:"AddNewServicesCode",setup(d){const f=R(),s=_(!1),l=_(null);r(),V(function(){p()});async function r(){try{const{total:i}=await f.getAllDataplanes();s.value=i>0}catch(i){console.error(i)}finally{s.value||(p(),l.value=window.setTimeout(()=>r(),M))}}function p(){l.value!==null&&window.clearTimeout(l.value)}return(i,z)=>{const v=u("RouteTitle"),g=u("AppView"),k=u("RouteView");return n(),P(k,{name:"onboarding-add-new-services"},{default:a(({can:w,t:x})=>[t(v,{title:x("onboarding.routes.add-services-code.title"),render:!1},null,8,["title"]),e(),t(g,null,{default:a(()=>[t(A,null,{header:a(()=>[t(C,null,{title:a(()=>[e(`
              Add services
            `)]),_:1})]),content:a(()=>[E,e(),w("use kubernetes")?(n(),c(D,{key:0},[S,e(),t(m,{id:"code-block-kubernetes-command",language:"bash",code:$})],64)):(n(),c("div",G,[o("p",{class:"mb-4 text-center"},[e(`
              Clone `),o("a",{href:h,target:"_blank"},"the GitHub repository"),e(` for the demo application:
            `)]),e(),t(m,{id:"code-block-clone-command",language:"bash",code:`git clone ${h}`},null,8,["code"]),e(),o("p",{class:"mt-4 text-center"},[e(`
              And follow the instructions in `),o("a",{href:U,target:"_blank"},"the README"),e(`.
            `)])])),e(),o("div",null,[o("p",q,[e(`
              DPPs status:

              `),s.value?(n(),c("span",F,"Connected")):(n(),c("span",H,"Disconnected"))]),e(),s.value?I("",!0):(n(),c("div",K,[t(y)]))])]),navigation:a(()=>[t(N,{"next-step":"onboarding-dataplanes-overview","previous-step":"onboarding-add-services","should-allow-next":s.value},null,8,["should-allow-next"])]),_:2},1024)]),_:2},1024)]),_:1})}}});const Y=B(j,[["__scopeId","data-v-447cbfa3"]]);export{Y as default};
