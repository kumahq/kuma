import{P as g,z as k}from"./production-c33f040b.js";import{$ as b}from"./kongponents.es-c2485d1e.js";import{k as P}from"./kumaApi-302acf12.js";import{k as f}from"./kumaDpServerUrl-b6bb30c6.js";import{t as D}from"./toYaml-4e00099e.js";import{_ as v}from"./CodeBlock.vue_vue_type_style_index_0_lang-a6bd5c2b.js";import{L as x}from"./LoadingBox-da7c932b.js";import{a as C,O as y}from"./OnboardingNavigation-0c346547.js";import{O}from"./OnboardingPage-fe05b34b.js";import{_ as A}from"./_plugin-vue_export-helper-c27b6911.js";import{i as o,a as N,w as i,o as n,e as a,f as e,h as r,F as T,g as s,t as w,b as L}from"./runtime-dom.esm-bundler-32659b48.js";import"./_commonjsHelpers-edff4021.js";import"./store-96085224.js";const B=1e3,R={type:"Dataplane",mesh:"default",name:"example",networking:{address:"localhost",inbound:[{port:7777,servicePort:7777,serviceAddress:"127.0.0.1",tags:{"kuma.io/service":"example","kuma.io/protocol":"tcp"}}]}},E={name:"AddNewServicesCode",components:{CodeBlock:v,OnboardingNavigation:C,OnboardingHeading:y,OnboardingPage:O,LoadingBox:x,KCard:b},data(){return{productName:g,githubLink:"https://github.com/kumahq/kuma-counter-demo/",githubLinkReadme:"https://github.com/kumahq/kuma-counter-demo/blob/master/README.md",k8sRunCommand:"kubectl apply -f https://bit.ly/3Kh2Try",generateDpTokenCode:"kumactl generate dataplane-token --name=redis > kuma-token-redis",startDpCode:`kuma-dp run \\
  --cp-address=${f()} \\
  --dataplane=${`"${D(R)}"`} \\
  --dataplane-token-file=kuma-token-example`,hasDPPs:!1,DPPsTimeout:null}},computed:{...k({environment:"config/getEnvironment"}),isKubernetes(){return this.environment==="kubernetes"}},created(){this.getDPPs()},unmounted(){clearTimeout(this.DPPsTimeout)},methods:{async getDPPs(){try{const{total:d}=await P.getAllDataplanes();this.hasDPPs=d>0}catch(d){console.error(d)}this.hasDPPs||(this.DPPsTimeout=setTimeout(()=>this.getDPPs(),B))}}},K=s("p",{class:"text-center mb-12"},`
        The demo application includes two services: a Redis backend to store a counter value,
        and a frontend web UI to show and increment the counter.
      `,-1),S=s("p",null,"To run execute the following command:",-1),V={key:1},G=s("p",null,"Clone the GitHub repository for the demo application:",-1),H=["href"],I={class:"text-center my-4"},M={key:0,class:"text-green-500","data-testid":"dpps-connected"},U={key:1,class:"text-red-500","data-testid":"dpps-disconnected"},q={key:0,class:"flex justify-center"};function F(d,$,j,z,t,m){const l=o("OnboardingHeading"),c=o("CodeBlock"),p=o("KCard"),u=o("LoadingBox"),h=o("OnboardingNavigation"),_=o("OnboardingPage");return n(),N(_,null,{header:i(()=>[a(l,null,{title:i(()=>[e(`
          Add services
        `)]),_:1})]),content:i(()=>[K,e(),m.isKubernetes?(n(),r(T,{key:0},[S,e(),a(c,{id:"code-block-kubernetes-command",language:"bash",code:t.k8sRunCommand},null,8,["code"])],64)):(n(),r("div",V,[G,e(),a(c,{id:"code-block-clone-command",language:"bash",code:t.githubLink},null,8,["code"]),e(),a(p,{title:"And follow the instructions in the README","border-variant":"noBorder"},{body:i(()=>[s("a",{target:"_blank",class:"external-link-code-block",href:t.githubLinkReadme},w(t.githubLinkReadme),9,H)]),_:1})])),e(),s("div",null,[s("p",I,[e(`
          DPPs status:
          `),t.hasDPPs?(n(),r("span",M,"Connected")):(n(),r("span",U,"Disconeccted"))]),e(),t.hasDPPs?L("",!0):(n(),r("div",q,[a(u)]))])]),navigation:i(()=>[a(h,{"next-step":"onboarding-dataplanes-overview","previous-step":"onboarding-add-services","should-allow-next":t.hasDPPs},null,8,["should-allow-next"])]),_:1})}const re=A(E,[["render",F]]);export{re as default};
