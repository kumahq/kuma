import{L as v}from"./LoadingBox-92173e35.js";import{O as k,a as w,b as x}from"./OnboardingPage-c05779db.js";import{e as y,m as A,A as N,_ as C,d as T}from"./RouteView.vue_vue_type_script_setup_true_lang-90043e39.js";import{_ as I}from"./RouteTitle.vue_vue_type_script_setup_true_lang-2207a44e.js";import{_ as m}from"./CodeBlock.vue_vue_type_style_index_0_lang-471ad284.js";import{d as P,l as p,A as D,o as n,a as L,w as s,h as t,b as O,g as e,e as c,F as E,i as o,f as R,q as S,s as V}from"./index-8422fc56.js";import"./store-a6dbd682.js";import"./WarningIcon.vue_vue_type_script_setup_true_lang-0fd32299.js";const h=d=>(S("data-v-53d3620d"),d=d(),V(),d),B=h(()=>o("p",{class:"mb-4 text-center"},`
            The demo application includes two services: a Redis backend to store a counter value, and a frontend web UI to show and increment the counter.
          `,-1)),$=h(()=>o("p",null,"To run execute the following command:",-1)),q={key:1},G={class:"status-box mt-4"},F={key:0,class:"status--is-connected","data-testid":"dpps-connected"},H={key:1,class:"status--is-disconnected","data-testid":"dpps-disconnected"},K={key:0,class:"status-loading-box mt-4"},M=1e3,_="https://github.com/kumahq/kuma-counter-demo/",U="https://github.com/kumahq/kuma-counter-demo/blob/master/README.md",j="kubectl apply -f https://bit.ly/3Kh2Try",z=P({__name:"AddNewServicesCode",setup(d){const{t:f}=y(),b=A(),a=p(!1),l=p(null);r(),D(function(){u()});async function r(){try{const{total:i}=await b.getAllDataplanes();a.value=i>0}catch(i){console.error(i)}finally{a.value||(u(),l.value=window.setTimeout(()=>r(),M))}}function u(){l.value!==null&&window.clearTimeout(l.value)}return(i,J)=>(n(),L(C,null,{default:s(({can:g})=>[t(I,{title:O(f)("onboarding.routes.add-services-code.title")},null,8,["title"]),e(),t(N,null,{default:s(()=>[t(k,null,{header:s(()=>[t(w,null,{title:s(()=>[e(`
              Add services
            `)]),_:1})]),content:s(()=>[B,e(),g("use kubernetes")?(n(),c(E,{key:0},[$,e(),t(m,{id:"code-block-kubernetes-command",language:"bash",code:j})],64)):(n(),c("div",q,[o("p",{class:"mb-4 text-center"},[e(`
              Clone `),o("a",{href:_,target:"_blank"},"the GitHub repository"),e(` for the demo application:
            `)]),e(),t(m,{id:"code-block-clone-command",language:"bash",code:`git clone ${_}`},null,8,["code"]),e(),o("p",{class:"mt-4 text-center"},[e(`
              And follow the instructions in `),o("a",{href:U,target:"_blank"},"the README"),e(`.
            `)])])),e(),o("div",null,[o("p",G,[e(`
              DPPs status:

              `),a.value?(n(),c("span",F,"Connected")):(n(),c("span",H,"Disconnected"))]),e(),a.value?R("",!0):(n(),c("div",K,[t(v)]))])]),navigation:s(()=>[t(x,{"next-step":"onboarding-dataplanes-overview","previous-step":"onboarding-add-services","should-allow-next":a.value},null,8,["should-allow-next"])]),_:2},1024)]),_:2},1024)]),_:1}))}});const ne=T(z,[["__scopeId","data-v-53d3620d"]]);export{ne as default};
