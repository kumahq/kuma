import{_ as V,a3 as F,k as M,cT as K,K as T,o as r,f as p,h as e,d as i,w as s,t as h,i as d,cG as B,F as U,j as P,cU as v,b as f,v as S,n as k,e as b,r as c,D as W,E as q}from"./index.2f6d90b0.js";import{F as j}from"./FormatForCLI.72422f2d.js";import{F as z,S as A,E as G}from"./EntityScanner.f5e8601c.js";import{T as O}from"./TabsWidget.37f6a0c6.js";import{E as L}from"./EnvironmentSwitcher.dd0c92d3.js";import{C as Y}from"./CodeView.4be9e6ce.js";import"./index.58caa11d.js";import"./ErrorBlock.65239dfd.js";import"./CodeBlock.45d0fc63.js";const R={apiVersion:"v1",kind:"Namespace",metadata:{name:null,namespace:null,annotations:{"kuma.io/sidecar-injection":"enabled","kuma.io/mesh":null}}};const H={name:"DataplaneWizardKubernetes",components:{FormFragment:z,TabsWidget:O,StepSkeleton:A,EnvironmentSwitcher:L,CodeView:Y,EntityScanner:G},mixins:[j],data(){return{productName:F,schema:R,steps:[{label:"General",slug:"general"},{label:"Scope Settings",slug:"scope-settings"},{label:"Install",slug:"complete"}],tabs:[{hash:"#kubernetes",title:"Kubernetes"}],sidebarContent:[{name:"dataplane"},{name:"example"},{name:"switch"}],startScanner:!1,scanFound:!1,hideScannerSiblings:!1,scanError:!1,isComplete:!1,validate:{meshName:"",k8sDataplaneType:"dataplane-type-service",k8sServices:"all-services",k8sNamespace:"",k8sNamespaceSelection:"",k8sServiceDeployment:"",k8sServiceDeploymentSelection:"",k8sIngressDeployment:"",k8sIngressDeploymentSelection:"",k8sIngressType:"",k8sIngressBrand:"kong-ingress",k8sIngressSelection:""}}},computed:{...M({title:"config/getTagline",version:"config/getVersion",environment:"config/getEnvironment",meshes:"getMeshList"}),codeOutput(){const o=Object.assign({},this.schema),a=this.validate.k8sNamespaceSelection;if(!a)return;o.metadata.name=a,o.metadata.namespace=a,o.metadata.annotations["kuma.io/mesh"]=this.validate.meshName;const y=`" | kubectl apply -f - && kubectl delete pod --all -n ${a}`;return this.formatForCLI(o,y)},nextDisabled(){const{k8sNamespaceSelection:o,meshName:a}=this.validate;return a.length?this.$route.query.step==="1"?!o:!1:!0}},watch:{"validate.k8sNamespaceSelection"(o){this.validate.k8sNamespaceSelection=K(o)},$route(){this.$route.query.step===1&&(this.validate.k8sNamespaceSelection?this.nextDisabled=!1:this.nextDisabled=!0)}},methods:{hideSiblings(){this.hideScannerSiblings=!0},scanForEntity(){const a=this.validate.meshName,y=this.validate.k8sNamespaceSelection;this.scanComplete=!1,this.scanError=!1,!(!a||!y)&&T.getDataplaneFromMesh({mesh:a,name:y}).then(_=>{_&&_.name.length>0?(this.isRunning=!0,this.scanFound=!0):this.scanError=!0}).catch(_=>{this.scanError=!0,console.error(_)}).finally(()=>{this.scanComplete=!0})},compeleteDataPlaneSetup(){this.$store.dispatch("updateSelectedMesh",this.validate.meshName),this.$router.push({name:"data-plane-list-view",params:{mesh:this.validate.meshName}})}}},n=o=>(W("data-v-1a79f29b"),o=o(),q(),o),J={class:"wizard"},Q={class:"wizard__content"},X=n(()=>e("h3",null," Create Kubernetes Dataplane ",-1)),Z=n(()=>e("h3",null," To get started, please select on what Mesh you would like to add the Dataplane: ",-1)),$=n(()=>e("p",null," If you've got an existing Mesh that you would like to associate with your Dataplane, you can select it below, or create a new one using our Mesh Wizard. ",-1)),ee=n(()=>e("small",null,"Would you like to see instructions for Universal? Use sidebar to change wizard!",-1)),te=n(()=>e("option",{disabled:"",value:""}," Select an existing Mesh\u2026 ",-1)),se=["value"],ae=n(()=>e("label",{class:"k-input-label mr-4"}," or ",-1)),ne=b(" Create a new Mesh "),le=n(()=>e("h3",null," Setup Dataplane Mode ",-1)),oe=n(()=>e("p",null," You can create a data plane for a service or a data plane for a Gateway. ",-1)),ie={for:"service-dataplane"},re=n(()=>e("span",null," Service Dataplane ",-1)),de={for:"ingress-dataplane"},ce=n(()=>e("span",null," Ingress Dataplane ",-1)),pe={key:0},ue=n(()=>e("p",null," Should the data plane be added for an entire Namespace and all of its services, or for specific individual services in any namespace? ",-1)),me={for:"k8s-services-all"},he=n(()=>e("span",null," All Services in Namespace ",-1)),_e={for:"k8s-services-individual"},ve=n(()=>e("span",null," Individual Services ",-1)),ke={key:1},ye={for:"k8s-ingress-kong"},ge=n(()=>e("span",null," Kong Ingress ",-1)),be={for:"k8s-ingress-other"},fe=n(()=>e("span",null," Other Ingress ",-1)),Se=n(()=>e("p",null,' Please go ahead and deploy the Ingress first, then restart this wizard and select "Existing Ingress". ',-1)),we={key:0},De={key:0},Ne=n(()=>e("h3",null," Auto-Inject DPP ",-1)),Ie=n(()=>e("p",null," You can now execute the following commands to automatically inject the sidecar proxy in every Pod, and by doing so creating the Dataplane. ",-1)),Ce=n(()=>e("h3",null,"Searching\u2026",-1)),xe=n(()=>e("p",null,"We are looking for your dataplane.",-1)),Ee=n(()=>e("h3",null,"Done!",-1)),Ve=b(" Your Dataplane "),Fe={key:0},Me=b(" was found! "),Ke=n(()=>e("p",null," Proceed to the next step where we will show you your new Dataplane. ",-1)),Te=b(" View Your Dataplane "),Be=n(()=>e("h3",null,"Mesh not found",-1)),Ue=n(()=>e("p",null,"We were unable to find your mesh.",-1)),Pe=n(()=>e("p",null," Please return to the first step and make sure to select an existing Mesh, or create a new one. ",-1)),We=n(()=>e("h3",null,"Dataplane",-1)),qe=n(()=>e("h3",null,"Example",-1)),je=n(()=>e("p",null," Below is an example of a Dataplane resource output: ",-1)),ze=n(()=>e("code",{class:"block"},[e("pre",null,`apiVersion: 'kuma.io/v1alpha1'
kind: Dataplane
mesh: default
metadata:
  name: dp-echo-1
  annotations:
    kuma.io/sidecar-injection: enabled
    kuma.io/mesh: default
networking:
  address: 10.0.0.1
  inbound:
  - port: 10000
    servicePort: 9000
    tags:
      kuma.io/service: echo`)],-1));function Ae(o,a,y,_,t,g){const w=c("KButton"),u=c("FormFragment"),m=c("KCard"),D=c("KAlert"),N=c("CodeView"),I=c("TabsWidget"),C=c("EntityScanner"),x=c("EnvironmentSwitcher"),E=c("StepSkeleton");return r(),p("div",J,[e("div",Q,[i(E,{steps:t.steps,"sidebar-content":t.sidebarContent,"footer-enabled":t.hideScannerSiblings===!1,"next-disabled":g.nextDisabled},{general:s(()=>[X,e("p",null," Welcome to the wizard to create a new Dataplane resource in "+h(o.title)+". We will be providing you with a few steps that will get you started. ",1),e("p",null," As you know, the "+h(t.productName)+" GUI is read-only. ",1),Z,$,ee,i(m,{class:"my-6","has-shadow":""},{body:s(()=>[i(u,{title:"Choose a Mesh","for-attr":"dp-mesh","all-inline":""},{default:s(()=>[e("div",null,[d(e("select",{id:"dp-mesh","onUpdate:modelValue":a[0]||(a[0]=l=>t.validate.meshName=l),class:"k-input w-100"},[te,(r(!0),p(U,null,P(o.meshes.items,l=>(r(),p("option",{key:l.name,value:l.name},h(l.name),9,se))),128))],512),[[B,t.validate.meshName]])]),e("div",null,[ae,i(w,{to:{name:"create-mesh"},appearance:"outline"},{default:s(()=>[ne]),_:1})])]),_:1})]),_:1})]),"scope-settings":s(()=>[le,oe,i(m,{class:"my-6","has-shadow":""},{body:s(()=>[i(u,{"all-inline":"","equal-cols":"","hide-label-col":""},{default:s(()=>[e("label",ie,[d(e("input",{id:"service-dataplane","onUpdate:modelValue":a[1]||(a[1]=l=>t.validate.k8sDataplaneType=l),class:"k-input",type:"radio",name:"dataplane-type",value:"dataplane-type-service",checked:""},null,512),[[v,t.validate.k8sDataplaneType]]),re]),e("label",de,[d(e("input",{id:"ingress-dataplane","onUpdate:modelValue":a[2]||(a[2]=l=>t.validate.k8sDataplaneType=l),class:"k-input",type:"radio",name:"dataplane-type",value:"dataplane-type-ingress",disabled:""},null,512),[[v,t.validate.k8sDataplaneType]]),ce])]),_:1})]),_:1}),t.validate.k8sDataplaneType==="dataplane-type-service"?(r(),p("div",pe,[ue,i(m,{class:"my-6","has-shadow":""},{body:s(()=>[i(u,{"all-inline":"","equal-cols":"","hide-label-col":""},{default:s(()=>[e("label",me,[d(e("input",{id:"k8s-services-all","onUpdate:modelValue":a[3]||(a[3]=l=>t.validate.k8sServices=l),class:"k-input",type:"radio",name:"k8s-services",value:"all-services",checked:""},null,512),[[v,t.validate.k8sServices]]),he]),e("label",_e,[d(e("input",{id:"k8s-services-individual","onUpdate:modelValue":a[4]||(a[4]=l=>t.validate.k8sServices=l),class:"k-input",type:"radio",name:"k8s-services",value:"individual-services",disabled:""},null,512),[[v,t.validate.k8sServices]]),ve])]),_:1})]),_:1}),t.validate.k8sServices==="individual-services"?(r(),f(m,{key:0,class:"my-6","has-shadow":""},{body:s(()=>[i(u,{title:"Deployments","for-attr":"k8s-deployment-selection"},{default:s(()=>[d(e("input",{id:"k8s-service-deployment-new","onUpdate:modelValue":a[5]||(a[5]=l=>t.validate.k8sServiceDeploymentSelection=l),type:"text",class:"k-input w-100",placeholder:"your-new-deployment",required:""},null,512),[[S,t.validate.k8sServiceDeploymentSelection]])]),_:1})]),_:1})):k("",!0),i(m,{class:"my-6","has-shadow":""},{body:s(()=>[i(u,{title:"Namespace","for-attr":"k8s-namespace-selection"},{default:s(()=>[d(e("input",{id:"k8s-namespace-new","onUpdate:modelValue":a[6]||(a[6]=l=>t.validate.k8sNamespaceSelection=l),type:"text",class:"k-input w-100",placeholder:"your-namespace",required:""},null,512),[[S,t.validate.k8sNamespaceSelection]])]),_:1})]),_:1})])):k("",!0),t.validate.k8sDataplaneType==="dataplane-type-ingress"?(r(),p("div",ke,[e("p",null,h(o.title)+" natively supports the Kong Ingress. Do you want to deploy Kong or another Ingress? ",1),i(m,{class:"my-6","has-shadow":""},{body:s(()=>[i(u,{"all-inline":"","equal-cols":"","hide-label-col":""},{default:s(()=>[e("label",ye,[d(e("input",{id:"k8s-ingress-kong","onUpdate:modelValue":a[7]||(a[7]=l=>t.validate.k8sIngressBrand=l),class:"k-input",type:"radio",name:"k8s-ingress-brand",value:"kong-ingress",checked:""},null,512),[[v,t.validate.k8sIngressBrand]]),ge]),e("label",be,[d(e("input",{id:"k8s-ingress-other","onUpdate:modelValue":a[8]||(a[8]=l=>t.validate.k8sIngressBrand=l),class:"k-input",type:"radio",name:"k8s-ingress-brand",value:"other-ingress"},null,512),[[v,t.validate.k8sIngressBrand]]),fe])]),_:1})]),_:1}),i(m,{class:"my-6","has-shadow":""},{body:s(()=>[i(u,{title:"Deployments","for-attr":"k8s-deployment-selection"},{default:s(()=>[d(e("input",{id:"k8s-ingress-deployment-new","onUpdate:modelValue":a[9]||(a[9]=l=>t.validate.k8sIngressDeployment=l),type:"text",class:"k-input w-100",placeholder:"your-deployment",required:""},null,512),[[S,t.validate.k8sIngressDeployment]])]),_:1})]),_:1}),t.validate.k8sIngressBrand==="other-ingress"?(r(),f(D,{key:0,appearance:"info"},{alertMessage:s(()=>[Se]),_:1})):k("",!0)])):k("",!0)]),complete:s(()=>[t.validate.meshName?(r(),p("div",we,[t.hideScannerSiblings===!1?(r(),p("div",De,[Ne,Ie,i(I,{loaders:!1,tabs:t.tabs,"initial-tab-override":"kubernetes"},{kubernetes:s(()=>[i(N,{title:"Kubernetes","copy-button-text":"Copy Command to Clipboard",lang:"bash",content:g.codeOutput},null,8,["content"])]),_:1},8,["tabs"])])):k("",!0),i(C,{"loader-function":g.scanForEntity,"should-start":!0,"has-error":t.scanError,"can-complete":t.scanFound,onHideSiblings:g.hideSiblings},{"loading-title":s(()=>[Ce]),"loading-content":s(()=>[xe]),"complete-title":s(()=>[Ee]),"complete-content":s(()=>[e("p",null,[Ve,t.validate.k8sNamespaceSelection?(r(),p("strong",Fe,h(t.validate.k8sNamespaceSelection),1)):k("",!0),Me]),Ke,e("p",null,[i(w,{appearance:"primary",onClick:g.compeleteDataPlaneSetup},{default:s(()=>[Te]),_:1},8,["onClick"])])]),"error-title":s(()=>[Be]),"error-content":s(()=>[Ue]),_:1},8,["loader-function","has-error","can-complete","onHideSiblings"])])):(r(),f(D,{key:1,appearance:"danger"},{alertMessage:s(()=>[Pe]),_:1}))]),dataplane:s(()=>[We,e("p",null," In "+h(o.title)+", a Dataplane resource represents a data plane proxy running alongside one of your services. Data plane proxies can be added in any Mesh that you may have created, and in Kubernetes, they will be auto-injected by "+h(o.title)+". ",1)]),example:s(()=>[qe,je,ze]),switch:s(()=>[i(x)]),_:1},8,["steps","sidebar-content","footer-enabled","next-disabled"])])])}const Ze=V(H,[["render",Ae],["__scopeId","data-v-1a79f29b"]]);export{Ze as default};
