import{d as P,o as n,e as A,h as D,g as F,a as p,f as B,F as I,u as L,q as f,w as b,b as O,k as T}from"./index-1147aef1.js";import{S as V}from"./ServiceSummary-49c1c6fa.js";import{D as j}from"./DataPlaneList-307037e5.js";import{j as z,k as C,g as R,_ as G}from"./RouteView.vue_vue_type_script_setup_true_lang-ca499fa5.js";import{_ as Q}from"./RouteTitle.vue_vue_type_script_setup_true_lang-f1356936.js";import{_ as W}from"./EmptyBlock.vue_vue_type_script_setup_true_lang-495914c1.js";import{E as J}from"./ErrorBlock-22abd2ad.js";import{_ as K}from"./LoadingBlock.vue_vue_type_script_setup_true_lang-c5cb903e.js";import{Q as M}from"./QueryParameter-70743f73.js";import"./kongponents.es-8f2ab58c.js";import"./DefinitionListItem-31bd3e1f.js";import"./ResourceCodeBlock.vue_vue_type_script_setup_true_lang-125286c8.js";import"./CodeBlock.vue_vue_type_style_index_0_lang-99eae46c.js";import"./TextWithCopyButton-84dfce1a.js";import"./StatusInfo.vue_vue_type_script_setup_true_lang-19dcf8fc.js";import"./toYaml-4e00099e.js";import"./StatusBadge-4afb516e.js";import"./TagList-2dbe2543.js";import"./ContentWrapper-cada506d.js";import"./DataOverview-a61bf90e.js";const H=P({__name:"ServiceDetails",props:{service:{type:Object,required:!0},externalService:{type:Object,required:!1,default:null},dataPlaneOverviews:{type:Array,required:!1,default:null},dppFilterFields:{type:Object,required:!0},selectedDppName:{type:String,required:!1,default:null}},emits:["load-dataplane-overviews"],setup(y,{emit:_}){const e=y;function o(u,v){var c;(((c=e.service.serviceType)==null?void 0:c.startsWith("gateway"))??!1)||delete v.gateway,_("load-dataplane-overviews",u,v)}return(u,v)=>{var a;return n(),A(I,null,[D(V,{service:e.service,"external-service":y.externalService},null,8,["service","external-service"]),F(),e.dataPlaneOverviews!==null?(n(),p(j,{key:0,class:"mt-4","data-plane-overviews":e.dataPlaneOverviews,"dpp-filter-fields":e.dppFilterFields,"selected-dpp-name":e.selectedDppName,"is-gateway-view":((a=e.dataPlaneOverviews[0])==null?void 0:a.dataplane.networking.gateway)!==void 0,onLoadData:o},null,8,["data-plane-overviews","dpp-filter-fields","selected-dpp-name","is-gateway-view"])):B("",!0)],64)}}}),U={class:"service-details"},ge=P({__name:"ServiceDetailView",props:{selectedDppName:{type:String,required:!1,default:null}},setup(y){const _=y,e=z(),o=L(),{t:u}=C(),v={name:{description:"filter by name or parts of a name"},protocol:{description:"filter by “kuma.io/protocol” value"},tag:{description:"filter by tags (e.g. “tag: version:2”)"},zone:{description:"filter by “kuma.io/zone” value"}},a=f(null),c=f(null),g=f(null),h=f(!0),w=f(null);N();function N(){const t=M.get("filterFields"),l=t!==null?JSON.parse(t):{};q(0,l)}async function q(t,l={}){h.value=!0,w.value=null,a.value=null,c.value=null,g.value=null;const r=o.params.mesh,m=o.params.service;try{a.value=await e.getServiceInsight({mesh:r,name:m}),a.value.serviceType==="external"?c.value=await e.getExternalServiceByServiceInsightName(r,m):await S(t,l)}catch(s){s instanceof Error?w.value=s:console.error(s)}finally{h.value=!1}}async function S(t,l){const r=o.params.mesh,m=o.params.service;try{const s=E(m,t,l),i=await e.getAllDataplaneOverviewsFromMesh({mesh:r},s);g.value=i.items??[]}catch{g.value=null}}function E(t,l,r){const s=`kuma.io/service:${t}`,i={...r,offset:l,size:50};if(i.tag){const k=Array.isArray(i.tag)?i.tag:[i.tag],x=[];for(const[d,$]of k.entries())$.startsWith("kuma.io/service:")&&x.push(d);for(let d=x.length-1;d===0;d--)k.splice(x[d],1);i.tag=k.concat(s)}else i.tag=s;return i}return(t,l)=>(n(),p(G,{module:"services"},{default:b(({route:r})=>[D(Q,{title:O(u)("services.routes.item.title",{name:r.params.service})},null,8,["title"]),F(),D(R,{breadcrumbs:[{to:{name:"services-list-view",params:{mesh:r.params.mesh}},text:O(u)("services.routes.item.breadcrumbs")}]},{default:b(()=>[T("div",U,[h.value?(n(),p(K,{key:0})):w.value!==null?(n(),p(J,{key:1,error:w.value},null,8,["error"])):a.value===null?(n(),p(W,{key:2})):(n(),p(H,{key:3,service:a.value,"data-plane-overviews":g.value,"external-service":c.value,"dpp-filter-fields":v,"selected-dpp-name":_.selectedDppName,onLoadDataplaneOverviews:S},null,8,["service","data-plane-overviews","external-service","selected-dpp-name"]))])]),_:2},1032,["breadcrumbs"])]),_:1}))}});export{ge as default};
