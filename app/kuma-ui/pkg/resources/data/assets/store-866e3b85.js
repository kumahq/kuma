import{c as f,u as C}from"./vuex.esm-bundler-df5bd11e.js";import{g as A}from"./dataplane-4aecf58f.js";import{a as v}from"./constants-31fdaf55.js";import{k as l}from"./kumaApi-db784568.js";import{C as E}from"./ClientStorage-efe299d9.js";import{f as u}from"./helpers-32595d9f.js";const M={status:null,tagline:null,version:null,kumaDocsVersion:"latest",clientConfig:null},y={SET_CONFIG_DATA:(e,t)=>e.clientConfig=t,SET_STATUS:(e,t)=>e.status=t,SET_TAGLINE:(e,t)=>e.tagline=t,SET_VERSION:(e,t)=>e.version=t,SET_KUMA_DOCS_VERSION:(e,t)=>e.kumaDocsVersion=t},O={getStatus:e=>e.status,getConfig:e=>e.clientConfig,getEnvironment:e=>{var t;return(t=e.clientConfig)==null?void 0:t.environment},getMode:e=>{var t;return(t=e.clientConfig)==null?void 0:t.mode},getTagline:e=>e.tagline,getVersion:e=>e.version,getKumaDocsVersion:e=>e.kumaDocsVersion,getConfigurationType:e=>{var t,s;return(s=(t=e.clientConfig)==null?void 0:t.store)==null?void 0:s.type},getMulticlusterStatus:(e,t)=>({}).VITE_FAKE_MULTIZONE==="true"?(console.warn("%c âœ¨You are currently faking Multi-Zone mode.","background: black; color: white; display: block; padding: 0.25rem;"),!0):t.getMode==="global"},D={bootstrapConfig({dispatch:e}){const t=e("getInfo"),s=e("getConfig");return Promise.all([t,s])},getConfig({commit:e}){return l.getConfig().then(t=>{e("SET_CONFIG_DATA",t)})},getStatus({commit:e}){return l.getStatus().then(t=>{e("SET_STATUS",t)})},getInfo({commit:e}){return l.getInfo().then(t=>{e("SET_TAGLINE",t.tagline),e("SET_VERSION",t.version);let s;const a=t.basedOnKuma??t.version,n=a.indexOf("-preview.");if(n!==-1){const o=a.substring(0,n);s=o==="0.0.0"?"dev":o.replace(/\.\d+$/,".x")}else s=a.replace(/\.\d+$/,".x");e("SET_KUMA_DOCS_VERSION",s)}).catch(t=>{console.error(t)})}},N={namespaced:!0,state:()=>M,getters:O,mutations:y,actions:D},L={isOpen:!1},b={OPEN_MODAL:e=>e.isOpen=!0,CLOSE_MODAL:e=>e.isOpen=!1},R={meshNotificationItemMap(e,t,s){var o;return(((o=s.meshes)==null?void 0:o.items)||[]).reduce((i,r)=>(i[r.name]={hasLogging:Boolean(r.logging),hasMtls:Boolean(r.mtls),hasMetrics:Boolean(r.metrics),hasTracing:Boolean(r.tracing)},i),{})},meshNotificationItemMapWithAction(e,t){const s=t.meshNotificationItemMap;return Object.entries(s).reduce((a,[n,o])=>(Object.values(o).some(r=>!r)&&(a[n]=o),a),{})},singleMeshNotificationItems(e,t,s,a){if(s.selectedMesh===null)return[];const n=t.meshNotificationItemMap[s.selectedMesh],o=Object.entries(a.getMeshInsight.policies).filter(([r,c])=>["MeshAccessLog","MeshTrace"].includes(r)).some(([r,c])=>c.total>0),i=[{name:"Observability, Metrics & Service Map",component:"MetricsNotification",isCompleted:n.hasMetrics},{name:"Logging",component:"LoggingNotification",isCompleted:n.hasLogging||o},{name:"Zero-trust security",component:"MtlsNotification",isCompleted:n.hasMtls},{name:"Tracing",component:"TracingNotification",isCompleted:n.hasTracing}];return i.sort((r,c)=>+r.isCompleted-+c.isCompleted),i},amountOfActions(e,t){return Object.keys(t.meshNotificationItemMapWithAction).length}},V={openModal({commit:e}){e("OPEN_MODAL")},closeModal({commit:e}){e("CLOSE_MODAL")}},H={namespaced:!0,state:()=>L,getters:R,mutations:b,actions:V},P={isCompleted:E.get("onboardingIsCompleted")==="true",step:E.get("onboardingStep")||"onboarding-welcome",mode:"demo"},G={SET_STEP:(e,t)=>e.step=t,SET_IS_COMPLETED:(e,t)=>e.isCompleted=t,UPDATE_MODE:(e,t)=>e.mode=t},F={getMode:e=>e.mode,showOnboarding:(e,t,s)=>{const a=s.meshes.items.length===1&&s.meshes.items[0].name==="default";return s.totalDataplaneCount===0&&a}},w={completeOnboarding({commit:e,dispatch:t}){t("fetchDataplaneTotalCount",null,{root:!0}),t("sidebar/getInsights",null,{root:!0}),e("SET_IS_COMPLETED",!0),E.set("onboardingIsCompleted","true"),E.remove("onboardingStep")},changeStep({commit:e},t){e("SET_STEP",t),E.set("onboardingStep",t)}},x={namespaced:!0,state:()=>P,getters:F,mutations:G,actions:w};function Y(e){const t=e.items.reduce((s,{dataplanes:a,dataplanesByType:n,policies:o,services:i})=>{var r,c;s.services.internal+=i.internal||0,s.services.external+=i.external||0,s.services.total+=i.total||0,s.dataplanes.total+=a.total||0,s.dataplanes.standard+=((r=n.standard)==null?void 0:r.total)||0,s.dataplanes.gateway+=((c=n.gateway)==null?void 0:c.total)||0;for(const[g,h]of Object.entries(o))s.policies[g]||(s.policies[g]=0),s.policies[g]+=h.total||0;return s},{services:{total:0,internal:0,external:0},dataplanes:{total:0,standard:0,gateway:0},policies:{}});return t.policies.total=Object.values(t.policies).reduce((s,a)=>s+a,0),t}function k(e){return Object.entries(e.resources).reduce((t,[s,a])=>(t[s]||(t[s]=0),t[s]+=a.total||0,t),{})}const U={insights:{global:{},mesh:{services:{total:0,internal:0,external:0},dataplanes:{total:0,standard:0,gateway:0},policies:{}}}},B={SET_GLOBAL_INSIGHTS:(e,t)=>e.insights.global=t,SET_MESH_INSIGHTS:(e,t)=>e.insights.mesh=t},z={},W={getInsights({dispatch:e}){return Promise.all([e("getGlobalInsights"),e("getMeshInsights")])},async getMeshInsights({commit:e,rootState:t}){if(t.selectedMesh===null)return;let s,a;try{s={items:[await l.getMeshInsights({name:t.selectedMesh})],total:1},a=Y(s)}catch{a=[]}e("SET_MESH_INSIGHTS",a),e("SET_OVERVIEW_CHART_DATA",{chartName:"policies",data:[{category:"Policy",value:a.policies.total,tooltipDisabled:!0,labelDisabled:!0}]},{root:!0})},async getGlobalInsights({commit:e}){const t=await l.getGlobalInsights(),s=k(t);e("SET_GLOBAL_INSIGHTS",s)}},Z={namespaced:!0,state:()=>U,getters:z,mutations:B,actions:W},I=(e={},t={})=>{const s=e.online||0,a=t.online||0,n=e.partiallyDegraded||0,o=t.partiallyDegraded||0,i=e.total||0,r=t.total||0;return{online:s+a,partiallyDegraded:n+o,total:i+r}},S=()=>({CircuitBreaker:{total:0},FaultInjection:{total:0},HealthCheck:{total:0},MeshAccessLog:{total:0},MeshGateway:{total:0},MeshGatewayRoute:{total:0},MeshTrace:{total:0},MeshTrafficPermission:{total:0},ProxyTemplate:{total:0},RateLimit:{total:0},Retry:{total:0},Timeout:{total:0},TrafficLog:{total:0},TrafficPermission:{total:0},TrafficRoute:{total:0},TrafficTrace:{total:0},VirtualOutbound:{total:0}}),j=(e=S(),t={})=>Object.entries(t).reduce((s,[a,n])=>{const o=s[a]?s[a].total:0;return{...s,[a]:{total:o+n.total}}},e),T=(e={},t={})=>Object.entries(t).reduce((s,[a,n])=>({...s,[a]:I(s[a],n)}),e),$=(e={},t={})=>({kumaDp:T(e.kumaDp,t.kumaDp),envoy:T(e.envoy,t.envoy)});function m(){return{meshesTotal:0,dataplanes:{online:0,partiallyDegraded:0,total:0},policies:S(),dpVersions:{kumaDp:{},envoy:{}}}}function K(e={}){return p([e])}function p(e=[]){return e.reduce((t,s)=>({meshesTotal:e.length,dataplanes:I(t.dataplanes,s.dataplanes),policies:j(t.policies,s.policies),dpVersions:$(t.dpVersions,s.dpVersions)}),{meshesTotal:0,dataplanes:{online:0,partiallyDegraded:0,total:0},policies:S(),dpVersions:{kumaDp:{},envoy:{}}})}const _="Online",d="Offline",X="Partially degraded",Q={menu:null,globalLoading:!0,pageTitle:"",meshes:{total:0,items:[],next:null},selectedMesh:"default",totalDataplaneCount:0,version:"",itemQueryNamespace:"item",totalClusters:0,serviceSummary:{total:0,internal:{total:0,online:0,offline:0,partiallyDegraded:0},external:{total:0}},overviewCharts:{dataplanes:{data:[]},meshes:{data:[]},services:{data:[]},policies:{data:[]},zones:{data:[]},zonesCPVersions:{data:[]},kumaDPVersions:{data:[]},envoyVersions:{data:[]}},meshInsight:m(),meshInsightsFetching:!1,serviceInsightsFetching:!1,externalServicesFetching:!1,zonesInsightsFetching:!1,policyTypes:[],policyTypesByPath:{},policyTypesByName:{}},q={modules:{sidebar:Z,config:N,notifications:H,onboarding:x},state:()=>Q,getters:{globalLoading:e=>e.globalLoading,getMeshList:e=>e.meshes,getItemQueryNamespace:e=>e.itemQueryNamespace,getMeshInsight:e=>e.meshInsight,getMeshInsightsFetching:e=>e.meshInsightsFetching,getServiceInsightsFetching:e=>e.serviceInsightsFetching,getExternalServicesFetching:e=>e.externalServicesFetching,getResourceFetching:({meshInsightsFetching:e,serviceInsightsFetching:t,externalServicesFetching:s})=>e||t||s,getServiceResourcesFetching:({serviceInsightsFetching:e,externalServicesFetching:t})=>e||t,getChart:({overviewCharts:e})=>t=>e[t],getZonesInsightsFetching:({zonesInsightsFetching:e})=>e},mutations:{SET_GLOBAL_LOADING:(e,{globalLoading:t})=>e.globalLoading=t,SET_PAGE_TITLE:(e,t)=>e.pageTitle=t,SET_MESHES:(e,t)=>e.meshes=t,SET_SELECTED_MESH:(e,t)=>e.selectedMesh=t,SET_TOTAL_DATAPLANE_COUNT:(e,t)=>e.totalDataplaneCount=t,SET_TOTAL_CLUSTER_COUNT:(e,t)=>e.totalClusters=t,SET_INTERNAL_SERVICE_SUMMARY:(e,{items:t=[]}={})=>{const{serviceSummary:s}=e,a=(g,{status:h="offline"})=>({...g,[h]:g[h]+1}),n={online:0,partially_degraded:0,offline:0},{online:o,offline:i,partially_degraded:r}=t.reduce(a,n),c=o+i+r;s.internal={...s.internal,total:c,online:o,partiallyDegraded:r,offline:i},s.total=s.external.total+c},SET_EXTERNAL_SERVICE_SUMMARY:(e,{total:t=0}={})=>{e.serviceSummary.external.total=t,e.serviceSummary.total=e.serviceSummary.internal.total+t},SET_MESH_INSIGHT:(e,t)=>e.meshInsight=K(t),SET_MESH_INSIGHT_FROM_ALL_MESHES:(e,t)=>e.meshInsight=p(t.items),SET_ZONES_INSIGHTS_FETCHING:(e,t)=>e.zonesInsightsFetching=t,SET_MESH_INSIGHTS_FETCHING:(e,t)=>e.meshInsightsFetching=t,SET_SERVICE_INSIGHTS_FETCHING:(e,t)=>e.serviceInsightsFetching=t,SET_EXTERNAL_SERVICES_FETCHING:(e,t)=>e.externalServicesFetching=t,SET_OVERVIEW_CHART_DATA:(e,t)=>{const{chartName:s,data:a}=t;e.overviewCharts[s].data=a},SET_POLICY_TYPES:(e,t)=>{t.sort((s,a)=>s.name.localeCompare(a.name)),e.policyTypes=t},SET_POLICY_TYPES_BY_PATH:(e,t)=>e.policyTypesByPath=t,SET_POLICY_TYPES_BY_NAME:(e,t)=>e.policyTypesByName=t},actions:{async bootstrap({commit:e,dispatch:t,getters:s,state:a}){if(e("SET_GLOBAL_LOADING",{globalLoading:!0}),await t("config/getStatus"),s["config/getStatus"]==="OK"){const n=E.get("selectedMesh");if(n&&t("updateSelectedMesh",n),await Promise.all([t("fetchMeshList"),t("fetchDataplaneTotalCount"),t("config/bootstrapConfig"),t("sidebar/getInsights")]),a.meshes.items.length===0)t("updateSelectedMesh",null);else{const o=E.get("selectedMesh");(o===null||!a.meshes.items.some(i=>i.name===o))&&t("updateSelectedMesh",a.meshes.items[0].name)}}e("SET_GLOBAL_LOADING",{globalLoading:!1})},updatePageTitle({commit:e},t){e("SET_PAGE_TITLE",t)},async fetchMeshList({commit:e}){const t={size:v};try{const s=await l.getAllMeshes(t);Array.isArray(s.items)?s.items.sort((a,n)=>a.name==="default"?-1:n.name==="default"?1:a.name.localeCompare(n.name)):s.items=[],e("SET_MESHES",s)}catch(s){console.error(s)}},updateSelectedMesh({commit:e},t){t!==null?E.set("selectedMesh",t):E.remove("selectedMesh"),e("SET_SELECTED_MESH",t)},fetchTotalClusterCount({commit:e}){return l.getZones().then(t=>{const s=t.total;e("SET_TOTAL_CLUSTER_COUNT",s)})},fetchDataplaneTotalCount({commit:e}){const t={size:1};return l.getAllDataplanes(t).then(s=>{const a=s.total;e("SET_TOTAL_DATAPLANE_COUNT",a)}).catch(s=>{console.error(s)})},async fetchMeshInsights({commit:e,dispatch:t},s){e("SET_MESH_INSIGHTS_FETCHING",!0);try{if(s===void 0){const a=await u(l.getAllMeshInsights.bind(l)),n=[];a.items.length>0&&n.push({category:"Mesh",value:a.items.length,tooltipDisabled:!0,labelDisabled:!0}),e("SET_OVERVIEW_CHART_DATA",{chartName:"meshes",data:n}),e("SET_MESH_INSIGHT_FROM_ALL_MESHES",a)}else e("SET_MESH_INSIGHT",await l.getMeshInsights({name:s}))}catch{e("SET_OVERVIEW_CHART_DATA",{chartName:"meshes",data:[]}),e("SET_MESH_INSIGHT",m())}finally{t("setChartsFromMeshInsights")}e("SET_MESH_INSIGHTS_FETCHING",!1)},async fetchServiceInsights({commit:e},t){e("SET_SERVICE_INSIGHTS_FETCHING",!0);try{const s=t===void 0?l.getAllServiceInsights.bind(l):l.getAllServiceInsightsFromMesh.bind(l,{mesh:t});e("SET_INTERNAL_SERVICE_SUMMARY",await u(s))}catch{e("SET_INTERNAL_SERVICE_SUMMARY")}e("SET_SERVICE_INSIGHTS_FETCHING",!1)},async fetchExternalServices({commit:e},t){e("SET_EXTERNAL_SERVICES_FETCHING",!0);try{const s=t===void 0?l.getAllExternalServices.bind(l):l.getAllExternalServicesFromMesh.bind(l,{mesh:t});e("SET_EXTERNAL_SERVICE_SUMMARY",await u(s))}catch{e("SET_EXTERNAL_SERVICE_SUMMARY")}e("SET_EXTERNAL_SERVICES_FETCHING",!1)},async fetchServices({dispatch:e},t){const s=e("fetchExternalServices",t),a=e("fetchServiceInsights",t);await Promise.all([a,s]),await e("setOverviewServicesChartData")},async fetchZonesInsights({commit:e,dispatch:t,getters:s},a=!1){e("SET_ZONES_INSIGHTS_FETCHING",!0);try{if(a){const n=await u(l.getAllZoneOverviews.bind(l));t("setOverviewZonesChartData",n),t("setOverviewZonesCPVersionsChartData",n)}else{const n=[{category:"Zone",value:1,tooltipDisabled:!0,labelDisabled:!0}],o=[{category:s["config/getVersion"],value:1,tooltipDisabled:!0}];e("SET_OVERVIEW_CHART_DATA",{chartName:"zones",data:n}),e("SET_OVERVIEW_CHART_DATA",{chartName:"zonesCPVersions",data:o})}}catch{e("SET_OVERVIEW_CHART_DATA",{chartName:"zones",data:[]}),e("SET_OVERVIEW_CHART_DATA",{chartName:"zonesCPVersions",data:[]})}e("SET_ZONES_INSIGHTS_FETCHING",!1)},async fetchPolicyTypes({commit:e}){const{policies:t}=await l.getPolicyTypes(),s=t.reduce((n,o)=>Object.assign(n,{[o.path]:o}),{}),a=t.reduce((n,o)=>Object.assign(n,{[o.name]:o}),{});e("SET_POLICY_TYPES",t),e("SET_POLICY_TYPES_BY_PATH",s),e("SET_POLICY_TYPES_BY_NAME",a)},setChartsFromMeshInsights({dispatch:e}){e("setOverviewDataplanesChartData"),e("setOverviewKumaDPVersionsChartData"),e("setOverviewEnvoyVersionsChartData")},setOverviewZonesChartData({commit:e},{items:t=[]}){const s=t.length;let a=0;t.forEach(o=>{A(o.zoneInsight)==="online"&&a++});const n=[];s&&(n.push({category:_,value:a}),a!==s&&n.push({category:d,value:s-a})),e("SET_OVERVIEW_CHART_DATA",{chartName:"zones",data:n})},setOverviewServicesChartData({state:e,commit:t}){const{internal:s,external:a}=e.serviceSummary,n=[];s.total&&n.push({category:"Internal",value:s.total,minSizeForLabel:.16,route:{name:"service-list-view",params:{mesh:e.selectedMesh}}}),a.total&&n.push({category:"External",value:a.total,minSizeForLabel:.16,route:{name:"service-list-view",params:{mesh:e.selectedMesh}}}),t("SET_OVERVIEW_CHART_DATA",{chartName:"services",data:n})},setOverviewDataplanesChartData({state:e,commit:t}){const s=e.meshInsight.dataplanes.total,a=e.meshInsight.dataplanes.online??0,n=e.meshInsight.dataplanes.partiallyDegraded??0,o=[];s&&(o.push({category:_,value:a}),n&&o.push({category:X,value:n}),a+n!==s&&o.push({category:d,value:s-n-a})),t("SET_OVERVIEW_CHART_DATA",{chartName:"dataplanes",data:o})},setOverviewZonesCPVersionsChartData({commit:e},{items:t}){const s=t.reduce((a,n)=>{const{subscriptions:o}=n.zoneInsight;if(!o.length)return a;const{version:i}=n.zoneInsight.subscriptions.pop(),r=a.find(({category:c})=>{var g;return c===((g=i==null?void 0:i.kumaCp)==null?void 0:g.version)});return r?r.value++:a.push({category:i.kumaCp.version,value:1}),a},[]);e("SET_OVERVIEW_CHART_DATA",{chartName:"zonesCPVersions",data:s})},setOverviewEnvoyVersionsChartData({state:e,commit:t}){const{envoy:s}=e.meshInsight.dpVersions,a=Object.entries(s).map(([n,o])=>({category:n,value:o.total}));t("SET_OVERVIEW_CHART_DATA",{chartName:"envoyVersions",data:a})},setOverviewKumaDPVersionsChartData({state:e,commit:t}){const{kumaDp:s}=e.meshInsight.dpVersions,a=Object.entries(s).map(([n,o])=>({category:n,value:o.total}));t("SET_OVERVIEW_CHART_DATA",{chartName:"kumaDPVersions",data:a})}}},J=Symbol("store"),ie=f(q);function re(){return C(J)}export{J as a,ie as s,re as u};
