import{H as _,O as k,cl as b,co as P,k as f,i as o,o as n,c as D,w as c,a,b as t,j as i,F as v,l as s,t as x,B as C}from"./index.e014f0d3.js";import{j as y}from"./index.58caa11d.js";import{k as O}from"./kumaDpServerUrl.1e48e09f.js";import{_ as A}from"./CodeBlock.vue_vue_type_style_index_0_lang.e945f8ce.js";import{L as N}from"./LoadingBox.8b4a2e74.js";import{O as T}from"./OnboardingNavigation.ce0e25fe.js";import{O as w,a as L}from"./OnboardingPage.f68c3d36.js";import"./_commonjsHelpers.f037b798.js";const B=1e3,R={type:"Dataplane",mesh:"default",name:"example",networking:{address:"localhost",inbound:[{port:7777,servicePort:7777,serviceAddress:"127.0.0.1",tags:{"kuma.io/service":"example","kuma.io/protocol":"tcp"}}]}},E={name:"AddNewServicesCode",components:{CodeBlock:A,OnboardingNavigation:T,OnboardingHeading:w,OnboardingPage:L,LoadingBox:N,KCard:k},data(){return{productName:b,githubLink:"https://github.com/kumahq/kuma-counter-demo/",githubLinkReadme:"https://github.com/kumahq/kuma-counter-demo/blob/master/README.md",k8sRunCommand:"kubectl apply -f https://bit.ly/3Kh2Try",generateDpTokenCode:"kumactl generate dataplane-token --name=redis > kuma-token-redis",startDpCode:`kuma-dp run \\
  --cp-address=${O()} \\
  --dataplane=${`"${y(R)}"`} \\
  --dataplane-token-file=kuma-token-example`,hasDPPs:!1,DPPsTimeout:null}},computed:{...P({environment:"config/getEnvironment"}),isKubernetes(){return this.environment==="kubernetes"}},created(){this.getDPPs()},unmounted(){clearTimeout(this.DPPsTimeout)},methods:{async getDPPs(){try{const{total:r}=await f.getAllDataplanes();this.hasDPPs=r>0}catch(r){console.error(r)}this.hasDPPs||(this.DPPsTimeout=setTimeout(()=>this.getDPPs(),B))}}},K=s("p",{class:"text-center mb-12"},`
        The demo application includes two services: a Redis backend to store a counter value,
        and a frontend web UI to show and increment the counter.
      `,-1),H=s("p",null,"To run execute the following command:",-1),S={key:1},V=s("p",null,"Clone the GitHub repository for the demo application:",-1),j=["href"],G={class:"text-center my-4"},I={key:0,class:"text-green-500","data-testid":"dpps-connected"},M={key:1,class:"text-red-500","data-testid":"dpps-disconnected"},U={key:0,class:"flex justify-center"};function q(r,F,z,J,e,l){const m=o("OnboardingHeading"),d=o("CodeBlock"),u=o("KCard"),p=o("LoadingBox"),h=o("OnboardingNavigation"),g=o("OnboardingPage");return n(),D(g,null,{header:c(()=>[a(m,{title:"Add services"})]),content:c(()=>[K,t(),l.isKubernetes?(n(),i(v,{key:0},[H,t(),a(d,{id:"code-block-kubernetes-command",language:"bash",code:e.k8sRunCommand},null,8,["code"])],64)):(n(),i("div",S,[V,t(),a(d,{id:"code-block-clone-command",language:"bash",code:e.githubLink},null,8,["code"]),t(),a(u,{title:"And follow the instructions in the README","border-variant":"noBorder"},{body:c(()=>[s("a",{target:"_blank",class:"external-link-code-block",href:e.githubLinkReadme},x(e.githubLinkReadme),9,j)]),_:1})])),t(),s("div",null,[s("p",G,[t(`
          DPPs status:
          `),e.hasDPPs?(n(),i("span",I,"Connected")):(n(),i("span",M,"Disconeccted"))]),t(),e.hasDPPs?C("",!0):(n(),i("div",U,[a(p)]))])]),navigation:c(()=>[a(h,{"next-step":"onboarding-dataplanes-overview","previous-step":"onboarding-add-services","should-allow-next":e.hasDPPs},null,8,["should-allow-next"])]),_:1})}const oe=_(E,[["render",q]]);export{oe as default};
