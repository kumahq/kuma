import{G as x,cm as K,cn as F,S as H,O as M,N as P,P as q,co as G,cp as R,cq as z,k as g,x as J,cr as j,cs as Y,h as l,o as c,i as m,c as y,w as n,a as h,b,A as _,j as I,t as E,F as C,n as L}from"./index.0c4c6d47.js";import{D as Q,p as O}from"./patchQueryParam.3ef0b93e.js";import{_ as U}from"./CodeBlock.vue_vue_type_style_index_0_lang.cc0862d4.js";import{F as X}from"./FrameSkeleton.dadb91a1.js";import{_ as $}from"./LabelList.vue_vue_type_style_index_0_lang.028f90ba.js";import{M as ee}from"./MultizoneInfo.e9a08ae2.js";import{S as te,a as se}from"./SubscriptionHeader.1e2428c1.js";import{T as ne}from"./TabsWidget.cf65448d.js";import{W as ie}from"./WarningsWidget.bea50f4f.js";import"./EmptyBlock.vue_vue_type_script_setup_true_lang.16c6ba85.js";import"./ErrorBlock.39782751.js";import"./LoadingBlock.vue_vue_type_script_setup_true_lang.e84843f4.js";import"./StatusBadge.e9f457ff.js";import"./TagList.0486290a.js";import"./_commonjsHelpers.f037b798.js";const oe={name:"ZonesView",components:{AccordionItem:K,AccordionList:F,CodeBlock:U,DataOverview:Q,FrameSkeleton:X,LabelList:$,MultizoneInfo:ee,SubscriptionDetails:te,SubscriptionHeader:se,TabsWidget:ne,WarningsWidget:ie,KBadge:H,KButton:M,KCard:P},props:{selectedZoneName:{type:String,required:!1,default:null},offset:{type:Number,required:!1,default:0}},data(){return{isLoading:!0,isEmpty:!1,error:null,entityIsLoading:!0,entityIsEmpty:!1,entityHasError:!1,tableDataIsEmpty:!1,empty_state:{title:"No Data",message:"There are no Zones present."},tableData:{headers:[{key:"actions",hideLabel:!0},{label:"Status",key:"status"},{label:"Name",key:"name"},{label:"Zone CP Version",key:"zoneCpVersion"},{label:"Storage type",key:"storeType"},{label:"Ingress",key:"hasIngress"},{label:"Egress",key:"hasEgress"},{key:"warnings",hideLabel:!0}],data:[]},tabs:[{hash:"#overview",title:"Overview"},{hash:"#insights",title:"Zone Insights"},{hash:"#config",title:"Config"},{hash:"#warnings",title:"Warnings"}],entity:{},pageSize:q,next:null,warnings:[],subscriptionsReversed:[],codeOutput:null,zonesWithIngress:new Set,pageOffset:this.offset}},computed:{...G({multicluster:"config/getMulticlusterStatus",globalCpVersion:"config/getVersion"})},watch:{$route(){this.isLoading=!0,this.isEmpty=!1,this.error=null,this.entityIsLoading=!0,this.entityIsEmpty=!1,this.entityHasError=!1,this.tableDataIsEmpty=!1,this.init(0)}},beforeMount(){this.init(this.offset)},methods:{init(t){this.multicluster&&this.loadData(t)},filterTabs(){return this.warnings.length?this.tabs:this.tabs.filter(t=>t.hash!=="#warnings")},tableAction(t){const s=t;this.getEntity(s)},parseData(t){const{zoneInsight:s={},name:i}=t;let o="-",e="",a=!0;s.subscriptions&&s.subscriptions.length&&s.subscriptions.forEach(p=>{if(p.version&&p.version.kumaCp){o=p.version.kumaCp.version;const{kumaCpGlobalCompatible:d=!0}=p.version.kumaCp;a=d,p.config&&(e=JSON.parse(p.config).store.type)}});const r=R(s);return{...t,status:r,zoneCpVersion:o,storeType:e,hasIngress:this.zonesWithIngress.has(i)?"Yes":"No",hasEgress:this.zonesWithEgress.has(i)?"Yes":"No",withWarnings:!a}},calculateZonesWithIngress(t){const s=new Set;t.forEach(({zoneIngress:{zone:i}})=>{s.add(i)}),this.zonesWithIngress=s},calculateZonesWithEgress(t){const s=new Set;t.forEach(({zoneEgress:{zone:i}})=>{s.add(i)}),this.zonesWithEgress=s},async loadData(t){var o;this.pageOffset=t,O("offset",t>0?t:null),this.isLoading=!0,this.isEmpty=!1;const s=this.$route.query.ns||null,i=this.pageSize;try{const[{data:e,next:a},{items:r},{items:p}]=await Promise.all([this.getZoneOverviews(s,i,t),z(g.getAllZoneIngressOverviews.bind(g)),z(g.getAllZoneEgressOverviews.bind(g))]);this.next=a,e.length?(this.calculateZonesWithIngress(r),this.calculateZonesWithEgress(p),this.tableData.data=e.map(this.parseData),this.tableDataIsEmpty=!1,this.isEmpty=!1,this.getEntity({name:(o=this.selectedZoneName)!=null?o:e[0].name})):(this.tableData.data=[],this.tableDataIsEmpty=!0,this.isEmpty=!0,this.entityIsEmpty=!0)}catch(e){e instanceof Error?this.error=e:console.error(e),this.isEmpty=!0}finally{this.isLoading=!1}},async getEntity(t){var o,e;this.entityIsLoading=!0,this.entityIsEmpty=!0;const s=["type","name"],i=setTimeout(()=>{this.entityIsEmpty=!0,this.entityIsLoading=!1},"500");if(t){this.entityIsEmpty=!1,this.warnings=[];try{const a=await g.getZoneOverview({name:t.name}),r=(e=(o=a.zoneInsight)==null?void 0:o.subscriptions)!=null?e:[];if(this.entity={...J(a,s),"Authentication Type":j(a)},O("zone",this.entity.name),this.subscriptionsReversed=Array.from(r).reverse(),r.length){const{version:p={}}=r[r.length-1],{kumaCp:d={}}=p,v=d.version||"-",{kumaCpGlobalCompatible:w=!0}=d;w||this.warnings.push({kind:Y,payload:{zoneCpVersion:v,globalCpVersion:this.globalCpVersion}}),r[r.length-1].config&&(this.codeOutput=JSON.stringify(JSON.parse(r[r.length-1].config),null,2))}}catch(a){console.error(a),this.entity={},this.entityHasError=!0,this.entityIsEmpty=!0}finally{clearTimeout(i)}}this.entityIsLoading=!1},async getZoneOverviews(t,s,i){if(t)return{data:[await g.getZoneOverview({name:t},{size:s,offset:i})],next:null};{const{items:o,next:e}=await g.getAllZoneOverviews({size:s,offset:i});return{data:o!=null?o:[],next:e}}}}},ae={class:"zones"},re={class:"entity-heading"},le={key:0},ce={key:1},pe={key:2};function ue(t,s,i,o,e,a){const r=l("MultizoneInfo"),p=l("KButton"),d=l("DataOverview"),v=l("KBadge"),w=l("LabelList"),D=l("SubscriptionHeader"),A=l("SubscriptionDetails"),W=l("AccordionItem"),Z=l("AccordionList"),k=l("KCard"),N=l("CodeBlock"),T=l("WarningsWidget"),B=l("TabsWidget"),V=l("FrameSkeleton");return c(),m("div",ae,[t.multicluster===!1?(c(),y(r,{key:0})):(c(),y(V,{key:1},{default:n(()=>{var S;return[h(d,{"selected-entity-name":(S=e.entity)==null?void 0:S.name,"page-size":e.pageSize,"is-loading":e.isLoading,error:e.error,"empty-state":e.empty_state,"table-data":e.tableData,"table-data-is-empty":e.tableDataIsEmpty,"show-warnings":e.tableData.data.some(u=>u.withWarnings),next:e.next,"page-offset":e.pageOffset,onTableAction:a.tableAction,onLoadData:s[0]||(s[0]=u=>a.loadData(u))},{additionalControls:n(()=>[t.$route.query.ns?(c(),y(p,{key:0,class:"back-button",appearance:"primary",icon:"arrowLeft",to:{name:"zones"}},{default:n(()=>[b(`
            View all
          `)]),_:1})):_("",!0)]),_:1},8,["selected-entity-name","page-size","is-loading","error","empty-state","table-data","table-data-is-empty","show-warnings","next","page-offset","onTableAction"]),b(),e.isEmpty===!1?(c(),y(B,{key:0,"has-error":e.error,"is-loading":e.isLoading,tabs:a.filterTabs(),"initial-tab-override":"overview"},{tabHeader:n(()=>[I("h1",re,`
            Zone: `+E(e.entity.name),1)]),overview:n(()=>[h(w,{"has-error":e.entityHasError,"is-loading":e.entityIsLoading,"is-empty":e.entityIsEmpty},{default:n(()=>[I("div",null,[I("ul",null,[(c(!0),m(C,null,L(e.entity,(u,f)=>(c(),m("li",{key:f},[u?(c(),m("h4",le,E(f),1)):_("",!0),b(),f==="status"?(c(),m("p",ce,[h(v,{appearance:u==="Offline"?"danger":"success"},{default:n(()=>[b(E(u),1)]),_:2},1032,["appearance"])])):(c(),m("p",pe,E(u),1))]))),128))])])]),_:1},8,["has-error","is-loading","is-empty"])]),insights:n(()=>[h(k,{"border-variant":"noBorder"},{body:n(()=>[h(Z,{"initially-open":0},{default:n(()=>[(c(!0),m(C,null,L(e.subscriptionsReversed,(u,f)=>(c(),y(W,{key:f},{"accordion-header":n(()=>[h(D,{details:u},null,8,["details"])]),"accordion-content":n(()=>[h(A,{details:u},null,8,["details"])]),_:2},1024))),128))]),_:1})]),_:1})]),config:n(()=>[e.codeOutput?(c(),y(k,{key:0,"border-variant":"noBorder"},{body:n(()=>[h(N,{id:"code-block-zone-config",language:"json",code:e.codeOutput,"is-searchable":"","query-key":"zone-config"},null,8,["code"])]),_:1})):_("",!0)]),warnings:n(()=>[h(T,{warnings:e.warnings},null,8,["warnings"])]),_:1},8,["has-error","is-loading","tabs"])):_("",!0)]}),_:1}))])}const Ce=x(oe,[["render",ue]]);export{Ce as default};
