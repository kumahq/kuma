import{C as Z,cn as b,i as d,o as n,c as f,w as i,a as r,l as o,t as x,b as l,k as s,y,j as t}from"./index.563e1198.js";import{L as O}from"./LoadingBox.ac5f58ac.js";import{O as k}from"./OnboardingNavigation.ff859691.js";import{O as z,a as I}from"./OnboardingPage.59c97d73.js";const g=1e3,v={name:"MultiZoneView",components:{OnboardingNavigation:k,OnboardingHeading:z,OnboardingPage:I,LoadingBox:O},data(){return{hasZones:!1,hasZoneIngresses:!1,zoneTimeout:null,zoneIngressTimeout:null}},computed:{servicesOnline(){return this.hasZoneIngresses&&this.hasZones},...b({kumaDocsVersion:"config/getKumaDocsVersion"}),documentationLink(){return`https://kuma.io/docs/${this.kumaDocsVersion}/deployments/multi-zone/#zone-control-plane`}},created(){this.getZoneIngresses(),this.getZones()},unmounted(){clearTimeout(this.zoneTimeout),clearTimeout(this.zoneIngressTimeout)},methods:{async getZones(){try{const{total:e}=await d.getZones();this.hasZones=e>0}catch(e){console.error(e)}this.hasZones||(this.zoneTimeout=setTimeout(()=>this.getZones(),g))},async getZoneIngresses(){try{const{total:e}=await d.getAllZoneIngressOverviews();this.hasZoneIngresses=e>0}catch(e){console.error(e)}this.hasZoneIngresses||(this.zoneIngressTimeout=setTimeout(()=>this.getZoneIngresses(),g))}}},T=o("p",{class:"text-center mb-4"}," A zone requires both the zone control plane and zone ingress. On Kubernetes, you run a single command to create both resources. On Universal, you must create them separately. ",-1),L=["href"],N={class:"text-center my-4"},V={key:0,class:"text-green-500","data-testid":"zone-connected"},w={key:1,class:"text-red-500","data-testid":"zone-disconnected"},B={class:"text-center mt-4 mb-10"},C={key:0,class:"text-green-500","data-testid":"zone-ingress-connected"},D={key:1,class:"text-red-500","data-testid":"zone-ingress-disconnected"},K={key:0,class:"flex justify-center"};function A(e,P,G,H,a,c){const m=t("OnboardingHeading"),h=t("KCard"),u=t("LoadingBox"),_=t("OnboardingNavigation"),p=t("OnboardingPage");return n(),f(p,null,{header:i(()=>[r(m,{title:"Add zones"})]),content:i(()=>[T,r(h,{title:"See the documentation for options to install:","border-variant":"noBorder"},{body:i(()=>[o("a",{target:"_blank",class:"external-link-code-block",href:c.documentationLink},x(c.documentationLink),9,L)]),_:1}),o("div",null,[o("p",N,[l(" Zone status: "),a.hasZones?(n(),s("span",V,"Connected")):(n(),s("span",w,"Disconnected"))]),o("p",B,[l(" Zone ingress status: "),a.hasZoneIngresses?(n(),s("span",C,"Connected")):(n(),s("span",D,"Disconnected"))]),!a.hasZoneIngresses||!a.hasZones?(n(),s("div",K,[r(u)])):y("",!0)])]),navigation:i(()=>[r(_,{"next-step":"onboarding-create-mesh","previous-step":"onboarding-configuration-types","should-allow-next":c.servicesOnline},null,8,["should-allow-next"])]),_:1})}const q=Z(v,[["render",A]]);export{q as default};
