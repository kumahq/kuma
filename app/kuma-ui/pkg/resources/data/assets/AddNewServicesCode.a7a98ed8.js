import{_,a3 as b,k,K as P,o as t,b as c,w as s,d as n,f as i,h as r,t as f,n as v,e as C,r as o}from"./index.b4c50a9a.js";import{j as x}from"./index.58caa11d.js";import{k as D}from"./configUrl.b3f5cf10.js";import{L as y}from"./LoadingBox.4d4a39bb.js";import{C as w}from"./CodeView.beb5647d.js";import{O}from"./OnboardingNavigation.2099801b.js";import{O as N,a as L}from"./OnboardingPage.17b77734.js";import"./CodeBlock.250aca45.js";import"./ErrorBlock.63ee7be4.js";const T=1e3,A={name:"AddNewServicesCode",components:{CodeView:w,OnboardingNavigation:O,OnboardingHeading:N,OnboardingPage:L,LoadingBox:y},metaInfo(){return{title:"Add new services"}},data(){return{productName:b,githubLink:"https://github.com/kumahq/kuma-counter-demo/",githubLinkReadme:"https://github.com/kumahq/kuma-counter-demo/blob/master/README.md",k8sRunCommand:"kubectl apply -f https://bit.ly/3Kh2Try",generateDpTokenCode:"kumactl generate dataplane-token --name=redis > kuma-token-redis",startDpCode:`kuma-dp run \\
      --cp-address=${D()} \\
      --dataplane=${`"${x({type:"Dataplane",mesh:"default",name:"example",networking:{address:"localhost",inbound:[{port:7777,servicePort:7777,serviceAddress:"127.0.0.1",tags:{"kuma.io/service":"example","kuma.io/protocol":"tcp"}}]}})}"`} \\
      --dataplane-token-file=kuma-token-example`,hasDPPs:!1,DPPsTimeout:null}},computed:{...k({environment:"config/getEnvironment"}),isKubernetes(){return this.environment==="kubernetes"}},created(){this.getDPPs()},unmounted(){clearTimeout(this.DPPsTimeout)},methods:{async getDPPs(){try{const{total:a}=await P.getAllDataplanes();this.hasDPPs=a>0}catch(a){console.error(a)}this.hasDPPs||(this.DPPsTimeout=setTimeout(()=>this.getDPPs(),T))}}},R=r("p",{class:"text-center mb-12"}," The demo application includes two services: a Redis backend to store a counter value, and a frontend web UI to show and increment the counter. ",-1),B={key:1},E=["href"],V={class:"text-center my-4"},K=C(" DPPs status: "),G={key:0,class:"text-green-500","data-testid":"dpps-connected"},H={key:1,class:"text-red-500","data-testid":"dpps-disconnected"},I={key:0,class:"flex justify-center"};function S(a,j,M,U,e,m){const l=o("OnboardingHeading"),d=o("CodeView"),p=o("KCard"),u=o("LoadingBox"),h=o("OnboardingNavigation"),g=o("OnboardingPage");return t(),c(g,null,{header:s(()=>[n(l,{title:"Add services"})]),content:s(()=>[R,m.isKubernetes?(t(),c(d,{key:0,title:"To run execute the following command:","copy-button-text":"Copy Command to Clipboard",lang:"bash",content:e.k8sRunCommand},null,8,["content"])):(t(),i("div",B,[n(d,{title:"Clone the GitHub repository for the demo application:","copy-button-text":"Copy Command to Clipboard",lang:"bash",content:e.githubLink},null,8,["content"]),n(p,{title:"And follow the instructions in the README","border-variant":"noBorder"},{body:s(()=>[r("a",{target:"_blank",class:"external-link-code-block",href:e.githubLinkReadme},f(e.githubLinkReadme),9,E)]),_:1})])),r("div",null,[r("p",V,[K,e.hasDPPs?(t(),i("span",G,"Connected")):(t(),i("span",H,"Disconeccted"))]),e.hasDPPs?v("",!0):(t(),i("div",I,[n(u)]))])]),navigation:s(()=>[n(h,{"next-step":"onboarding-dataplanes-overview","previous-step":"onboarding-add-services","should-allow-next":e.hasDPPs},null,8,["should-allow-next"])]),_:1})}const $=_(A,[["render",S]]);export{$ as default};
