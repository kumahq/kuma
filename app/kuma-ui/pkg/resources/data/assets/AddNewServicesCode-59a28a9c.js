import{L as v}from"./LoadingBox-5500fe5f.js";import{O as k,a as w,b as x}from"./OnboardingPage-921c8f09.js";import{_ as m}from"./CodeBlock.vue_vue_type_style_index_0_lang-72ab3849.js";import{u as y}from"./store-7c115913.js";import{u as A}from"./index-913b8be6.js";import{d as N,r as p,c as C,l as T,o,b as P,w as d,g as s,h as e,j as a,F as D,i as t,f as E,p as I,m as L}from"./index-566d109f.js";import{_ as O}from"./_plugin-vue_export-helper-c27b6911.js";import"./kongponents.es-905931b8.js";const h=c=>(I("data-v-9b23b64f"),c=c(),L(),c),S=h(()=>t("p",{class:"mb-4 text-center"},`
        The demo application includes two services: a Redis backend to store a counter value, and a frontend web UI to show and increment the counter.
      `,-1)),R=h(()=>t("p",null,"To run execute the following command:",-1)),B={key:1},V={class:"status-box mt-4"},G={key:0,class:"status--is-connected","data-testid":"dpps-connected"},K={key:1,class:"status--is-disconnected","data-testid":"dpps-disconnected"},q={key:0,class:"status-loading-box mt-4"},F=1e3,_="https://github.com/kumahq/kuma-counter-demo/",H="https://github.com/kumahq/kuma-counter-demo/blob/master/README.md",M="kubectl apply -f https://bit.ly/3Kh2Try",U=N({__name:"AddNewServicesCode",setup(c){const b=A(),f=y(),n=p(!1),r=p(null),g=C(()=>f.getters["config/getEnvironment"]==="kubernetes");l(),T(function(){u()});async function l(){try{const{total:i}=await b.getAllDataplanes();n.value=i>0}catch(i){console.error(i)}finally{n.value||(u(),r.value=window.setTimeout(()=>l(),F))}}function u(){r.value!==null&&window.clearTimeout(r.value)}return(i,$)=>(o(),P(x,null,{header:d(()=>[s(k,null,{title:d(()=>[e(`
          Add services
        `)]),_:1})]),content:d(()=>[S,e(),g.value?(o(),a(D,{key:0},[R,e(),s(m,{id:"code-block-kubernetes-command",language:"bash",code:M})],64)):(o(),a("div",B,[t("p",{class:"mb-4 text-center"},[e(`
          Clone `),t("a",{href:_,target:"_blank"},"the GitHub repository"),e(` for the demo application:
        `)]),e(),s(m,{id:"code-block-clone-command",language:"bash",code:`git clone ${_}`},null,8,["code"]),e(),t("p",{class:"mt-4 text-center"},[e(`
          And follow the instructions in `),t("a",{href:H,target:"_blank"},"the README"),e(`.
        `)])])),e(),t("div",null,[t("p",V,[e(`
          DPPs status:

          `),n.value?(o(),a("span",G,"Connected")):(o(),a("span",K,"Disconnected"))]),e(),n.value?E("",!0):(o(),a("div",q,[s(v)]))])]),navigation:d(()=>[s(w,{"next-step":"onboarding-dataplanes-overview","previous-step":"onboarding-add-services","should-allow-next":n.value},null,8,["should-allow-next"])]),_:1}))}});const ee=O(U,[["__scopeId","data-v-9b23b64f"]]);export{ee as default};
