import{d as $,a3 as b,t as R,r as u,o as e,j as p,h as l,i as h,az as L,l as _,w as o,g as s,E as w,s as x,af as P,F as C,D as S,C as q,p as N,O as A,m as B,Z as E,a5 as j}from"./index-77212499.js";import{_ as F}from"./ResourceCodeBlock.vue_vue_type_style_index_0_lang-0ab6a330.js";import"./CodeBlock.vue_vue_type_style_index_0_lang-336f6480.js";import"./toYaml-4e00099e.js";const I={key:3,"data-testid":"affected-data-plane-proxies"},O=$({__name:"PolicyConnections",props:{mesh:{type:String,required:!0},policyPath:{type:String,required:!0},policyName:{type:String,required:!0}},setup(y){const t=y,{t:f}=b(),r=R("");return(k,n)=>{const c=u("RouterLink");return e(),p("div",null,[l(h(L),{id:"dataplane-search",modelValue:r.value,"onUpdate:modelValue":n[0]||(n[0]=a=>r.value=a),type:"text",placeholder:h(f)("policies.detail.dataplane_input_placeholder"),required:"","data-testid":"dataplane-search-input"},null,8,["modelValue","placeholder"]),_(),l(N,{src:`/meshes/${t.mesh}/policy-path/${t.policyPath}/policy/${t.policyName}/dataplanes`},{default:o(({data:a,error:m})=>[m?(e(),s(w,{key:0,error:m},null,8,["error"])):a===void 0?(e(),s(x,{key:1})):a.items.length===0?(e(),s(P,{key:2})):(e(),p("ul",I,[(e(!0),p(C,null,S(a.items.filter(i=>i.dataplane.name.toLowerCase().includes(r.value.toLowerCase())),(i,v)=>(e(),p("li",{key:v,"data-testid":"dataplane-name"},[l(c,{to:{name:"data-plane-detail-view",params:{mesh:i.dataplane.mesh,dataPlane:i.dataplane.name}}},{default:o(()=>[_(q(i.dataplane.name),1)]),_:2},1032,["to"])]))),128))]))]),_:1},8,["src"])])}}}),z={class:"stack"},D=$({__name:"PolicyDetails",props:{policy:{type:Object,required:!0},path:{type:String,required:!0}},setup(y){const t=y,{t:f}=b(),r=A();return(k,n)=>(e(),p("div",z,[l(h(E),null,{body:o(()=>[B("h2",null,q(h(f)("policies.detail.affected_dpps")),1),_(),l(O,{class:"mt-4",mesh:t.policy.mesh,"policy-name":t.policy.name,"policy-path":t.path},null,8,["mesh","policy-name","policy-path"])]),_:1}),_(),l(F,{id:"code-block-policy",resource:t.policy,"resource-fetcher":c=>h(r).getSinglePolicyEntity({name:t.policy.name,mesh:t.policy.mesh,path:t.path},c),"is-searchable":""},null,8,["resource","resource-fetcher"])]))}}),Z=$({__name:"PolicyDetailView",setup(y){return(t,f)=>{const r=u("RouteTitle"),k=u("DataSource"),n=u("AppView"),c=u("RouteView");return e(),s(c,{name:"policy-detail-view",params:{mesh:"",policy:"",policyPath:""}},{default:o(({route:a,t:m})=>[l(k,{src:"/*/policy-types"},{default:o(({data:i,error:v})=>[v?(e(),s(w,{key:0,error:v},null,8,["error"])):i===void 0?(e(),s(x,{key:1})):i.policies.length===0?(e(),s(P,{key:2})):(e(!0),p(C,{key:3},S([i.policies.find(d=>d.path===a.params.policyPath)??i.policies[0]],d=>(e(),s(n,{key:d.name,breadcrumbs:[{to:{name:"mesh-detail-view",params:{mesh:a.params.mesh}},text:a.params.mesh},{to:{name:"policies-list-view",params:{mesh:a.params.mesh,policyPath:a.params.policyPath}},text:m("policies.routes.item.breadcrumbs")}]},{title:o(()=>[B("h1",null,[l(j,{text:a.params.policy},{default:o(()=>[l(r,{title:m("policies.routes.item.title",{name:a.params.policy}),render:!0},null,8,["title"])]),_:2},1032,["text"])])]),default:o(()=>[_(),l(k,{src:`/meshes/${a.params.mesh}/policy-path/${d.path}/policy/${a.params.policy}`},{default:o(({data:g,error:V})=>[V?(e(),s(w,{key:0,error:V},null,8,["error"])):g===void 0?(e(),s(x,{key:1})):(e(),s(D,{key:2,policy:g,path:d.path,"data-testid":"detail-view-details"},null,8,["policy","path"]))]),_:2},1032,["src"])]),_:2},1032,["breadcrumbs"]))),128))]),_:2},1024)]),_:1})}}});export{Z as default};
