import{d as N,X as R,r,p as $,o as C,w as n,b as c,e as p,m as A,a3 as k}from"./index-BKAVHTVy.js";const T=N({__name:"ConnectionInboundSummaryStatsView",props:{data:{},networking:{},routeName:{}},setup(d){const a=d,e=R(()=>({...a.data,proxyResourceName:"stat_prefix"in a.data?a.data.stat_prefix:"",listenerAddress:"listenerAddress"in a.data?a.data.listenerAddress:"",clusterName:"clusterName"in a.data?a.data.clusterName:"",port:"port"in a.data?a.data.port.toString():"",servicePort:"servicePort"in a.data?a.data.servicePort:"",name:"name"in a.data?a.data.name:""}));return(w,l)=>{const i=r("RouteTitle"),m=r("XAction"),u=r("XCodeBlock"),v=r("DataCollection"),x=r("DataLoader"),g=r("AppView"),y=r("RouteView");return C(),$(y,{params:{codeSearch:"",codeFilter:!1,codeRegExp:!1,mesh:"",proxy:"",proxyType:"",connection:""},name:a.routeName},{default:n(({route:t,uri:_})=>[c(i,{render:!1,title:"Stats"}),l[1]||(l[1]=p()),c(g,null,{default:n(()=>[c(x,{src:_(A(k),"/connections/stats/for/:proxyType/:name/:mesh/:socketAddress",{proxyType:{ingresses:"zone-ingress",egresses:"zone-egress"}[t.params.proxyType]??"dataplane",name:t.params.proxy,mesh:t.params.mesh||"*",socketAddress:a.networking.inboundAddress})},{default:n(({data:h,refresh:f})=>[c(v,{items:h.raw.split(`
`),predicate:o=>[`listener.${e.value.listenerAddress?.length>0?e.value.listenerAddress:t.params.connection}`,`cluster.${e.value.name}.`,`cluster.${e.value.clusterName}.`,`http.${e.value.name}.`,`http.${e.value.clusterName}.`,`tcp.${e.value.name}.`,`cluster.${e.value.proxyResourceName}.`,`listener.${e.value.proxyResourceName}`,`cluster.${e.value.proxyResourceName}.`,`http.${e.value.proxyResourceName}.`,`http.${e.value.proxyResourceName}.`,`tcp.${e.value.proxyResourceName}.`].some(s=>o.startsWith(s))&&(!o.includes(".rds.")||o.includes(`_${e.value.port}`)||o.includes(`${e.value.servicePort}`))},{default:n(({items:o})=>[c(u,{language:"json",code:o.map(s=>s.replace(`${e.value.listenerAddress?.length>0?e.value.listenerAddress:e.value.proxyResourceName.length?e.value.proxyResourceName:t.params.connection}.`,"").replace(e.value.name.length?`${e.value.name}.`:"","").replace(e.value.clusterName.length?`${e.value.clusterName}.`:"","")).join(`
`),"is-searchable":"",query:t.params.codeSearch,"is-filter-mode":t.params.codeFilter,"is-reg-exp-mode":t.params.codeRegExp,onQueryChange:s=>t.update({codeSearch:s}),onFilterModeChange:s=>t.update({codeFilter:s}),onRegExpModeChange:s=>t.update({codeRegExp:s})},{"primary-actions":n(()=>[c(m,{action:"refresh",appearance:"primary",onClick:f},{default:n(()=>[...l[0]||(l[0]=[p(`
                Refresh
              `,-1)])]),_:1},8,["onClick"])]),_:2},1032,["code","query","is-filter-mode","is-reg-exp-mode","onQueryChange","onFilterModeChange","onRegExpModeChange"])]),_:2},1032,["items","predicate"])]),_:2},1032,["src"])]),_:2},1024)]),_:1},8,["name"])}}});export{T as default};
