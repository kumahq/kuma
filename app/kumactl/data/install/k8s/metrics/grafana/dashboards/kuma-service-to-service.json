{
   "annotations": {
      "list": [
         {
            "datasource": {
               "type": "datasource",
               "uid": "grafana"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
               "limit": 100,
               "matchAny": false,
               "tags": [ ],
               "type": "dashboard"
            },
            "type": "dashboard"
         }
      ]
   },
   "description": "Statistics of the traffic between services in Kuma Service Mesh",
   "editable": true,
   "fiscalYearStartMonth": 0,
   "graphTooltip": 0,
   "links": [ ],
   "liveNow": false,
   "panels": [
      {
         "collapsed": false,
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 1,
         "panels": [ ],
         "title": "Traffic",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 2,
         "targets": [
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_tx_bytes_total{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "legendFormat": "Bytes sent",
               "refId": "A"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_rx_bytes_total{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "legendFormat": "Bytes received",
               "refId": "B"
            }
         ],
         "title": "Traffic from source service perspective",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 3,
         "targets": [
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_destroy_remote_with_active_rq{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "hide": true,
               "legendFormat": "Connection destroyed by the client",
               "refId": "A"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_connect_timeout{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "legendFormat": "Connection timeout",
               "refId": "B"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_destroy_local_with_active_rq{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "hide": true,
               "legendFormat": "Connection destroyed by local Envoy",
               "refId": "C"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_pending_failure_eject{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "legendFormat": "Pending failure ejection",
               "refId": "D"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_pending_overflow{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "legendFormat": "Pending overflow",
               "refId": "E"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_timeout{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "legendFormat": "Request timeout",
               "refId": "F"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_rx_reset{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "legendFormat": "Response reset",
               "refId": "G"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_tx_reset{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "legendFormat": "Request reset",
               "refId": "H"
            }
         ],
         "title": "Connection/Requests errors from source service perspective",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 4,
         "targets": [
            {
               "expr": "sum(envoy_cluster_upstream_cx_active{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"})",
               "legendFormat": "Connections",
               "refId": "A"
            }
         ],
         "title": "Active Connections between services",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 5,
         "targets": [
            {
               "expr": "max(histogram_quantile(0.99, irate(envoy_cluster_upstream_cx_connect_ms_bucket{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m])))",
               "legendFormat": "Time",
               "refId": "A"
            }
         ],
         "title": "Connection time (P99)",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 6,
         "targets": [
            {
               "expr": "max(histogram_quantile(0.99, irate(envoy_cluster_upstream_cx_length_ms_bucket{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m])))",
               "legendFormat": "Time",
               "refId": "A"
            }
         ],
         "title": "Connection length (P99)",
         "type": "timeseries"
      },
      {
         "collapsed": false,
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 7,
         "panels": [ ],
         "title": "HTTP",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 8,
         "targets": [
            {
               "expr": "max(histogram_quantile(0.99, rate(envoy_cluster_upstream_rq_time_bucket{kuma_io_service=\"$source_service\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\",envoy_cluster_name=\"$destination_cluster\"}[1m])))",
               "hide": false,
               "legendFormat": "p99",
               "refId": "A"
            },
            {
               "expr": "max(histogram_quantile(0.95, rate(envoy_cluster_upstream_rq_time_bucket{kuma_io_service=\"$source_service\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\",envoy_cluster_name=\"$destination_cluster\"}[1m])))",
               "hide": false,
               "legendFormat": "p95",
               "refId": "C"
            },
            {
               "expr": "max(histogram_quantile(0.50, rate(envoy_cluster_upstream_rq_time_bucket{kuma_io_service=\"$source_service\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\",envoy_cluster_name=\"$destination_cluster\"}[1m])))",
               "hide": false,
               "legendFormat": "p50",
               "refId": "D"
            }
         ],
         "title": "Latency",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 9,
         "targets": [
            {
               "expr": "sum(rate(envoy_cluster_upstream_rq_total{mesh=\"$mesh\",kuma_io_service=\"$source_service\", envoy_cluster_name=\"$destination_cluster\"}[1m]))",
               "hide": false,
               "legendFormat": "Requests",
               "refId": "C"
            }
         ],
         "title": "Traffic",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 10,
         "targets": [
            {
               "expr": "sum(rate(envoy_cluster_external_upstream_rq_xx{mesh=\"$mesh\",kuma_io_service=\"$source_service\", envoy_cluster_name=\"$destination_cluster\"}[1m])) by (envoy_response_code_class)",
               "hide": false,
               "legendFormat": "{{envoy_response_code_class}}xx",
               "refId": "A"
            }
         ],
         "title": "Status codes",
         "type": "timeseries"
      },
      {
         "collapsed": false,
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 11,
         "panels": [ ],
         "title": "Health Checks",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "description": "Data is only available if HealthCheck policy is applied.",
         "id": 12,
         "targets": [
            {
               "expr": "sum(envoy_cluster_health_check_healthy{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}) / sum(envoy_cluster_membership_total{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"})",
               "legendFormat": "Healthy destinations",
               "refId": "A"
            }
         ],
         "title": "Active Health Checks",
         "type": "timeseries"
      },
      {
         "collapsed": false,
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 13,
         "panels": [ ],
         "title": "Circuit Breakers",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "description": "Total times that the cluster’s connection circuit breaker overflowed",
         "id": 14,
         "targets": [
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_overflow{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "legendFormat": "Connection overflow",
               "refId": "A"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_pending_overflow{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "hide": false,
               "legendFormat": "Pending request overflow",
               "refId": "B"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_retry_overflow{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}[1m]))",
               "hide": false,
               "legendFormat": "Retry overflow",
               "refId": "C"
            }
         ],
         "title": "Thresholds Overflow",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "description": "Data is only available if CircuitBreaker policy is applied",
         "id": 15,
         "targets": [
            {
               "expr": "1 - sum(envoy_cluster_outlier_detection_ejections_active{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"}) / sum(envoy_cluster_membership_total{kuma_io_service=\"$source_service\",envoy_cluster_name=\"$destination_cluster\",kuma_io_zone=~\"$zone\",mesh=\"$mesh\"})",
               "legendFormat": "Healthy destinations",
               "refId": "A"
            }
         ],
         "title": "Outlier detection",
         "type": "timeseries"
      }
   ],
   "refresh": "5s",
   "schemaVersion": 36,
   "style": "dark",
   "tags": [ ],
   "templating": {
      "list": [
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${DS_PROMETHEUS}"
            },
            "includeAll": false,
            "label": "Mesh",
            "multi": false,
            "name": "mesh",
            "query": "label_values(envoy_server_live, mesh)",
            "type": "query"
         },
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${DS_PROMETHEUS}"
            },
            "includeAll": true,
            "label": "Zone",
            "multi": true,
            "name": "zone",
            "query": "label_values(envoy_server_live{mesh=\"$mesh\"}, kuma_io_zone)",
            "type": "query"
         },
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${DS_PROMETHEUS}"
            },
            "includeAll": false,
            "label": "Source service",
            "multi": false,
            "name": "source_service",
            "query": "label_values(envoy_server_live{mesh=\"$mesh\",kuma_io_mesh_gateway=\"\"}, kuma_io_service)",
            "type": "query"
         },
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${DS_PROMETHEUS}"
            },
            "includeAll": false,
            "label": "Destination service",
            "multi": false,
            "name": "destination_cluster",
            "query": "label_values(envoy_cluster_upstream_cx_active{kuma_io_service=\"$source_service\",envoy_cluster_name!~\"(localhost.*)|ads_cluster|kuma_envoy_admin|access_log_sink\"}, envoy_cluster_name)",
            "type": "query"
         }
      ]
   },
   "time": {
      "from": "now-6h",
      "to": "now"
   },
   "timepicker": {
      "refresh_intervals": [
         "5s",
         "10s",
         "30s",
         "1m",
         "5m",
         "15m",
         "30m",
         "1h",
         "2h",
         "1d"
      ]
   },
   "timezone": "utc",
   "title": "Kuma Service to Service",
   "version": 1
}
