{
   "annotations": {
      "list": [
         {
            "datasource": {
               "type": "datasource",
               "uid": "grafana"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
               "limit": 100,
               "matchAny": false,
               "tags": [ ],
               "type": "dashboard"
            },
            "type": "dashboard"
         }
      ]
   },
   "description": "Statistics of the single Mesh in Kuma Service Mesh",
   "editable": true,
   "fiscalYearStartMonth": 0,
   "graphTooltip": 0,
   "links": [ ],
   "liveNow": false,
   "panels": [
      {
         "collapsed": false,
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 1,
         "panels": [ ],
         "title": "Service Map",
         "type": "row"
      },
      {
         "datasource": {
            "type": "Kuma",
            "uid": "-- Mixed --"
         },
         "id": 2,
         "interval": "1m",
         "targets": [
            {
               "hide": false,
               "mesh": "$mesh",
               "queryType": "mesh-graph",
               "refId": "A"
            }
         ],
         "title": "Service Map",
         "type": "nodeGraph"
      },
      {
         "collapsed": false,
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 3,
         "panels": [ ],
         "title": "HTTP",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 4,
         "targets": [
            {
               "expr": "sum(histogram_quantile(0.99, rate(envoy_cluster_upstream_rq_time_bucket{mesh=\"$mesh\",kuma_io_zone=~\"$zone\",envoy_cluster_name=~\"localhost_.*\"}[1m]))) by (kuma_io_service)",
               "hide": false,
               "legendFormat": "{{kuma_io_service}}",
               "refId": "B"
            }
         ],
         "title": "Latency (99th percentile)",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 5,
         "targets": [
            {
               "expr": "sum(rate(envoy_cluster_upstream_rq_total{mesh=\"$mesh\",kuma_io_zone=~\"$zone\",envoy_cluster_name=~\"localhost_.*\"}[1m])) by (kuma_io_service)",
               "hide": false,
               "legendFormat": "{{kuma_io_service}}",
               "refId": "B"
            }
         ],
         "title": "Traffic",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 6,
         "targets": [
            {
               "expr": "sum(rate(envoy_cluster_external_upstream_rq_xx{mesh=\"$mesh\",kuma_io_zone=~\"$zone\",envoy_cluster_name=~\"localhost_.*\", envoy_response_code_class=~\"4|5\"}[1m])) by (kuma_io_service,envoy_response_code_class)",
               "hide": false,
               "legendFormat": "{{ kuma_io_service}} {{ envoy_response_code_class }}xx",
               "refId": "A"
            }
         ],
         "title": "Error Status Codes",
         "type": "timeseries"
      },
      {
         "collapsed": false,
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 7,
         "panels": [ ],
         "title": "Health Checks",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "description": "Data is only available if HealthCheck policy is applied.",
         "id": 8,
         "targets": [
            {
               "expr": "((sum(rate(envoy_cluster_health_check_success{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m])) / sum(rate(envoy_cluster_health_check_attempt{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))))",
               "legendFormat": "Success rate",
               "refId": "A"
            }
         ],
         "title": "Active Health Checks",
         "type": "timeseries"
      },
      {
         "collapsed": false,
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 9,
         "panels": [ ],
         "title": "Circuit Breakers",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "description": "Total times that the clusterâ€™s connection circuit breaker overflowed",
         "id": 10,
         "targets": [
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_overflow{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "legendFormat": "Connection overflow",
               "refId": "A"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_pending_overflow{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "hide": false,
               "legendFormat": "Pending request overflow",
               "refId": "B"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_retry_overflow{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "hide": false,
               "legendFormat": "Connection overflow",
               "refId": "C"
            }
         ],
         "title": "Thresholds Overflow",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "description": "Data is only available if HealthCheck policy is applied. Note that passive health checks are executed on healthy instances marked by active health checks.",
         "id": 11,
         "targets": [
            {
               "expr": "1 - sum(envoy_cluster_outlier_detection_ejections_active{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}) / sum(envoy_cluster_membership_total{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"})",
               "legendFormat": "Healthy destinations",
               "refId": "A"
            }
         ],
         "title": "Outlier detection",
         "type": "timeseries"
      },
      {
         "collapsed": false,
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 12,
         "panels": [ ],
         "title": "Data Plane Proxies",
         "type": "row"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 13,
         "targets": [
            {
               "expr": "count(envoy_server_live{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}) - sum(envoy_server_live{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"})",
               "hide": false,
               "legendFormat": "Off",
               "refId": "B"
            },
            {
               "expr": "sum(envoy_server_live{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"})",
               "hide": false,
               "legendFormat": "Live",
               "refId": "A"
            }
         ],
         "title": "Dataplanes",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "description": "Note that if Control Plane does not sent FIN segment, Dataplanes can still think that connection is up waiting for new update even that Control Plane is down.",
         "id": 14,
         "targets": [
            {
               "expr": "count(envoy_server_live{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}) - sum(envoy_control_plane_connected_state{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"})",
               "legendFormat": "Disconnected",
               "refId": "B"
            },
            {
               "expr": "sum(envoy_control_plane_connected_state{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"})",
               "legendFormat": "Connected",
               "refId": "A"
            }
         ],
         "title": "Dataplanes connected to the Control Plane",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 15,
         "targets": [
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_tx_bytes_total{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "legendFormat": "Sent",
               "refId": "A"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_rx_bytes_total{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "legendFormat": "Received",
               "refId": "B"
            }
         ],
         "title": "Bytes flowing through Envoy",
         "type": "timeseries"
      },
      {
         "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
         },
         "id": 16,
         "targets": [
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_destroy_remote_with_active_rq{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "hide": true,
               "legendFormat": "Connection destroyed by the client",
               "refId": "A"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_connect_timeout{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "legendFormat": "Connection timeout",
               "refId": "B"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_cx_destroy_local_with_active_rq{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "hide": true,
               "legendFormat": "Connection destroyed by local Envoy",
               "refId": "C"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_pending_failure_eject{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "legendFormat": "Pending failure ejection",
               "refId": "D"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_pending_overflow{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "legendFormat": "Pending overflow",
               "refId": "E"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_timeout{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "legendFormat": "Request timeout",
               "refId": "F"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_rx_reset{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "legendFormat": "Response reset",
               "refId": "G"
            },
            {
               "expr": "sum(irate(envoy_cluster_upstream_rq_tx_reset{mesh=\"$mesh\",kuma_io_zone=~\"$zone\"}[1m]))",
               "legendFormat": "Request reset",
               "refId": "H"
            }
         ],
         "title": "Connection/Requests errors",
         "type": "timeseries"
      }
   ],
   "refresh": "5s",
   "schemaVersion": 36,
   "style": "dark",
   "tags": [ ],
   "templating": {
      "list": [
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${DS_PROMETHEUS}"
            },
            "includeAll": false,
            "label": "Mesh",
            "multi": false,
            "name": "mesh",
            "query": "label_values(envoy_server_live, mesh)",
            "type": "query"
         },
         {
            "datasource": {
               "type": "prometheus",
               "uid": "${DS_PROMETHEUS}"
            },
            "includeAll": true,
            "label": "Zone",
            "multi": true,
            "name": "zone",
            "query": "label_values(envoy_server_live{mesh=\"$mesh\"}, kuma_io_zone)",
            "type": "query"
         }
      ]
   },
   "time": {
      "from": "now-6h",
      "to": "now"
   },
   "timepicker": {
      "refresh_intervals": [
         "5s",
         "10s",
         "30s",
         "1m",
         "5m",
         "15m",
         "30m",
         "1h",
         "2h",
         "1d"
      ]
   },
   "timezone": "utc",
   "title": "Kuma Mesh",
   "version": 1
}
