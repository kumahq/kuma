// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package ingress

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 25, 17, 54, 58, 210061389, time.UTC),
		},
		"/app.yaml": &vfsgen۰CompressedFileInfo{
			name:             "app.yaml",
			modTime:          time.Date(2020, 6, 25, 17, 54, 58, 209906413, time.UTC),
			uncompressedSize: 2662,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x0c\x82\x1e\x9a\x83\x2c\x29\xed\xa6\x08\x81\x1e\x84\xb5\x8b\x1a\xbb\x96\x05\x5b\xce\x55\xe0\x4a\xb3\x32\xb1\xfc\x0a\x49\xb9\x31\x82\xfd\xef\x05\x6d\xd9\x96\x64\x3b\x5d\x20\x68\x0f\xe5\x49\x9c\x8f\xc7\x37\x6f\x86\x62\x10\x04\x23\xaa\xd9\x67\x34\x96\x29\x49\x60\x1b\x8f\x5e\x98\xac\x08\xac\xd0\x6c\x59\x89\x49\x59\xaa\x46\xba\x91\x40\x47\x2b\xea\x28\x19\x01\x48\x2a\x90\xc0\x4b\x23\x68\xc0\x64\x6d\xd0\xda\xd6\x68\x35\x2d\x91\xc0\xb7\x6f\x30\x4e\x8f\x5b\x78\x7d\x1d\xfd\xd3\x21\x3f\x86\x6e\x35\x96\x3e\xd1\xed\x74\xeb\x9e\x1d\xf2\x32\x65\x5c\xbe\xd3\xfb\x20\x00\xad\x8c\xb3\x3e\x0e\x20\xd8\x6f\x08\xc4\x51\x14\xc5\x7b\x0b\x80\x36\xca\xa9\x52\x71\x02\xf9\x7d\xd6\xda\x1c\x35\x35\xba\xac\x17\x6b\x91\x63\xe9\x94\x39\x20\x51\xad\x07\x5c\x87\xb5\x52\xad\x6d\x78\x2a\x78\x82\x9a\xab\x9d\xc0\x1f\x55\x14\x80\xd3\x27\xe4\xf6\x16\x8b\xa3\x26\xd6\x19\xea\xb0\xde\x1d\xe2\x8c\xe2\x9c\xc9\x7a\xad\x2b\xea\x90\xb4\x45\x0a\xfa\x75\xd5\x98\x1a\x09\xc4\x67\xcb\x5a\xd2\x2d\x65\x9c\x3e\x71\x24\x10\x5d\x94\x2d\xa8\x2b\x37\x8f\x1d\x06\xd7\x38\x00\x38\x14\x9a\x9f\x8e\xea\x16\xbc\xcf\x90\x52\x39\xea\x98\x92\x27\x10\xd8\x23\x8c\x99\x0a\x5b\x10\x02\x28\x3d\x89\xea\x22\x40\xa0\xdd\x1c\x84\x99\xa3\xdd\x1c\x34\xf1\x8b\xf7\x58\x5d\xe7\x05\x70\xd4\x67\xff\xdd\x9b\xf4\xf4\x5a\x2b\xfc\x2a\x95\x74\x94\x49\x34\x1d\xf0\xa0\xed\x5c\x3f\xd2\x2f\x26\x68\x7d\x9c\x46\xff\x09\xaf\xaf\xc4\x6f\xda\xb9\x38\xf3\x3d\x05\x67\x0d\xe7\x99\xe2\xac\xdc\x75\xd2\xce\xc6\x7e\x06\xca\x2d\xe9\x6c\xcf\x4c\xb2\xc5\xa4\x48\x93\xf9\xb4\xe7\x04\xd8\x52\xde\xe0\x1f\x46\x09\x32\x70\x00\x3c\x33\xe4\xd5\x12\x9f\x2f\x3d\xad\x2f\xa3\x6e\x43\x4e\xdd\x1b\xfb\x73\xbe\x7b\xf4\x2a\x4b\xee\xff\xe5\xf3\xf7\xf7\xe0\x2a\x89\x87\xf5\x3c\x29\xee\x17\x69\xbe\x5c\x3c\x16\xd9\x63\x92\x4e\x8b\x24\x9b\x15\xab\xe9\xf2\xf3\x74\x59\xac\x97\x8f\xd7\x88\x1d\x04\x7f\x68\x04\xbd\xd7\x49\x55\xf9\x56\xf6\xe5\x1e\xe0\x4f\x92\x3c\x39\x60\xcf\xa7\xab\x3f\x6f\x23\xf6\x27\xf3\xbb\x40\xb7\x7a\x46\xe0\xa7\x9f\x8f\xc2\xbe\x1f\x9f\xbf\xf7\x22\xbf\x7f\x0b\x72\x32\x99\xcf\xd2\x22\x5b\x2c\xf3\xeb\xf8\xef\x3e\x7d\x8a\xe2\x77\x6f\x41\x9a\x2c\x93\x59\x5a\xe4\xb3\x5b\x4c\x7d\xc9\x13\x43\x99\xcc\x99\xc0\x37\xd6\xbd\x5c\xa7\x1e\xb0\xc8\x17\x0f\xd3\xb4\xc8\x92\xfc\x86\x9c\xe1\x96\x9a\xd0\x34\x32\xb4\x58\x1a\x74\x36\x7c\x69\x9e\xd0\x48\x74\x68\xfd\xdf\xa0\xbd\xc3\xf4\x70\x87\x43\xa7\x5e\x50\x76\x80\xa8\xa9\xed\xf0\xbe\x98\x46\x0e\x2c\x41\xc0\x55\x1d\x70\xdc\x22\xff\x9d\xc9\x67\xd5\x71\x77\x1e\x8f\x73\xfc\xe9\x8f\x90\x5d\xbc\x26\x7e\x71\xb6\x45\xe9\x9f\x21\xa3\x9e\xb0\x9f\x8b\x5f\xcf\xbf\x9f\xe3\x2a\x95\x10\x54\x56\x97\xd7\x20\x80\xbf\x6a\x74\x57\xcc\xc1\x97\x45\x70\xc5\xbc\x71\x4e\x93\x30\x8c\x3f\xfc\x36\x8e\xc6\xd1\x38\x26\xbe\xc1\xbd\xb8\x67\xca\x78\x63\x30\xdf\x18\xb4\x1b\xc5\x2b\x02\xf1\x87\x5e\x00\x93\xcc\x31\xca\x27\xc8\xe9\x6e\x85\xa5\x92\x95\x25\xf0\x31\xea\xc5\x68\x34\x4c\x55\x27\xef\x5d\xcf\x69\x9b\xb2\x44\x6b\xbb\x27\xf4\xfc\x8e\x09\x54\x8d\x3b\x65\xff\xd2\xf1\x1a\xa4\x15\xfb\x3f\x09\x17\xff\x57\xba\x59\xd5\x98\x12\x07\x73\x6a\xf0\x4b\x83\x76\x38\xbd\x00\xa5\x6e\x08\xdc\x45\x62\x60\x16\x28\x94\xd9\x11\xf8\xf8\xeb\x9c\xf5\x5c\x9c\x09\x76\x03\xc5\x4f\xfe\x2d\x9c\xbb\xf8\xc3\x9c\xfd\x1d\x00\x00\xff\xff\x69\xba\xba\x71\x66\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/app.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
