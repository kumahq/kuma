// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package ingress

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 7, 31, 12, 50, 3, 643584646, time.UTC),
		},
		"/app.yaml": &vfsgen۰CompressedFileInfo{
			name:             "app.yaml",
			modTime:          time.Date(2020, 7, 31, 12, 50, 3, 643488754, time.UTC),
			uncompressedSize: 2762,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x0c\x16\x3d\x74\x0f\xb2\xa5\xb4\xd9\x62\x09\xf4\x20\xc4\x2e\x6a\x24\x96\x05\x5b\xde\xab\xc0\x48\x63\x99\x08\x5f\x4b\x52\xee\x1a\x41\xfe\x7b\xa1\x87\x6d\x49\xb6\xb7\x01\x16\xed\xa1\x3a\x89\xf3\xf8\xe6\x9b\x8f\x43\xd2\xf3\xbc\x11\xd5\xec\x0b\x1a\xcb\x94\x24\xb0\x0f\x46\x2f\x4c\xe6\x04\xd6\x68\xf6\x2c\xc3\x30\xcb\x54\x29\xdd\x48\xa0\xa3\x39\x75\x94\x8c\x00\x24\x15\x48\xe0\xa5\x14\xd4\x63\xb2\x30\x68\x6d\x6b\xb4\x9a\x66\x48\xe0\xf5\x15\xc6\xd1\x71\x09\x6f\x6f\xa3\x7f\x2a\xf2\x63\xe8\x56\x63\x56\x25\xba\x83\x6e\xdd\xf3\x26\x2f\x56\xc6\x25\x07\x5d\x07\x01\x68\x65\x9c\xad\xe2\x00\xbc\x7a\x41\x20\xf0\x7d\x3f\xa8\x2d\x00\xda\x28\xa7\x32\xc5\x09\x24\x0f\x71\x6b\x73\xd4\x14\xe8\xe2\x5e\xac\x45\x8e\x99\x53\xa6\x41\xa2\x5a\x0f\xb8\x0e\x7b\xa5\x5a\xdb\xc9\xa9\xe1\x29\x6a\xae\x0e\x02\x7f\x54\x51\x00\x4e\x9f\x91\xdb\x5b\x2c\x8e\x9a\x58\x67\xa8\xc3\xe2\xd0\xc4\x19\xc5\x39\x93\xc5\x46\xe7\xd4\x21\x69\x9b\x14\xf4\xdb\xba\x34\x05\x12\x08\xce\x96\x8d\xa4\x7b\xca\x38\x7d\xe6\x48\xc0\xbf\x68\x5b\x50\x97\xed\x9e\x3a\x0c\xae\x71\x00\x70\x28\x34\x3f\x95\xea\x36\x5c\x67\x48\xa9\x1c\x75\x4c\xc9\x13\x08\xd4\x08\x63\xa6\x26\x2d\x08\x01\x94\x15\x89\xfc\x22\x40\xa0\xdd\x35\xc2\x2c\xd0\xee\x1a\x4d\xaa\x8f\xf7\x58\x5d\xe7\x05\x70\xd4\xa7\xfe\xef\x4d\x7a\x74\xb9\x15\xaf\xaf\x1e\xb0\x2d\x8c\xe7\x82\x16\x18\x97\x9c\xaf\x31\x33\xe8\xce\x35\x59\xdf\x71\xaa\xee\xb5\x1b\x5b\xcf\xe4\x65\x72\x85\x8b\x32\x3f\xe3\x64\x4a\x3a\xca\x24\x9a\x0e\xff\x23\x46\x97\x7d\xa7\x6a\x07\x1c\xde\xde\x48\xb5\x68\x47\xef\x0c\xdb\xa3\x18\x2b\xce\xb2\xc3\x80\x53\x63\xec\x67\xa0\xdc\x93\xce\xf2\xcc\x24\x5e\x4e\xd3\x28\x5c\xcc\x7a\x4e\x80\x3d\xe5\x25\xfe\x61\x94\x20\x03\x07\xc0\x96\x21\xcf\x57\xb8\xbd\xf4\xb4\xbe\x98\xba\x1d\x39\x0d\xc8\xb8\xaa\xf3\xdd\xd2\xeb\x38\x7c\xf8\x97\xeb\xd7\x47\xed\x2a\x89\xc7\xcd\x22\x4c\x1f\x96\x51\xb2\x5a\x3e\xa5\xf1\x53\x18\xcd\xd2\x30\x9e\xa7\xeb\xd9\xea\xcb\x6c\x95\x6e\x56\x4f\xd7\x88\x35\x82\x3f\x96\x82\x3e\xe8\x30\xcf\xab\xad\xec\xcb\x3d\xc0\x9f\x86\x49\xd8\x60\x2f\x66\xeb\x3f\x6f\x23\xf6\x87\xff\xbb\x40\xb7\xf6\x8c\xc0\x4f\x3f\x1f\x85\xfd\x38\x3e\xff\xd7\x22\x7f\x7c\x0f\x72\x38\x5d\xcc\xa3\x34\x5e\xae\x92\xeb\xf8\x1f\x3e\x7f\xf6\x83\x0f\xef\x41\x9a\xae\xc2\x79\x94\x26\xf3\x5b\x4c\xab\x96\xa7\x86\x32\x99\x30\x81\xef\xec\x7b\xb5\x89\x2a\xc0\x34\x59\x3e\xce\xa2\x34\x0e\x93\x1b\x72\x4e\xf6\xd4\x4c\x4c\x29\x27\xb6\x39\xc5\x93\x97\xf2\x19\x8d\x44\x87\xb6\xba\x70\xda\x6b\x82\x36\xd7\xc4\xc4\xa9\x17\x94\x1d\x20\x6a\x0a\x3b\x3c\x2f\xa6\x94\x03\x8b\xe7\x71\x55\x78\x1c\xf7\xc8\x7f\x67\x72\xab\x3a\xee\xce\xfb\x74\x8e\x3f\xdd\x08\xf1\xc5\x83\x55\x7d\x9c\xed\x51\x56\x2f\x9d\x51\xcf\xd8\xcf\xc5\x6f\xe7\x1b\xee\xf8\x65\x4a\x08\x2a\xf3\xcb\x63\xe0\xc1\x5f\x05\xba\x2b\x66\xef\xeb\xd2\xbb\x62\xde\x39\xa7\xc9\x64\x12\xdc\xfd\x36\xf6\xc7\xfe\x38\x20\xd5\x06\xf7\xe2\xb6\x94\xf1\xd2\x60\xb2\x33\x68\x77\x8a\xe7\x04\x82\xbb\x5e\x00\x93\xcc\x31\xca\xa7\xc8\xe9\x61\x8d\x99\x92\xb9\x25\xf0\xc9\xef\xc5\x68\x34\x4c\xe5\x27\xef\x7d\xcf\x69\xcb\x2c\x43\x6b\xbb\x15\x7a\x7e\xc7\x04\xaa\xd2\x9d\xb2\x7f\xe9\x78\x0d\xd2\x9c\xfd\x9f\x84\x0b\xfe\x2b\xdd\xac\x2a\x4d\x86\x83\x39\x35\xf8\xb5\x44\x3b\x9c\x5e\x80\x4c\x97\x04\xee\x7d\x31\x30\x0b\x14\xca\x1c\x08\x7c\xfa\x75\xc1\x7a\x2e\xce\x04\xbb\x81\x52\x4d\xfe\x2d\x9c\xfb\xe0\x6e\xc1\x46\x7f\x07\x00\x00\xff\xff\x07\xb0\x13\xe5\xca\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/app.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
