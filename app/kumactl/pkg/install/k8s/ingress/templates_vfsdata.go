// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package ingress

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 15, 18, 52, 33, 798341276, time.UTC),
		},
		"/app.yaml": &vfsgen۰CompressedFileInfo{
			name:             "app.yaml",
			modTime:          time.Date(2020, 6, 15, 18, 52, 33, 798254030, time.UTC),
			uncompressedSize: 2648,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x0c\x82\x1e\x9a\x83\x2c\x29\xed\xa6\x08\x81\x1e\x84\xb5\x8b\x1a\xbb\x96\x05\x5b\xce\x55\xe0\x52\xb3\x32\xb1\xfc\x0a\x49\xb9\x31\x82\xfd\xef\x85\x6c\xd9\x96\x64\x3b\x5d\x20\x68\x0f\xe5\x49\x9c\x19\xbe\x79\xf3\x66\x48\x05\x41\x30\xa2\x86\x7f\x46\xeb\xb8\x56\x04\xb6\xf1\xe8\x85\xab\x92\xc0\x0a\xed\x96\x33\x4c\x18\xd3\xb5\xf2\x23\x89\x9e\x96\xd4\x53\x32\x02\x50\x54\x22\x81\x97\x5a\xd2\x80\xab\xca\xa2\x73\xad\xd1\x19\xca\x90\xc0\xb7\x6f\x30\x4e\x8f\x5b\x78\x7d\x1d\xfd\x53\x92\x1f\x43\x77\x06\x59\x73\xd0\xef\x0c\x12\x48\x75\x89\x99\xb6\x7e\x04\x60\xb4\xf5\xae\xf1\x00\x04\xfb\x0d\x81\x38\x8a\xa2\x78\x6f\x01\x30\x56\x7b\xcd\xb4\x20\x90\xdf\x67\xad\xcd\x53\x5b\xa1\xcf\x7a\xb1\x0e\x05\x32\xaf\xed\x01\x89\x1a\x33\x60\x37\xac\x8e\x1a\xe3\xc2\x53\x89\x13\x34\x42\xef\x24\xfe\xa8\x86\x00\x82\x3e\xa1\x70\xb7\x58\x1c\x55\x70\xde\x52\x8f\xd5\xee\x10\x67\xb5\x10\x5c\x55\x6b\x53\x52\x8f\xa4\x2d\x52\xd2\xaf\xab\xda\x56\x48\x20\x3e\x5b\xd6\x8a\x6e\x29\x17\xf4\x49\x20\x81\xe8\xa2\x6c\x49\x3d\xdb\x3c\x76\x18\x5c\xe3\x00\xe0\x51\x1a\x71\x4a\xd5\x2d\x78\x7f\x42\x29\xed\xa9\xe7\x5a\x9d\x40\x60\x8f\x30\xe6\x3a\x6c\x41\x08\xa0\x6a\x48\x94\x17\x01\x12\xdd\xe6\x20\xcc\x1c\xdd\xe6\xa0\x49\xb3\x44\x8f\xd5\x75\x5e\x00\x47\x7d\xf6\xdf\xbd\xd9\x4e\xaf\xb5\xa2\x59\x4c\x2b\x4f\xb9\x42\xdb\x01\x0f\xda\xce\xf5\x23\x9b\xc5\x25\xad\xda\xc6\xcd\x9a\x4f\x78\x7d\x25\xcd\xa6\x9d\x8b\x33\xdf\x53\x70\x56\x0b\x91\x69\xc1\xd9\xae\x73\xec\x6c\xec\x9f\x40\xb5\x25\x9d\xed\x99\x49\xb6\x98\x14\x69\x32\x9f\xf6\x9c\x00\x5b\x2a\x6a\xfc\xc3\x6a\x49\x06\x0e\x80\x67\x8e\xa2\x5c\xe2\xf3\xa5\xa7\xf5\x65\xd4\x6f\xc8\xa9\x7b\xe3\x26\xcf\x77\x53\xaf\xb2\xe4\xfe\x5f\xce\xbf\xbf\x07\x57\x49\x3c\xac\xe7\x49\x71\xbf\x48\xf3\xe5\xe2\xb1\xc8\x1e\x93\x74\x5a\x24\xd9\xac\x58\x4d\x97\x9f\xa7\xcb\x62\xbd\x7c\xbc\x46\xec\x20\xf8\x43\x2d\xe9\xbd\x49\xca\xb2\x69\x65\x5f\xee\x01\xfe\x24\xc9\x93\x03\xf6\x7c\xba\xfa\xf3\x36\x62\x7f\x32\xbf\x0b\x74\xab\x67\x04\x7e\xfa\xf9\x28\xec\xfb\xf1\xf9\x7b\x2f\xf2\xfb\xb7\x20\x27\x93\xf9\x2c\x2d\xb2\xc5\x32\xbf\x8e\xff\xee\xd3\xa7\x28\x7e\xf7\x16\xa4\xc9\x32\x99\xa5\x45\x3e\xbb\xc5\xb4\x29\x79\x62\x29\x57\x39\x97\xf8\xc6\xba\x97\xeb\xb4\x01\x2c\xf2\xc5\xc3\x34\x2d\xb2\x24\xbf\x21\x67\xb8\xa5\x36\xb4\xb5\x0a\x1d\x32\x8b\xde\x85\x2f\xf5\x13\x5a\x85\x1e\x5d\xf3\x1a\xb4\x77\x98\x1e\xee\x70\xe8\xf5\x0b\xaa\x0e\x10\xb5\x95\x1b\xde\x17\x5b\xab\x81\x25\x08\x84\xae\x02\x81\x5b\x14\xbf\x73\xf5\xac\x3b\xee\xce\xcf\xe3\x1c\x7f\x7a\x11\xb2\x8b\xbf\x49\xb3\x04\xdf\xa2\x42\xe7\x32\xab\x9f\xb0\x7f\x16\xbf\x9e\x9f\x9f\xe3\x62\x5a\x4a\xaa\xca\xcb\x6b\x10\xc0\x5f\x15\xfa\x2b\xe6\xe0\xcb\x22\xb8\x62\xde\x78\x6f\x48\x18\xc6\x1f\x7e\x1b\x47\xe3\x68\x1c\x93\xa6\xc1\xbd\xb8\x67\xca\x45\x6d\x31\xdf\x58\x74\x1b\x2d\x4a\x02\xf1\x87\x5e\x00\x57\xdc\x73\x2a\x26\x28\xe8\x6e\x85\x4c\xab\xd2\x11\xf8\x18\xf5\x62\x0c\x5a\xae\xcb\x93\xf7\xae\xe7\x74\x35\x63\xe8\x5c\x37\x43\xcf\xef\xb9\x44\x5d\xfb\xd3\xe9\x5f\x3a\x5e\x8b\xb4\xe4\xff\x27\xe1\xe2\xff\x4a\x37\xa7\x6b\xcb\x70\x30\xa7\x16\xbf\xd4\xe8\x86\xd3\x0b\xc0\x4c\x4d\xe0\x2e\x92\x03\xb3\x44\xa9\xed\x8e\xc0\xc7\x5f\xe7\xbc\xe7\x12\x5c\xf2\x1b\x28\xcd\xe4\xdf\xc2\xb9\x8b\x3f\xcc\xf9\xdf\x01\x00\x00\xff\xff\x14\x8a\xd4\xa0\x58\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/app.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
