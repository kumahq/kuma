// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package logging

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 7, 31, 6, 15, 49, 744759363, time.UTC),
		},
		"/loki": &vfsgen۰DirInfo{
			name:    "loki",
			modTime: time.Date(2021, 3, 2, 9, 46, 40, 47182385, time.UTC),
		},
		"/loki/loki.yaml": &vfsgen۰CompressedFileInfo{
			name:             "loki.yaml",
			modTime:          time.Date(2021, 3, 2, 9, 46, 40, 45839506, time.UTC),
			uncompressedSize: 17353,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x5c\xdd\x73\xe2\xb8\xb2\x7f\x9f\xbf\x42\x95\x7b\xaa\x72\xce\xd9\xc3\x97\xf9\x98\x40\xd5\x3e\x90\x64\x20\x64\x27\x84\x4d\x66\x80\x78\x6a\x8a\x92\xe5\x36\x28\xc8\x96\xae\x2c\x13\xc8\xde\xfd\xdf\x6f\xc9\x5f\xd8\x40\x48\x36\x43\xce\xee\x56\x25\x4f\x63\x75\xab\xf5\xeb\x56\xab\xbb\x6d\x5a\x83\x05\x1d\x82\xf4\x29\xf7\x5a\x68\x51\xf9\x30\xa7\x9e\xdd\x42\x7d\xec\x82\x2f\x30\x81\x0f\x2e\x28\x6c\x63\x85\x5b\x1f\x10\xf2\xb0\x0b\x2d\xf4\xdb\x6f\xa8\x98\xd2\xd1\xef\xbf\x7f\x28\x14\x0a\x1f\xb2\x52\x04\x67\x94\xac\x4a\x8b\x8a\x05\x0a\x27\x12\x07\xdc\xbe\x05\x12\x48\xaa\x56\x83\x90\xbe\x43\x32\xe3\x73\x1a\x3f\x84\xc2\x77\xac\x85\x10\xc3\x16\x30\x5f\x4f\x42\x08\x0b\x91\xce\x42\x48\x02\x03\xec\x27\x72\x7c\x01\x44\x73\x09\x49\x17\x94\xc1\x14\xec\x16\x72\x30\xf3\xe1\x03\x42\x98\x31\xfe\x30\x48\x08\x9f\x7c\x82\x19\x56\x21\xf6\x84\x63\xc1\x59\xe0\x42\xbc\x4c\x01\x1d\x13\xee\x39\x74\x7a\x85\xc5\x71\x32\x02\xae\x50\xab\x73\x2a\xd3\x01\xa1\xf5\xf7\x15\x78\x6a\x18\x4e\x3e\x63\x98\xba\x29\xd5\x07\x22\x41\xe9\xc7\x19\xf7\x55\x1f\xd4\x03\x97\xf3\xf5\x7a\x7a\xb0\x37\x38\xcb\x0f\x0c\x7a\xe7\xeb\x01\x19\x78\x6d\xff\xab\x0f\x32\xc2\x24\x03\x06\x2d\x74\x7c\x15\xf8\xea\x46\x53\xfa\xdc\xbb\xe1\x3c\x5c\xc0\x87\xcf\xd4\x0b\x96\x39\xbe\x90\xa7\xed\xad\x42\x7a\x20\x04\x03\x17\x3c\x85\x59\x57\xf2\x40\xf8\xbb\x45\x46\xd8\x25\xf6\xa6\x89\x21\xb4\x26\x2e\xf5\x5a\xa8\x12\x3f\x22\xe4\xe2\x65\x0b\x35\xea\xf5\x6a\xfd\x03\x42\x8e\x1f\xca\x3b\x94\x38\x09\xd8\xbe\xf6\xd8\x4a\x2b\xd6\xa1\x0c\xfc\x95\xaf\xc0\x6d\x21\x25\x83\xd0\x22\xf0\xbf\x01\x95\x60\x9f\x4b\x2e\xce\xb0\xc0\x16\x65\x54\xd1\xf5\xa6\xb5\x3f\x7f\x3e\xac\x6f\x16\x84\xe4\xae\xc2\x94\xfd\x71\x27\xcd\xcc\x7c\x5b\x47\x5d\xfb\xd9\x13\x7e\x1b\x3a\x16\x56\xb3\x83\xbb\x62\xce\xc5\x7e\xcc\x05\xb3\xac\xbb\x7c\x2a\x4b\x7f\x03\x27\x49\xc3\xe0\x6d\x68\xcc\xb7\x8e\x54\x89\x68\xfd\x50\x5c\x61\x97\xb5\xd0\xdd\x78\x58\xc6\x9d\x26\xb3\xdc\x0e\xb5\xba\xc3\xf9\x35\x3d\x75\xef\x46\xcb\x47\xf3\x57\x71\x8f\x2f\x86\x01\xae\x34\x1f\xed\x6e\x73\x65\x0e\x9b\xf7\x96\x51\x77\xf1\x88\x34\xce\x68\x7b\x6a\x8d\x3a\xb5\xb1\xb1\x5c\x58\x86\x72\xee\xdc\xce\x3d\xae\x34\x1f\xcc\xf1\xa5\xb0\x8c\x5f\x1b\xbd\xf3\xd3\xc7\x33\x97\x05\xa6\x31\x7c\xb4\xbb\xc3\xd5\xf5\x94\x4f\x7b\xdd\x3e\xb7\x47\x75\x39\x36\x2e\x7d\xcb\xe8\xcb\x71\xb5\x2f\xc0\xfd\xda\xe8\x9d\xf7\x8c\xab\xfb\x4f\xe5\x7e\x3b\xcb\xc3\xe6\x56\x77\xe8\x90\xee\x70\x85\x47\xcd\xf9\x35\x6d\x3f\x5a\xbf\x66\xe8\xd5\x4b\x66\x77\x3b\xc2\x62\xd9\x35\x3b\x2a\xc4\xd5\x65\xae\x39\xea\xd7\xef\x8c\x25\x23\xf7\xfc\x97\xde\x59\x7b\xda\xbb\xb8\x14\x96\x1b\xe1\x0e\x9f\xbb\xca\x20\xd5\x9b\x05\x71\xbf\xae\xc7\xce\xda\xd3\x64\xac\xd7\x65\x81\x35\x1a\x2a\xab\x7a\x59\x4f\xe9\x17\x97\x8c\x74\x97\xe2\xce\xe8\x94\xf1\xa8\x19\x8c\x0d\x73\x76\xa7\xf9\xef\xf9\xf4\x2a\xc4\x56\x99\x41\xa7\x59\x26\x6e\x27\x20\x86\xc9\x08\x6b\xae\xcc\xf1\xcd\x0a\x8f\x86\x8f\xd7\xb4\xfd\x70\xe6\x2e\x85\x35\x62\x65\x52\xc9\xdb\xd1\x1c\xd5\x5d\xab\x7a\x79\x6f\x0e\x9b\x2a\xe2\xef\x3b\x96\xdb\x51\xe6\x17\x3e\x35\xdd\x8e\x4f\x8c\xaf\xbf\xf4\xce\x4e\x57\xe6\x48\xb0\xbb\xea\x8d\x63\x19\xcb\xf9\xb8\xda\x9f\x59\xe3\x53\xdf\x1c\x5f\x35\x7a\x17\x37\x2b\x7b\xb4\x8f\xa7\xef\x44\x7b\xd5\xf1\xb4\xcc\xab\x2f\x77\x35\xdc\x16\x8f\x77\xc6\x8c\x59\xa3\x8e\x73\x67\x34\x03\xd3\x65\x5e\xbc\x47\x0b\xcb\x35\x85\x59\xbd\x0a\xb1\x7d\xbe\x3d\x75\x89\xdb\x54\xd7\xb4\x4d\xaf\xee\xdb\xcb\xeb\xb3\xf2\x43\xff\xac\xbc\xec\xdf\xf6\x22\xbb\x76\x59\x60\x76\x87\xb5\x70\x6e\x68\xc3\xd3\xcc\x7e\x7c\x32\xae\xbb\xd3\x5f\x52\xdb\x5e\x5c\x32\xd3\x65\xb5\x6b\x7a\x2a\x2c\xf7\x86\x41\xe7\x24\x96\xd1\xa4\xd8\x1d\xde\xdb\x9d\xd8\xcf\x42\xbd\x99\xc6\x5d\x27\xd5\x1b\x16\xee\xbb\x9e\x6f\xf4\xb9\x39\xaa\xcc\xae\xe9\xa9\x71\x9d\x8c\xa5\xfb\x75\xb9\xb0\x2e\x6e\xe6\x77\x53\xf1\x68\x8e\x2f\x0d\x73\xdc\x0b\xf1\xe3\x8b\x9b\x32\xe9\x34\x7d\x3c\xee\x97\xcd\x51\xdd\x21\xdd\xe6\xca\x3e\xe7\xd3\xab\xc7\x4f\x0f\x57\x6d\x11\xae\x77\x37\xb2\xd9\xd8\x88\xf5\x7e\xd4\xfe\x72\x4a\x2d\x63\x59\x36\xbb\xbd\xd8\x37\x4e\xe7\x78\x7c\xc9\xc2\xbd\xf6\xe6\x8d\xde\x59\x73\x7e\x37\xbe\x99\x7d\x36\x96\x0b\x6c\xcc\x17\x78\x54\x9f\x9b\x63\xad\xe7\xa9\x8b\x47\x4b\x46\xaa\x4c\xfb\xbc\x4a\x6c\x62\x76\xd9\xca\x1c\xf5\xcb\xda\x97\xae\x69\x7b\x61\x76\x3b\xe5\xbb\xdb\xa6\x6f\x19\x4a\x7c\x36\x22\x7f\x26\x0f\xa2\x7c\x37\xba\xf4\xb5\x0f\xdc\x8d\xea\x33\xd3\x88\xcf\xcc\x85\xf6\xf3\x61\x60\x77\xd9\xc2\x62\xcd\xb9\x39\x5a\xea\xe7\xc7\xb1\x31\x0c\x42\xfe\xd1\xaf\x8d\x5e\xd7\x9c\x59\x17\x7d\xa6\xb1\x12\x77\xa8\xf5\x8c\xfc\xb3\x7a\xca\x88\xcb\x16\xa6\xd6\xf7\xe2\xea\xe7\xa7\x43\xcf\x59\x12\xb8\xff\xab\xb9\x28\x59\x27\x61\x89\xc3\xd1\xff\x85\xac\x84\x51\xf0\x54\x92\xba\x2d\x4c\xe6\xdc\x71\x26\x51\x86\x69\x65\x33\xf8\x44\x80\xa4\xdc\x6e\xa1\xba\x9f\x1b\x96\xa0\xa4\x0e\xbd\xc8\x28\xaf\xc7\xa9\x97\xb2\x57\xca\x65\xd7\x4f\xc5\x2b\x32\xf3\xe9\x23\xe8\x61\xa3\x56\x2e\x67\xc7\x1f\x30\x55\x2d\x54\x49\x78\x61\xa9\x40\x7a\x98\x4d\x62\x55\xd1\x6f\xbf\xc7\x14\x45\x5d\xe0\x81\xe6\x2d\x47\xcc\x82\xfb\x54\x27\xd0\xb4\x02\x71\x28\x83\xc8\xaa\x25\x19\x78\xa5\x44\xf1\x52\xca\x18\x9a\x20\x64\xf6\x41\x2e\x92\x9c\x87\xd0\x4c\x29\x31\x61\x61\xc1\x37\x11\x5c\xaa\x16\xaa\x56\xca\x51\x21\xa3\xb0\x9c\x82\xda\xb0\x8c\xbf\xf2\x48\x46\xd3\x08\x8e\x4f\x24\x16\x10\x73\xa6\x39\xe9\x9e\x5b\x93\x08\xd3\x3c\xb0\x40\x7a\xa0\xc0\x2f\x08\x6e\xfb\x05\x3d\x1a\xcb\x13\x54\x00\xa3\x1e\x4c\x7c\x85\x33\x15\x95\x9e\x6f\x73\x32\x07\x99\x31\xc3\x5a\xcc\xc4\xb7\xf3\xab\x69\x7e\xc9\x75\x56\x15\xdc\x8e\x47\x24\x84\x86\xdc\x66\xf4\x79\x20\x09\x4c\xb2\x1e\x15\x11\x26\x13\xed\xa5\x93\xcc\x3a\x82\xdb\x11\xdf\x24\x83\x39\x35\x4d\x48\x69\xa1\xc9\x44\xdb\x94\x12\x98\x4c\x5e\xbb\x86\xc7\x6d\xd8\xbf\x84\x2e\x5f\x32\xf2\x31\x89\x0a\x28\x5b\x72\x91\xce\x91\x30\x85\x65\x0b\x1d\x1f\xa7\x23\x7b\x60\x6c\x63\x4e\x64\x86\xdc\x2e\xde\x92\xbb\xcf\x3c\xff\x2c\xfe\xf4\xaf\x2d\x41\x12\x04\xd3\x6f\x5f\x6b\x39\xe1\xb3\x2e\x98\x5a\xe8\x1f\xeb\x72\xd9\x07\x81\x25\x56\x5c\xb6\x50\xe9\x25\xd0\x37\x61\xa4\x91\x63\xaf\x82\x9b\x36\xbd\xe7\xd6\xb3\x88\x7f\x08\x44\x7e\xb9\x4d\xfa\x41\x16\x0d\x7d\xe7\x69\xb7\x59\x1f\x86\x83\xad\x46\xb8\xa7\x30\xf5\x40\xee\x5b\x37\x65\x5a\x1f\xce\xec\xd6\x97\x16\x58\x96\x18\x9f\x96\x74\x34\x28\xfd\xfb\x1f\x95\xd2\xbf\x8b\x8c\x4f\x0f\xe6\x0f\x1a\x67\x40\xed\xc3\xe8\x32\x99\x08\xac\x66\xb1\x17\xed\x8b\x6a\x58\x88\x3f\x31\xa8\xed\x0b\x08\xc5\x9f\x5e\x6b\xc5\xad\xd8\xf7\xca\xe8\xb9\xb6\xcd\x7b\xf0\x7c\x0f\x9e\xef\xc1\xf3\x3d\x78\x6e\x04\x4f\x9b\x4a\x20\xaa\xa0\x85\x4a\xce\x18\x48\xff\x6f\x10\x4b\xd7\x96\x7e\x59\xd4\x78\x61\x75\xf9\xd2\x50\xfa\x4c\x20\xfb\x56\x2e\x34\x71\xe1\xb1\x50\xfc\xfe\x53\x21\xfa\xb7\xf3\xfd\xb7\x93\xff\x54\xca\xbf\x1f\xff\x88\xff\x46\xdb\xf3\x43\x39\x61\xb7\x98\xf7\xcc\xf0\x9e\x19\xde\x33\xc3\x7b\x66\xd8\xc8\x0c\xd4\xdb\xca\x0d\xef\xa9\xe1\xe5\xa9\x61\x0e\xf0\xa7\xa6\x86\xa7\x83\x56\x04\xe5\x9f\x19\x2c\xff\x7a\x5b\x30\xef\x09\xe6\x3d\xc1\xbc\x27\x98\xf7\x04\xb3\x91\x60\x7c\x85\x15\x25\x7f\xd1\x9c\xf2\xfa\xec\x81\x3d\x8f\xab\xf0\x67\xf6\x2c\x85\xf2\x78\xfd\x89\x4b\xa5\xe4\xf2\xd0\x6e\x96\xa8\xe8\x0a\xee\x81\xa7\xde\x23\xef\x7b\xe4\x7d\x8f\xbc\x7f\x8f\xc8\xfb\x87\x02\xc6\xa1\x82\xf3\x9e\xa6\x95\xd0\x17\xdb\x84\xf0\xc0\xcb\x37\xaf\xbc\xb4\x23\x05\xa1\xb5\x4a\x31\x7b\x18\xbb\x5f\xdc\xfc\x72\x10\x70\x7b\x7e\xa7\x7e\xcd\x2f\xe1\x1a\x53\xfc\xdb\x3a\x0b\x7c\x05\xf2\x86\x33\xc8\xa1\x94\x16\x26\x45\x1c\xa8\x19\x97\xf4\x31\x54\xbe\x38\x3f\xf1\x8b\x94\x97\x16\x95\xc3\x42\x2d\x90\x08\x82\xce\x74\xcf\xc0\x96\x01\x8b\xb2\x69\x01\x61\x41\xe3\x66\x29\xf4\xed\xe8\xe8\x3b\xfa\x1f\x74\x74\x84\xf4\x5b\x1e\xc1\x0a\x7c\xa4\x66\x80\x08\x97\x80\xda\x83\x1e\x9a\x6a\xc6\x18\x4e\xe4\xce\x99\xbc\xa9\x53\x80\x9f\x7f\x2a\x09\xc9\x97\xab\x75\x4e\x89\xf6\x69\xcd\x04\x9e\x2d\x38\xf5\xd4\x7a\x44\x1f\xa8\xf0\x61\x01\xd2\x0a\x21\x4d\x41\x1d\xfd\x07\x1d\x3d\x60\x45\x66\xfa\x1f\x8c\xfa\xea\xe8\xfb\x6e\xc3\x9f\x6a\xdc\xde\xf4\x75\xf6\x7f\xc6\xa2\x56\x2c\xfb\x0f\xf6\xe1\x05\xd6\x3d\x10\x15\xdb\x7a\xa7\xbb\xea\x49\xbb\x1d\xef\x99\x3d\xe4\x0c\x6e\xc0\xd1\x92\xb7\x3d\xf0\x25\x0e\x92\xec\xfc\x1e\x1b\x6d\x9d\xb9\xbd\xd6\x8c\x60\x84\xeb\xbf\x71\x77\xdb\x6e\xff\x0d\xff\xbe\x1d\xc3\x52\x81\xa7\xe1\xfa\xc7\xdf\x37\x9c\x35\x61\xd1\x6e\x16\x37\x67\x86\xcd\x9b\x14\x12\xde\xd8\xef\xd2\xbf\x6f\xc7\x81\x0f\x1b\x72\x42\xd0\x2d\x84\xbe\x69\x2c\xdf\x0f\x6c\xa3\xb7\xe9\xc1\xf9\x0b\x19\x2c\x55\xf0\xd5\x96\x4b\x8e\xf9\x5b\x3b\xd9\xfa\x80\xbd\xe4\xa8\x24\xc7\x70\xeb\xfc\xfd\xf1\x20\xf0\x36\x86\x79\x23\xcf\x3a\x90\x95\xd6\xe8\x7e\x20\x66\x3e\x57\x22\x3c\x65\x99\x19\x60\x9b\x81\xef\x1f\xcc\x77\xc2\x93\x81\x25\xc5\xba\x5c\x4c\xa5\x27\x5d\xd9\x71\x1c\xee\x0d\x5a\xa8\xcf\x3d\x6d\x07\xc1\xa5\x4a\x5b\xb5\xd2\xce\xaf\xa4\x3f\x4d\x48\xae\x38\xe1\xac\x85\xbe\x9c\x0d\xe2\xb1\x08\xfd\x4c\x29\x51\x70\x41\x49\x4a\x92\x24\x1a\x95\x76\x83\x50\xc6\x06\xd9\x07\x06\x44\x97\xa5\xcf\xe2\x7f\xa5\x21\x0f\x68\xbf\x5d\xc5\x62\x62\x3f\xb5\x12\x90\xe6\xbb\xde\xe0\x6f\x60\x3f\x2c\x84\xbf\x3e\xab\xe7\x18\x5c\xee\xdd\x3e\xd9\x05\xfe\x36\x27\x75\xbf\x4d\xf3\xba\xb9\xba\xdc\xfa\x9c\x7b\x55\xd9\x16\xbf\xbd\x40\x20\x6c\xac\xe0\x56\x49\xac\x60\xba\xca\x14\xf9\x0a\x5c\xc1\xb0\x82\x58\x7a\x46\x6b\xfd\xb7\xf9\x4e\xb4\x6b\xa9\x5d\x27\x6c\x87\x46\x61\x4f\xe9\x0c\xc8\xdc\x0f\xdc\x52\xdc\x2c\x89\x2c\x02\x1f\x6d\xec\x34\xed\x3a\x26\xe4\xe3\xc7\x6a\xb5\x66\x90\x9a\x53\x33\xe0\x63\xb9\xdc\x68\x9c\x80\x73\x62\xd9\xe4\xc4\xa9\xd6\x1c\x5c\xa9\x35\x9b\xe4\x63\xa3\x61\x34\xaa\x0e\x2e\x93\x4a\xb3\x56\x83\x75\x63\xa9\xc6\x04\x6a\x06\x41\x18\x7b\xc5\x2e\x1f\xd9\xc5\x18\x75\x64\xb6\xd0\x91\x92\x01\x1c\x45\x4d\x9a\xb1\xd9\x93\x1e\xd0\x75\x70\xeb\x3f\x51\x0b\xa2\xf5\x5b\x69\xee\xf5\x31\x72\x9b\x2d\x6b\x21\x44\x5d\x3c\xd5\x8b\x4e\x25\x76\xb0\x87\xd3\x36\xd4\x56\xa5\xd8\x28\x56\x8e\x36\x39\x07\x01\x63\xd1\x4d\x95\x16\xea\x39\x7d\xae\x06\x12\xfc\xec\x47\x23\x84\xb0\x9c\x66\x96\x8e\x96\x3f\x2a\x44\x56\x2e\x3a\x94\xc1\xcf\x25\x50\x24\xd3\xef\x9a\xed\xf8\x3d\xda\x9e\x18\xf6\xfe\x16\x03\xc9\x7e\xd6\x46\x6c\x95\x4a\xe1\x6d\x85\x4d\x37\x6f\xe9\x93\x1c\x92\x4a\x58\xd0\xd2\xa2\x52\x12\x81\x3f\xcb\x8a\x8b\xee\xab\x5c\x69\xeb\x6d\xe1\x8b\xcc\x13\x61\xcc\x91\x10\x72\xf5\x84\x01\x56\xb3\x16\xca\xe1\xde\x29\x41\x06\xde\x9e\xe9\xd9\x36\xdf\x8d\xe9\x59\xb6\xf0\xbb\x01\xb5\x4a\xd1\xc7\xcb\xd2\x7a\x43\x37\x44\x47\x4b\x46\x5c\x1b\xa4\xe4\x6a\x4a\x7a\x19\x65\xef\x5a\xf1\x37\x8a\x9d\xe2\x77\x10\x9e\x14\x0e\xde\x62\xb7\x61\x2f\xae\x6f\xbf\xf4\xdb\x57\x9f\x36\x04\x2d\x30\x0b\xa0\x23\xb9\xdb\xda\x20\x20\xe4\x50\x60\x76\x5c\x31\xec\xa4\x45\xf8\xf5\x01\x29\xea\xb7\xc8\x7e\xf6\xbb\x45\x2e\xd2\xaf\xb1\xa4\x86\x1c\xe4\x9b\xa6\x37\x55\xde\x79\x56\xf5\x01\x8c\x4a\xdb\x33\xee\x29\x58\xaa\xbc\xf4\x67\xee\x02\x65\x18\x03\xaf\x1d\xdf\x2b\x42\xe5\x6d\x4a\x78\xb7\x29\x47\xd0\x92\xa9\x07\xbe\x3f\x90\xdc\x82\xfc\xaa\x0e\xa6\x2c\x90\xf0\x65\x26\xc1\x9f\x71\x66\xb7\x50\x3d\x47\xd7\x9a\x74\x41\x6d\x1a\x51\xc4\xee\x08\xd8\x5e\x6d\x92\x9e\x8e\x56\x61\x0c\xf0\xa8\xa2\x98\x9d\x03\xc3\xab\x5b\x20\xdc\xb3\xfd\x16\xaa\xe4\xf5\x88\x3a\xcd\x9f\xa2\xfa\x01\x21\xe0\xfb\x19\xc8\xf9\x4d\x88\xfb\xe6\xd7\xd3\x73\xa6\xd8\xf8\x9e\x10\xfd\xa5\x1f\xf7\xb5\x23\xdc\xe6\x32\x54\x8e\x8c\x1d\x47\xe3\x5f\xed\x20\x29\xce\x40\x6e\x66\x88\x02\x02\xc7\x01\xa2\x74\xfd\x75\x4b\x66\x60\x07\x2c\xbb\x97\x73\x58\xb5\xc2\x25\x0b\xba\xba\x2d\xae\x3f\xa9\xe9\x60\xee\x62\x5d\x75\x64\xb8\xb9\x80\xf8\x63\xdf\xa7\x25\xf5\xd3\x8f\x19\xb9\x4b\x74\x7b\x63\x51\x7a\x9f\x2e\xaf\xbc\xf7\x64\x22\x78\x2a\x2a\x25\xd7\xf0\xf2\x72\xc4\x9e\x10\x55\xd8\x3f\xe7\x25\xf1\x6a\x67\xac\x7a\x89\xdc\xed\xd8\x94\x89\x4b\xfb\x0b\xa8\x5b\x85\x15\x38\x01\xbb\x7d\xfb\x8b\x74\xfb\xab\x26\xc1\xed\x2b\xec\xe1\x69\xf8\x61\x38\xc9\x9e\xd7\xd2\x06\x09\xf6\x4d\x7c\x08\x25\x08\x46\x09\x8e\x3d\xfe\x65\x75\x56\xa6\xc4\xd9\x84\x13\x57\x0b\xfd\x9d\x6f\x2f\xbb\x0a\xb0\xa8\x5a\xbe\xe1\x8c\x51\x6f\xfa\x35\x64\x78\x5d\x45\x96\x01\xb5\x61\xea\x1f\x2d\xd0\xec\x1a\x69\xd6\x9c\x1a\x69\xe0\x8f\xd5\x6a\xbd\x5a\x6d\x18\xa4\x52\xb6\x0d\xe7\xa4\x56\xab\xd6\xca\x04\xc8\x49\xb3\xd9\xb4\x8c\x66\x85\xe0\x93\x93\xda\x49\x05\x93\x4a\xc3\x70\x2c\xab\xde\xac\x19\x8d\xca\x47\xfb\x4f\x2a\xd0\x3e\x3c\x93\x3e\x92\x6b\xa6\xa8\x52\x2e\x67\x32\x52\x36\x51\xec\xa0\xc4\xb7\xae\x37\x32\x4c\x26\x87\x64\xe7\xe8\xb0\x77\xb6\xa3\x2e\xfc\xf6\xfd\x05\x45\x63\x6e\xf7\xb6\x0b\x46\x4d\x6e\x19\xc5\x4a\xb1\xfc\x86\xc5\x62\x58\xd7\xa5\xb7\x54\xdf\xa0\xaa\xdb\x50\x72\x3d\xdb\x57\x5c\xe2\x29\x3c\x3d\xfd\xa8\xa4\x8f\xc4\xd1\x73\xc5\xc7\xde\xd2\x22\xb7\x05\x83\xcd\x17\xd3\x8c\x37\x6e\xbd\xa0\x86\xc7\x90\x2e\xe0\x89\x02\xe1\xbf\x53\x00\xd4\xea\x2f\xac\x57\xfe\x14\x38\xfb\x6b\x86\x43\x54\x76\x07\xae\x3b\xd2\x53\xa9\x40\xba\xd4\x0b\xc9\x5d\x89\x09\x0c\xf2\x95\x55\xed\x24\x75\x91\x97\x97\x11\xd1\x2d\xfd\xbc\x8a\xd1\x58\x7f\xfb\xb4\x3f\x7d\x08\x92\xff\x83\x22\x6c\xad\xf8\xff\x00\x00\x00\xff\xff\x71\x3f\xcf\xc5\xc9\x43\x00\x00"),
		},
		"/namespace.yaml": &vfsgen۰FileInfo{
			name:    "namespace.yaml",
			modTime: time.Date(2020, 7, 31, 6, 15, 49, 744791956, time.UTC),
			content: []byte("\x0a\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/loki"].(os.FileInfo),
		fs["/namespace.yaml"].(os.FileInfo),
	}
	fs["/loki"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/loki/loki.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
