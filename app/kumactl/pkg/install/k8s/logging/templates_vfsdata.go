// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package logging

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 10, 8, 43, 48, 237747840, time.UTC),
		},
		"/loki": &vfsgen۰DirInfo{
			name:    "loki",
			modTime: time.Date(2020, 6, 10, 9, 39, 17, 272055163, time.UTC),
		},
		"/loki/loki.yaml": &vfsgen۰CompressedFileInfo{
			name:             "loki.yaml",
			modTime:          time.Date(2020, 6, 10, 9, 39, 17, 272166594, time.UTC),
			uncompressedSize: 17353,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x73\xe2\xb8\xb2\x7f\x9f\x4f\xa1\xca\x3d\x55\x73\xce\xd9\x43\x00\x03\x99\x40\xd5\x3e\x90\x64\x20\x64\x27\x84\x4d\x66\x80\x78\x6a\x8a\x92\xe5\x36\x28\xc8\x96\xae\x2c\x13\xc8\xde\xfd\xee\xb7\xe4\x7f\xd8\x40\x08\x93\x21\x3b\x67\xab\xe0\x69\xac\x6e\xb5\x7e\xdd\x6a\x75\xb7\x9d\xd6\x60\x41\xfb\x20\x7d\xca\xbd\x06\x9a\x95\xdf\x4d\xa9\x67\x37\x50\x17\xbb\xe0\x0b\x4c\xe0\x9d\x0b\x0a\xdb\x58\xe1\xc6\x3b\x84\x3c\xec\x42\x03\xfd\xf1\x07\x3a\x4e\xe9\xe8\xcf\x3f\xdf\x15\x0a\x85\x77\x59\x29\x82\x33\x4a\x16\xc5\x59\xd9\x02\x85\x13\x89\x3d\x6e\xdf\x01\x09\x24\x55\x8b\x5e\x48\xdf\x20\x99\xf1\x29\x8d\x1f\x42\xe1\x1b\xd6\x42\x88\x61\x0b\x98\xaf\x27\x21\x84\x85\x48\x67\x21\x24\x81\x01\xf6\x13\x39\xbe\x00\xa2\xb9\x84\xa4\x33\xca\x60\x0c\x76\x03\x39\x98\xf9\xf0\x0e\x21\xcc\x18\x7f\xec\x25\x84\x8f\x3e\xc1\x0c\xab\x10\x7b\xc2\x31\xe3\x2c\x70\x21\x5e\xa6\x80\xde\x13\xee\x39\x74\x7c\x8d\xc5\xfb\x64\x04\x5c\xa1\x16\x17\x54\xa6\x03\x42\xeb\xef\x2b\xf0\x54\x3f\x9c\x7c\xce\x30\x75\x53\xaa\x0f\x44\x82\xd2\x8f\x13\xee\xab\x2e\xa8\x47\x2e\xa7\xcb\xf5\xf4\x60\xa7\x77\x9e\x1f\xe8\x75\x2e\x96\x03\x32\xf0\x9a\xfe\x17\x1f\x64\x84\x49\x06\x0c\x1a\xe8\xfd\x75\xe0\xab\x5b\x4d\xe9\x72\xef\x96\xf3\x70\x01\x1f\x3e\x51\x2f\x98\xe7\xf8\x42\x9e\xa6\xb7\x08\xe9\x81\x10\x0c\x5c\xf0\x14\x66\x6d\xc9\x03\xe1\x6f\x16\x19\x61\x97\xd8\x1b\x27\x86\xd0\x9a\xb8\xd4\x6b\xa0\x72\xfc\x88\x90\x8b\xe7\x0d\x74\x52\xab\x55\x6a\xef\x10\x72\xfc\x50\xde\xbe\xc4\x49\xc0\xf6\x8d\xc7\x16\x5a\xb1\x16\x65\xe0\x2f\x7c\x05\x6e\x03\x29\x19\x84\x16\x81\xff\x0d\xa8\x04\xfb\x42\x72\x71\x8e\x05\xb6\x28\xa3\x8a\x2e\x37\xad\xf9\xe9\xd3\x7e\x7d\xb3\x20\x24\x77\x15\xa6\xec\xfb\x9d\x34\x33\xf3\x6d\x1d\x75\xe9\x67\xcf\xf8\x6d\xe8\x58\x58\x4d\xf6\xee\x8a\x39\x17\xfb\x31\x17\xcc\xb2\x6e\xf2\xa9\x2c\xfd\x0d\x9c\x24\x0d\x83\x77\xa1\x31\xdf\x3a\x52\x25\xa2\xf5\xc3\xf1\x02\xbb\xac\x81\xee\x87\xfd\x12\x6e\xd5\x99\xe5\xb6\xa8\xd5\xee\x4f\x6f\xe8\x99\x7b\x3f\x98\x3f\x99\xbf\x8b\x07\x7c\xd9\x0f\x70\xb9\xfe\x64\xb7\xeb\x0b\xb3\x5f\x7f\xb0\x8c\x9a\x8b\x07\xe4\xe4\x9c\x36\xc7\xd6\xa0\x55\x1d\x1a\xf3\x99\x65\x28\xe7\xde\x6d\x3d\xe0\x72\xfd\xd1\x1c\x5e\x09\xcb\xf8\xfd\xa4\x73\x71\xf6\x74\xee\xb2\xc0\x34\xfa\x4f\x76\xbb\xbf\xb8\x19\xf3\x71\xa7\xdd\xe5\xf6\xa0\x26\x87\xc6\x95\x6f\x19\x5d\x39\xac\x74\x05\xb8\x5f\x4e\x3a\x17\x1d\xe3\xfa\xe1\x63\xa9\xdb\xcc\xf2\xb0\xa9\xd5\xee\x3b\xa4\xdd\x5f\xe0\x41\x7d\x7a\x43\x9b\x4f\xd6\xef\x19\x7a\xe5\x8a\xd9\xed\x96\xb0\x58\x76\xcd\x96\x0a\x71\xb5\x99\x6b\x0e\xba\xb5\x7b\x63\xce\xc8\x03\xff\xad\x73\xde\x1c\x77\x2e\xaf\x84\xe5\x46\xb8\xc3\xe7\xb6\x32\x48\xe5\x76\x46\xdc\x2f\xcb\xb1\xf3\xe6\x38\x19\xeb\xb4\x59\x60\x0d\xfa\xca\xaa\x5c\xd5\x52\xfa\xe5\x15\x23\xed\xb9\xb8\x37\x5a\x25\x3c\xa8\x07\x43\xc3\x9c\xdc\x6b\xfe\x07\x3e\xbe\x0e\xb1\x95\x27\xd0\xaa\x97\x88\xdb\x0a\x88\x61\x32\xc2\xea\x0b\x73\x78\xbb\xc0\x83\xfe\xd3\x0d\x6d\x3e\x9e\xbb\x73\x61\x0d\x58\x89\x94\xf3\x76\x34\x07\x35\xd7\xaa\x5c\x3d\x98\xfd\xba\x8a\xf8\xbb\x8e\xe5\xb6\x94\xf9\x99\x8f\x4d\xb7\xe5\x13\xe3\xcb\x6f\x9d\xf3\xb3\x85\x39\x10\xec\xbe\x72\xeb\x58\xc6\x7c\x3a\xac\x74\x27\xd6\xf0\xcc\x37\x87\xd7\x27\x9d\xcb\xdb\x85\x3d\xd8\xc6\xd3\x75\xa2\xbd\x6a\x79\x5a\xe6\xf5\xe7\xfb\x2a\x6e\x8a\xa7\x7b\x63\xc2\xac\x41\xcb\xb9\x37\xea\x81\xe9\x32\x2f\xde\xa3\x99\xe5\x9a\xc2\xac\x5c\x87\xd8\x3e\xdd\x9d\xb9\xc4\xad\xab\x1b\xda\xa4\xd7\x0f\xcd\xf9\xcd\x79\xe9\xb1\x7b\x5e\x9a\x77\xef\x3a\x91\x5d\xdb\x2c\x30\xdb\xfd\x6a\x38\x37\xb4\xe1\x59\x66\x3f\x3e\x1a\x37\xed\xf1\x6f\xa9\x6d\x2f\xaf\x98\xe9\xb2\xea\x0d\x3d\x13\x96\x7b\xcb\xa0\x75\x1a\xcb\xa8\x53\xec\xf6\x1f\xec\x56\xec\x67\xa1\xde\x4c\xe3\xae\x91\xca\x2d\x0b\xf7\x5d\xcf\x37\xba\xdc\x1c\x94\x27\x37\xf4\xcc\xb8\x49\xc6\xd2\xfd\xba\x9a\x59\x97\xb7\xd3\xfb\xb1\x78\x32\x87\x57\x86\x39\xec\x84\xf8\xf1\xe5\x6d\x89\xb4\xea\x3e\x1e\x76\x4b\xe6\xa0\xe6\x90\x76\x7d\x61\x5f\xf0\xf1\xf5\xd3\xc7\xc7\xeb\xa6\x08\xd7\xbb\x1f\xd8\x6c\x68\xc4\x7a\x3f\x69\x7f\x39\xa3\x96\x31\x2f\x99\xed\x4e\xec\x1b\x67\x53\x3c\xbc\x62\xe1\x5e\x7b\xd3\x93\xce\x79\x7d\x7a\x3f\xbc\x9d\x7c\x32\xe6\x33\x6c\x4c\x67\x78\x50\x9b\x9a\x43\xad\xe7\x99\x8b\x07\x73\x46\x2a\x4c\xfb\xbc\x4a\x6c\x62\xb6\xd9\xc2\x1c\x74\x4b\xda\x97\x6e\x68\x73\x66\xb6\x5b\xa5\xfb\xbb\xba\x6f\x19\x4a\x7c\x32\x22\x7f\x26\x8f\xa2\x74\x3f\xb8\xf2\xb5\x0f\xdc\x0f\x6a\x13\xd3\x88\xcf\xcc\xa5\xf6\xf3\x7e\x60\xb7\xd9\xcc\x62\xf5\xa9\x39\x98\xeb\xe7\xa7\xa1\xd1\x0f\x42\xfe\xc1\xef\x27\x9d\xb6\x39\xb1\x2e\xbb\x4c\x63\x25\x6e\x5f\xeb\x19\xf9\x67\xe5\x8c\x11\x97\xcd\x4c\xad\xef\xe5\xf5\xaf\xcf\x87\x9e\xf3\x24\x70\xff\xa5\xb9\x28\x59\x27\x61\x89\xc3\xd1\xff\x85\xac\x84\x51\xf0\x54\x92\xba\x2d\x4c\xa6\xdc\x71\x46\x51\x86\x69\x64\x33\xf8\x48\x80\xa4\xdc\x6e\xa0\x9a\x9f\x1b\x96\xa0\xa4\x0e\xbd\xc8\x28\x2d\xc7\xa9\x97\xb2\x97\x4b\x25\xd7\x4f\xc5\x2b\x32\xf1\xe9\x13\xe8\x61\xa3\x5a\x2a\x65\xc7\x1f\x31\x55\x0d\x54\x4e\x78\x61\xae\x40\x7a\x98\x8d\x62\x55\xd1\x1f\x7f\xc6\x14\x45\x5d\xe0\x81\xe6\x2d\x45\xcc\x82\xfb\x54\x27\xd0\xb4\x02\x71\x28\x83\xc8\xaa\x45\x19\x78\xc5\x44\xf1\x62\xca\x18\x9a\x20\x64\xf6\x41\xce\x92\x9c\x87\xd0\x44\x29\x31\x62\x61\xc1\x37\x12\x5c\xaa\x06\xaa\x94\x4b\x51\x21\xa3\xb0\x1c\x83\x5a\xb1\x8c\xbf\xf0\x48\x46\xd3\x08\x8e\x4f\x24\x16\x10\x73\xa6\x39\xe9\x81\x5b\xa3\x08\xd3\x34\xb0\x40\x7a\xa0\xc0\x2f\x08\x6e\xfb\x05\x3d\x1a\xcb\x13\x54\x00\xa3\x1e\x8c\x7c\x85\x33\x15\x95\x9e\x6f\x73\x32\x05\x99\x31\xc3\x52\xcc\xc8\xb7\xf3\xab\x69\x7e\xc9\x75\x56\x15\xdc\x8e\x47\x24\x84\x86\x5c\x67\xf4\x79\x20\x09\x8c\xb2\x1e\x15\x11\x46\x23\xed\xa5\xa3\xcc\x3a\x82\xdb\x11\xdf\x28\x83\x39\x35\x4d\x48\x69\xa0\xd1\x48\xdb\x94\x12\x18\x8d\x5e\xbb\x86\xc7\x6d\xd8\xbe\x84\x2e\x5f\x32\xf2\x31\x89\x0a\x28\x5b\x72\x91\xce\x91\x30\x86\x79\x03\xbd\x7f\x9f\x8e\x6c\x81\xb1\x8e\x39\x91\x19\x72\xbb\x78\x4d\xee\x36\xf3\xfc\xf3\xf8\x97\x7f\xad\x09\x92\x20\x98\x7e\xfb\x5a\xca\x09\x9f\x75\xc1\xd4\x40\xff\x58\x96\xcb\x3e\x08\x2c\xb1\xe2\xb2\x81\x8a\xbb\x40\x5f\x85\x91\x46\x8e\xad\x0a\xae\xda\xf4\x81\x5b\x2f\x22\xfe\x21\x10\xf9\xe5\x56\xe9\x7b\x59\x34\xf4\x9d\xe7\xdd\x66\x79\x18\xf6\xb6\x1a\xe1\x9e\xc2\xd4\x03\xb9\x6d\xdd\x94\x69\x79\x38\xb3\x5b\x5f\x9c\x61\x59\x64\x7c\x5c\xd4\xd1\xa0\xf8\xef\x7f\x94\x8b\xff\x3e\x66\x7c\xbc\x37\x7f\xd0\x38\x03\x6a\xef\x47\x97\xd1\x48\x60\x35\x89\xbd\x68\x5b\x54\xc3\x42\xfc\xc4\xa0\xb6\x2d\x20\x1c\xff\xf2\x5a\x2b\xae\xc5\xbe\x57\x46\xcf\xa5\x6d\x0e\xc1\xf3\x10\x3c\x0f\xc1\xf3\x10\x3c\x57\x82\xa7\x4d\x25\x10\x55\xd0\x42\x25\x67\x0c\xa4\xff\x37\x88\xa5\x4b\x4b\xef\x16\x35\x76\xac\x2e\x77\x0d\xa5\x2f\x04\xb2\xaf\xa5\x42\x1d\x17\x9e\x0a\xc7\xdf\x7e\x29\x44\xff\x76\xbe\xfd\x71\xfa\x9f\x72\xe9\xcf\x57\x83\x5d\x6e\xcf\x0f\xe5\x84\xcd\x62\x0e\x99\xe1\x90\x19\x0e\x99\xe1\x90\x19\x56\x32\x03\xf5\xd6\x72\xc3\x21\x35\xec\x9e\x1a\xa6\x00\x3f\x35\x35\x3c\x1f\xb4\x22\x28\xff\xcc\x60\xf9\xd7\xdb\x82\x39\x24\x98\x43\x82\x39\x24\x98\x43\x82\x59\x49\x30\xbe\xc2\x8a\x92\xff\xd2\x9c\xf2\xfa\xec\x81\x3d\x8f\xab\xf0\xcf\xec\x59\x0a\xe5\xf1\xfa\x23\x97\x4a\xc9\xe5\xbe\xdd\x2c\x51\xd1\x15\xdc\x03\x4f\x1d\x22\xef\x21\xf2\x7e\x07\x88\x43\xe4\xfd\x89\x91\xf7\xbb\x02\xc6\xbe\x82\xf3\x96\xa6\x95\xd0\x17\x9b\x84\xf0\xc0\xcb\x37\xaf\xec\xda\x91\x82\xd0\x52\xa5\x98\x3d\x8c\xdd\x3b\x37\xbf\xec\x05\xdc\x96\xbf\x53\xbf\xe6\x2f\xe1\x1a\x53\xfc\xb7\x75\x16\xf8\x0a\xe4\x2d\x67\x90\x43\x29\x2d\x4c\x8e\x71\xa0\x26\x5c\xd2\xa7\x50\xf9\xe3\xe9\xa9\x7f\x4c\x79\x71\x56\xde\x2f\xd4\x02\x89\x20\xe8\x4c\xf7\x02\x6c\x19\xb0\x28\x9b\x16\x10\x16\x34\x6e\x96\x42\x5f\x8f\x8e\xbe\xa1\xff\x41\x47\x47\x48\xbf\xe5\x11\xac\xc0\x47\x6a\x02\x88\x70\x09\xa8\xd9\xeb\xa0\xb1\x66\x8c\xe1\x44\xee\x9c\xc9\x9b\x3a\x05\xf8\xf9\xa7\xa2\x90\x7c\xbe\x58\xe6\x94\x68\x9f\x96\x4c\xe0\xd9\x82\x53\x4f\x2d\x47\xf4\x81\x0a\x1f\x66\x20\xad\x10\xd2\x18\xd4\xd1\x7f\xd0\xd1\x23\x56\x64\xa2\xff\xc1\xa8\xaf\x8e\xbe\x6d\x36\xfc\x99\xc6\xed\x8d\x5f\x67\xff\x17\x2c\x6a\xc5\xb2\xbf\xb3\x0f\x2f\xb0\x1e\x80\xa8\xd8\xd6\x1b\xdd\x55\x4f\xda\xec\x78\x2f\xec\x21\x67\x70\x0b\x8e\x96\xbc\xee\x81\xbb\x38\x48\xb2\xf3\x5b\x6c\xb4\x76\xe6\xb6\x5a\x33\x82\x11\xae\xff\xc6\xdd\x6d\x9b\xfd\x37\xfc\x7d\x7d\x0f\x73\x05\x9e\x86\xeb\xbf\xff\xb6\xe2\xac\x09\x8b\x76\xb3\xb8\x39\x33\x6c\xde\xa4\x90\xf0\xc6\x7e\x97\xfe\xbe\xbe\x0f\x7c\x58\x91\x13\x82\x6e\x20\xf4\x55\x63\xf9\xb6\x67\x1b\xbd\x4d\x0f\xce\x7f\x91\xc1\x52\x05\x5f\x6d\xb9\xe4\x98\xbf\xb5\x93\x2d\x0f\xd8\x2e\x47\x25\x39\x86\x6b\xe7\xef\xfb\x83\xc0\xdb\x18\xe6\x8d\x3c\x6b\x4f\x56\x5a\xa2\xfb\x81\x98\xf9\x52\x89\xf0\x9c\x65\x26\x80\x6d\x06\xbe\xbf\x37\xdf\x09\x4f\x06\x96\x14\xeb\x72\x31\x95\x9e\x74\x65\xc7\x71\xb8\xd3\x6b\xa0\x2e\xf7\xb4\x1d\x04\x97\x2a\x6d\xd5\x4a\x3b\xbf\x92\xfe\x34\x21\xb9\xe2\x84\xb3\x06\xfa\x7c\xde\x8b\xc7\x22\xf4\x13\xa5\x44\xc1\x05\x25\x29\x49\x92\x68\x54\xda\xf5\x42\x19\x2b\x64\x1f\x18\x10\x5d\x96\xbe\x88\xff\x95\x86\xdc\xa3\xfd\x36\x15\x8b\x89\xfd\xd4\x42\x40\x9a\xef\x3a\xbd\xbf\x81\xfd\xb0\x10\xfe\xf2\xac\x5e\x60\x70\xb9\x77\xf7\x6c\x17\xf8\xdb\x9c\xd4\xed\x36\xcd\xeb\xe6\xea\x72\xeb\x53\xee\x55\x65\x5d\xfc\xfa\x02\x81\xb0\xb1\x82\x3b\x25\xb1\x82\xf1\x22\x53\xe4\x2b\x70\x05\xc3\x0a\x62\xe9\x19\xad\xf5\x6f\xf5\x9d\x68\xd3\x52\x9b\x4e\xd8\x06\x8d\xf4\x8f\x4c\x80\x4c\xfd\xc0\x2d\xc6\xcd\x92\xc8\x22\xf0\xc1\xc6\x4e\xdd\xae\x61\x42\x3e\x7c\xa8\x54\xaa\x06\xa9\x3a\x55\x03\x3e\x94\x4a\x27\x27\xa7\xe0\x9c\x5a\x36\x39\x75\x2a\x55\x07\x97\xab\xf5\x3a\xf9\x70\x72\x62\x9c\x54\x1c\x5c\x22\xe5\x7a\xb5\x0a\xcb\xc6\x52\x8d\x09\xd4\x04\x82\x30\xf6\x8a\x4d\x3e\xb2\x89\x31\xea\xc8\x6c\xa0\x23\x25\x03\x38\x0a\x99\x12\xb3\xa3\xb8\x07\x74\x19\xdc\xba\xcf\xd4\x82\x68\xf9\x56\x9a\x7b\x7d\x8c\xdc\x66\xcd\x5a\x08\x51\x17\x8f\xf5\xa2\x63\x89\x1d\xec\xe1\xb4\x0d\xb5\x51\x3e\xae\x1d\x97\x8e\x56\x39\x7b\x01\x63\xd1\x4d\x95\x06\xea\x38\x5d\xae\x7a\x12\xfc\xec\x47\x23\x84\xb0\x1c\x67\x96\x8e\x96\x3f\x2a\x44\x56\x3e\x76\x28\x83\x5f\x8b\xa0\x48\xa6\xdf\x35\xdb\xf1\x7b\xb4\x3e\x31\xec\xfd\x3d\x0e\x24\xfb\x55\x1b\xb1\x51\x2c\x86\xb7\x15\x56\xdd\xbc\xa1\x4f\x72\x48\x2a\x62\x41\x8b\xb3\x72\x51\x04\xfe\x24\x2b\x2e\xba\xaf\x72\xad\xad\xb7\x86\x2f\x32\x4f\x84\x31\x47\x42\xc8\xd5\x13\x7a\x58\x4d\x1a\x28\x87\x7b\xa3\x04\x19\x78\x5b\xa6\x67\xdb\x7c\x57\xa6\x67\xd9\xc2\xef\x06\xd4\x2a\x46\x1f\x2f\x8b\xcb\x0d\x5d\x11\x1d\x2d\x19\x71\xad\x90\x92\xab\x29\xe9\x65\x94\xad\x6b\xc5\xdf\x28\x36\x8a\xdf\x40\x78\x56\x38\x78\xb3\xcd\x86\xbd\xbc\xb9\xfb\xdc\x6d\x5e\x7f\x5c\x11\x34\xc3\x2c\x80\x96\xe4\x6e\x63\x85\x80\x90\x43\x81\xd9\x71\xc5\xb0\x91\x16\xe1\xd7\x07\xe4\x58\xbf\x45\x76\xb3\xdf\x2d\x72\x91\x7e\x89\x25\x35\x64\x2f\xdf\x34\xbd\xaa\xf2\xc6\xb3\xaa\x0f\x60\x54\xda\x9e\x73\x4f\xc1\x5c\xe5\xa5\xbf\x70\x17\x28\xc3\x18\x78\xcd\xf8\x5e\x11\x2a\xad\x53\xc2\xbb\x4d\x39\x82\x96\x4c\x3d\xf0\xfd\x9e\xe4\x16\xe4\x57\x75\x30\x65\x81\x84\xcf\x13\x09\xfe\x84\x33\xbb\x81\x6a\x39\xba\xd6\xa4\x0d\x6a\xd5\x88\x22\x76\x47\xc0\xf6\x62\x95\xf4\x7c\xb4\xd2\x3f\xea\x51\x45\x31\xbb\x00\x86\x17\x77\x40\xb8\x67\xfb\x0d\x54\xce\xeb\x11\x75\x9a\x3f\x47\xf5\x03\x42\xc0\xf7\x33\x90\xf3\x9b\x10\xf7\xcd\x2f\xa7\xe7\x4c\xb1\xf2\x3d\x21\xfa\xa5\x1f\xf7\xb5\x23\xdc\xe5\x32\x54\x8e\x8c\x1d\x47\xe3\x5f\x6c\x20\x29\xce\x40\xae\x66\x88\x02\x02\xc7\x01\xa2\x74\xfd\x75\x47\x26\x60\x07\x2c\xbb\x97\x53\x58\x34\xc2\x25\x0b\xba\xba\x3d\x5e\x7e\x52\xd3\xc1\xdc\xc5\xba\xea\xc8\x70\x73\x01\xf1\xc7\xbe\x8f\x73\xea\xa7\x1f\x33\x72\x97\xe8\xd0\xb6\x58\x94\xde\xa7\xcb\x2b\xff\xdc\x47\x01\xf4\x6c\x54\x4a\xae\xe1\xe5\xe5\x88\x2d\x21\xaa\xb0\x7d\xce\x2e\xf1\x6a\x63\xac\xda\x45\xee\x7a\x6c\xca\xc4\xa5\xed\x05\xd4\x9d\xc2\x0a\x9c\x80\x3d\x5f\x42\xfd\x45\x95\xa8\xe0\xf6\x35\xf6\xf0\x38\xfc\x30\x9c\x64\xcf\x1b\x69\x83\x04\xfb\x36\x3e\x84\x12\x04\xa3\x04\xc7\x1e\xbf\x5b\x9d\x95\x29\x71\x56\xe1\xc4\xd5\x42\x77\xe3\xdb\xcb\xa6\x02\x2c\xaa\x96\x6f\x39\x63\xd4\x1b\x7f\x09\x19\x5e\x57\x91\x65\x40\xad\x98\x7a\x33\x52\xb4\x73\x81\x66\x57\x49\xbd\xea\x54\xc9\x09\xfe\x50\xa9\xd4\x2a\x95\x13\x83\x94\x4b\xb6\xe1\x9c\x56\xab\x95\x6a\x89\x00\x39\xad\xd7\xeb\x96\x51\x2f\x13\x7c\x7a\x5a\x3d\x2d\x63\x52\x3e\x31\x1c\xcb\xaa\xd5\xab\xc6\x49\xf9\x83\xfd\x93\x0a\xb4\x94\xfc\x4c\xfa\x48\xae\x99\xa2\x72\xa9\x94\xc9\x48\xd9\x44\xb1\x81\x12\xdf\xba\x5e\xc9\x30\x99\x1c\x92\x9d\xa3\xc3\xde\xf9\x86\xba\xf0\xeb\xb7\x1d\x8a\xc6\xdc\xee\xad\x17\x8c\x9a\xfc\xe6\xc5\x62\x58\xd7\xa5\xb7\x54\xdf\xa0\xaa\x5b\x51\x72\x39\xdb\x57\x5c\xe2\x31\x3c\x3f\xfd\xa8\xa8\x8f\xc4\xd1\x4b\xc5\xc7\xd6\xd2\x22\xb7\x05\xbd\xd5\x17\xd3\x54\xee\x86\x17\x54\xfd\x63\x74\x06\xcf\x14\x08\x7f\x4d\x01\x50\xad\xed\x58\xaf\xfc\x14\x38\xdb\x6b\x06\xb4\x87\xca\x6e\xcf\x75\x47\x7a\x2a\x15\x48\x97\x7a\x21\xb9\x2d\x31\x81\x5e\xbe\xb2\xaa\x9e\xa6\x2e\xb2\x7b\x19\x11\xdd\xd2\xcf\xab\x18\x8d\xad\x45\xac\x6d\x87\x20\xf9\x3f\x28\xc2\xd6\x8a\xff\x0f\x00\x00\xff\xff\x9d\xd0\x64\x28\xc9\x43\x00\x00"),
		},
		"/namespace.yaml": &vfsgen۰FileInfo{
			name:    "namespace.yaml",
			modTime: time.Date(2020, 6, 10, 8, 43, 48, 237812554, time.UTC),
			content: []byte("\x0a\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/loki"].(os.FileInfo),
		fs["/namespace.yaml"].(os.FileInfo),
	}
	fs["/loki"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/loki/loki.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
