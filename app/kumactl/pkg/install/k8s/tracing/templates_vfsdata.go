// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package tracing

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 6, 10, 8, 36, 30, 918996670, time.UTC),
		},
		"/jaeger": &vfsgen۰DirInfo{
			name:    "jaeger",
			modTime: time.Date(2020, 6, 12, 7, 23, 21, 774223215, time.UTC),
		},
		"/jaeger/all-in-one-template.yaml": &vfsgen۰CompressedFileInfo{
			name:             "all-in-one-template.yaml",
			modTime:          time.Date(2020, 6, 12, 7, 23, 21, 774084382, time.UTC),
			uncompressedSize: 4947,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x51\x73\xdb\x36\x0c\x7e\xd7\xaf\xc0\xd9\x2f\xdb\x5d\x24\x45\x5e\x13\xa7\xda\x93\xeb\x64\xab\xd7\x9c\xed\x8b\xdd\xf5\xba\x97\x1e\x4d\xc3\x12\x57\x8a\x54\x49\x28\xae\xd7\xeb\x7f\xdf\x49\x96\x6a\xc9\x96\xd7\x24\x4d\xb7\x4c\x6f\x22\x3f\x00\x1f\xc0\x0f\x20\xbb\xf0\x82\x59\x5c\x82\x56\x10\x13\xa5\x36\xf4\xfd\x48\x50\x9c\x2d\x3c\xae\x13\xff\x4f\x86\x11\x1a\x32\x8c\x0b\x15\x95\x7f\xee\xfb\x6c\x81\x46\x21\xa1\xf5\x17\x52\x2f\xfc\x84\x59\x42\xe3\x33\x29\x5d\xa1\x5c\xad\xb0\x02\xee\x56\x5c\xc2\x24\x95\x8c\xd0\xdb\x24\xd2\x71\xba\x4e\x17\x86\x3a\xdd\x18\x11\xc5\x04\xbd\xd3\xa0\xef\xf6\x4e\x83\xe7\x30\x8f\x11\x7e\x2b\x6c\x61\x90\x51\xac\x8d\x2d\xa0\xd7\x82\xa3\xca\x49\x66\x6a\x89\x06\x28\x46\x18\xa4\x8c\xc7\x58\xed\x9c\xc0\xef\x68\xac\xd0\x0a\x7a\xde\x29\xfc\x90\x03\x3a\xe5\x56\xe7\xc7\x9f\x61\xa3\x33\x48\xd8\x06\x94\x26\xc8\x2c\x02\xc5\xc2\xc2\x4a\x48\x04\xfc\xc8\x31\x25\xa7\x0b\x42\x01\xd7\x49\x2a\x05\x53\x1c\x61\x2d\x28\x2e\xc2\x94\x4e\x3c\x78\x5b\xba\xd0\x0b\x62\x42\x01\x03\xae\xd3\x0d\xe8\x55\x1d\x05\x8c\x0a\xba\x79\x1d\x43\xdf\x5f\xaf\xd7\x1e\x2b\x68\x7a\xda\x44\xbe\xdc\x82\xac\x7f\x3d\x1a\x5e\x8d\x67\x57\x6e\xcf\x3b\x2d\xe0\xaf\x95\x44\x6b\xc1\xe0\x87\x4c\x18\x5c\xc2\x62\x03\x2c\x4d\xa5\xe0\x6c\x21\x11\x24\x5b\x83\x36\xc0\x22\x83\xb8\x04\xd2\x39\xd3\xb5\x11\x24\x54\x74\x02\x56\xaf\x68\xcd\x0c\xc2\x52\x58\x32\x62\x91\x51\xa3\x48\x25\xaf\x3c\x3d\xdb\x80\x68\x05\x4c\x41\x67\x30\x83\xd1\xac\x03\x2f\x06\xb3\xd1\xec\x04\xde\x8c\xe6\x2f\x27\xaf\xe7\xf0\x66\x70\x73\x33\x18\xcf\x47\x57\x33\x98\xdc\xc0\x70\x32\xbe\x1c\xcd\x47\x93\xf1\x0c\x26\xbf\xc0\x60\xfc\x16\x5e\x8d\xc6\x97\x27\x80\x82\x62\x34\x80\x1f\x53\x83\xd6\x3a\xdd\x9c\xa4\xc8\x0b\x88\x4b\x0f\x66\x88\x8d\xc2\xac\xf4\x96\x90\x4d\x91\x8b\x95\xe0\x20\x99\x8a\x32\x16\x21\x44\xfa\x16\x8d\x12\x2a\x82\x14\x4d\x22\x6c\x7e\x88\x16\x98\x5a\x82\x14\x89\x20\x46\xc5\x7f\x91\x92\xd3\x6d\x1c\x89\xd3\x75\x1c\x96\x8a\xf2\xe0\x43\xb8\x0d\x9c\xf7\x42\x2d\x43\xb8\x16\x96\x1c\x41\x98\xd8\xd0\x01\x70\xa1\x0e\x62\x69\x6a\xfd\xdb\xc0\x01\x00\xd8\xa2\x2f\x31\x95\x7a\x93\xa0\xa2\x62\x31\x41\x62\x4b\x46\x2c\x2c\xfe\x00\x14\x4b\x30\x84\xad\x9e\x6b\x4b\x36\x65\x1c\x43\xf8\xf4\x09\xbc\x71\xf5\x0b\x9f\x3f\x97\x08\xc9\x16\x28\x6d\xe5\x02\xf2\xa8\x7b\x3e\x8a\x35\x6f\xd7\x48\x9e\xd0\x7e\x4b\xa8\x36\x58\x2e\x53\xad\x50\x51\x08\xbb\xfe\x2a\xf0\x79\x75\xab\xa0\x06\x0b\x05\xd9\x10\x82\x72\xc5\xa2\x44\x4e\xda\xec\x68\x25\x8c\x78\x7c\xbd\xc7\xb5\x8d\xad\x25\xc3\x08\xa3\xcd\x0e\x45\x9b\x14\x43\xb8\x41\x6e\x90\x11\x96\xcb\x55\x8f\xd7\x22\xec\x55\xb3\xad\x38\xc7\x0a\x74\x8f\x22\xdd\xb7\x50\xa5\x85\x52\xba\x14\x58\x93\x4d\x6a\x74\x82\x14\x63\x56\xb8\xb1\xdc\xb0\x3c\xd9\x0e\x99\x0c\x3b\xff\x00\x4c\xb5\xa1\x10\x3a\xc1\xf9\xf9\xc5\xf9\x0e\x57\x3f\x94\xfc\xe3\x5a\xe5\x13\x04\xcd\x5e\x50\x17\x00\x50\xdd\x36\x17\xab\xad\x6d\xd6\xc3\xc9\xf5\xf5\xd5\x70\x3e\xb9\x79\xf7\xc7\x68\xfa\x6a\x34\x7e\xf7\x72\x3e\x9f\xbe\x9b\x4e\x6e\xe6\x2d\x46\x00\xb7\x4c\x66\x39\xef\xe7\xcf\x82\xa0\x73\x80\x10\x09\x8b\xbe\x54\xb2\x1a\xf0\xbb\x3a\x85\x81\x17\xf4\xbd\xe0\xc0\xec\x68\xfd\x8b\x7a\x68\x43\xb6\x3d\x83\x2f\x69\x4f\x8b\x2a\x9d\xf5\xfb\x67\xad\xa4\x53\xa3\x49\x73\x2d\x43\x78\x7d\x39\xbd\x8b\xa7\xf3\x8b\x9f\x0e\x59\x3e\xd4\x53\xef\x71\x3c\x9d\xf5\xfb\x17\x5f\xf1\x34\x1f\xde\xc9\x53\x21\xa6\xc7\x71\x95\xcb\xe0\x01\x9e\x0c\xb2\xa5\x50\x68\xed\xd4\xe8\x05\xb6\x1d\x6e\x7e\xdd\xfd\x8a\xd4\xb6\x05\x90\x32\x8a\x43\xe8\xf8\x87\x02\x84\x52\x30\x21\x04\xcf\x7a\xe7\xcf\x5b\xf6\x85\x12\x24\x98\xbc\x44\xc9\x36\x33\xe4\x5a\x2d\x6d\x08\x67\x07\x33\xbd\x31\xce\x67\x68\x6e\x05\xc7\xaf\xce\x72\xf7\x43\x86\x66\xf3\xe4\x26\xfa\x8e\x55\x7d\x6e\x3c\x64\x74\x37\x12\xdc\x6b\xcc\x6a\xa0\x14\x10\x37\x3f\x3f\x67\xff\x4c\x2e\x4e\xeb\x4b\x47\x14\x42\xcc\x44\x48\x87\x4a\x3d\xe4\xfb\x1d\x6e\xbb\xea\x12\x1a\xca\x2c\x7f\x7e\x8e\xa6\x8f\x24\x0c\xae\xe5\x96\xfd\x93\x13\x47\x93\xd9\x37\x0b\x64\x3f\xd1\x23\x22\xd9\x47\xbb\xc4\x63\xa6\x14\xca\x03\xcd\xe4\x7d\xdc\xbf\xaf\x6c\x1a\x36\x47\x63\xb6\x6a\x34\xb7\xbd\x78\x40\xbc\x8b\xaf\xc7\xfb\x4b\xa4\xef\x85\x3a\x88\xb8\x37\x43\xef\x12\xb0\x66\xf2\xbf\x6e\x0b\x16\x55\x4f\xe4\xa7\xd4\x12\x3b\x56\xdf\xdc\x0e\xf5\x04\x8f\xb4\x42\x01\x29\xb5\xe1\x52\x6c\xc4\x8a\x0e\x24\xb2\xf7\xb2\x39\xf6\x76\xa8\x4b\xa4\x61\xd2\x8c\x95\xa7\xca\xf8\x61\x94\xbd\x57\xcf\x5d\xa2\x34\x4c\x9a\x51\x16\x42\xb1\x2f\x77\x45\x23\x48\xef\xfe\x41\x7a\x47\x53\x51\x2b\x11\xd9\xb6\x82\xdd\xb7\x89\x6b\x26\xbc\x92\x79\x08\xe3\x5d\x0b\xfc\x0b\x9d\xf6\x4d\x3d\xd5\x18\x2f\x4f\xa7\x9b\x6a\xb4\x1e\xde\x4e\x8d\xdc\xee\x7a\xa7\x7c\x97\x79\xfb\x1f\x69\xc3\xf9\x3b\x00\x00\xff\xff\xea\x73\xd2\xae\x53\x13\x00\x00"),
		},
		"/namespace.yaml": &vfsgen۰FileInfo{
			name:    "namespace.yaml",
			modTime: time.Date(2020, 6, 10, 8, 36, 30, 919044200, time.UTC),
			content: []byte("\x0a\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger"].(os.FileInfo),
		fs["/namespace.yaml"].(os.FileInfo),
	}
	fs["/jaeger"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger/all-in-one-template.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
