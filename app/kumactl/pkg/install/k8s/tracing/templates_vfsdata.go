// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package tracing

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 4, 2, 7, 17, 0, 483307686, time.UTC),
		},
		"/jaeger": &vfsgen۰DirInfo{
			name:    "jaeger",
			modTime: time.Date(2020, 4, 2, 18, 0, 25, 210770506, time.UTC),
		},
		"/jaeger/all-in-one-template.yaml": &vfsgen۰CompressedFileInfo{
			name:             "all-in-one-template.yaml",
			modTime:          time.Date(2020, 4, 2, 18, 0, 25, 209751519, time.UTC),
			uncompressedSize: 4943,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xdf\x73\xda\x46\x10\x7e\xd7\x5f\xb1\x03\x2f\xed\x8c\x41\x86\xc6\x3f\xa2\x3e\x11\xec\x36\x34\x0c\x30\x86\x34\x93\xbe\x64\x96\x63\x91\xae\x39\xdd\x29\x77\x2b\x13\x9a\xc9\xff\xde\x91\x10\x41\x02\xd1\xd8\x8e\x93\x9a\x37\xdd\x7d\xbb\xfb\xed\xde\xb7\x7b\x47\x13\x5e\xa0\xa3\x05\x18\x0d\x11\x73\xe2\x02\xdf\x0f\x25\x47\xe9\xbc\x2d\x4c\xec\xff\x8d\x14\x92\x65\x8b\x42\xea\xb0\xf8\x6a\xbd\x4f\xe7\x64\x35\x31\x39\x7f\xae\xcc\xdc\x8f\xd1\x31\x59\x1f\x95\x6a\x49\xdd\x32\x9a\xb6\xc0\xdd\x4a\x8b\x29\x4e\x14\x32\xb5\xd7\xb1\xf2\xbc\xa6\xd7\x84\xbe\x49\xd6\x56\x86\x11\x43\xf7\xb4\x73\xd1\xea\x9e\x76\x9e\xc3\x2c\x22\xf8\x23\xb7\x85\x5e\xca\x91\xb1\x2e\x87\x0e\xa5\x20\x9d\x91\x4c\xf5\x82\x2c\x70\x44\xd0\x4b\x50\x44\xb4\xdd\x39\x81\x3f\xc9\x3a\x69\x34\x74\xdb\xa7\xf0\x53\x06\x68\x14\x5b\x8d\x9f\x7f\x85\xb5\x49\x21\xc6\x35\x68\xc3\x90\x3a\x02\x8e\xa4\x83\xa5\x54\x04\xf4\x51\x50\xc2\x5e\x13\xa4\x06\x61\xe2\x44\x49\xd4\x82\x60\x25\x39\xca\xc3\x14\x4e\xda\xf0\xb6\x70\x61\xe6\x8c\x52\x03\x82\x30\xc9\x1a\xcc\xb2\x8c\x02\xe4\x9c\x6e\x56\xc7\xc0\xf7\x57\xab\x55\x1b\x73\x9a\x6d\x63\x43\x5f\x6d\x40\xce\x1f\x0e\xfa\xd7\xa3\xe9\x75\xab\xdb\x3e\xcd\xe1\xaf\xb5\x22\xe7\xc0\xd2\x87\x54\x5a\x5a\xc0\x7c\x0d\x98\x24\x4a\x0a\x9c\x2b\x02\x85\x2b\x30\x16\x30\xb4\x44\x0b\x60\x93\x31\x5d\x59\xc9\x52\x87\x27\xe0\xcc\x92\x57\x68\x09\x16\xd2\xb1\x95\xf3\x94\x2b\x45\x2a\x78\x65\xe9\xb9\x0a\xc4\x68\x40\x0d\x8d\xde\x14\x06\xd3\x06\xbc\xe8\x4d\x07\xd3\x13\x78\x33\x98\xbd\x1c\xbf\x9e\xc1\x9b\xde\xcd\x4d\x6f\x34\x1b\x5c\x4f\x61\x7c\x03\xfd\xf1\xe8\x6a\x30\x1b\x8c\x47\x53\x18\xff\x06\xbd\xd1\x5b\x78\x35\x18\x5d\x9d\x00\x49\x8e\xc8\x02\x7d\x4c\x2c\x39\xe7\x35\x33\x92\x32\x2b\x20\x2d\xda\x30\x25\xaa\x14\x66\x69\x36\x84\x5c\x42\x42\x2e\xa5\x00\x85\x3a\x4c\x31\x24\x08\xcd\x2d\x59\x2d\x75\x08\x09\xd9\x58\xba\xec\x10\x1d\xa0\x5e\x80\x92\xb1\x64\xe4\xfc\x3b\x4f\xc9\x6b\x56\x8e\xc4\x6b\x7a\x1e\x26\xb2\x38\xf8\x00\x6e\x3b\xde\x7b\xa9\x17\x01\x0c\xa5\x63\x4f\x32\xc5\x2e\xf0\x00\x5a\x50\x06\x61\x92\x38\xff\xb6\xe3\x01\x00\x6c\xd0\x57\x94\x28\xb3\x8e\x49\x73\xbe\x18\x13\xe3\x02\x19\x83\xfc\x0b\x40\x63\x4c\x01\x6c\xf4\x5c\x5a\x72\x09\x0a\x0a\xe0\xd3\x27\x68\x8f\xb6\x9f\xf0\xf9\x73\x81\x50\x38\x27\xe5\xb6\x2e\x20\x8b\xba\xe7\x23\x5f\x6b\xef\x1a\xa9\x2d\x8d\x5f\x13\xaa\x0e\x96\xc9\xd4\x68\xd2\x1c\xc0\xae\xbf\x72\x7c\x56\xdd\x6d\x50\x4b\xb9\x82\x5c\x00\x9d\x62\xc5\x91\x22\xc1\xc6\xee\x68\xc5\xc8\x22\x1a\xee\x71\xad\x63\xeb\xd8\x22\x53\xb8\xde\xa1\x78\x9d\x50\x00\x37\x24\x2c\x21\x53\xb1\xbc\xed\xf1\x52\x84\xbd\x6a\xd6\x15\xe7\x58\x81\xee\x51\xa4\xfb\x16\xaa\xb0\xd0\xda\x14\x02\xab\xb2\x49\xac\x89\x89\x23\x4a\x73\x37\x4e\x58\xcc\x92\x6d\xb0\x4d\xa9\xf1\x1f\xc0\xc4\x58\x0e\xa0\xd1\x39\x3f\xbf\x3c\xdf\xe1\xca\x87\x92\xfd\x84\xd1\xd9\x04\x21\xbb\x17\xb4\x05\x00\xa4\x6f\xab\x8b\xdb\xad\x4d\xd6\xfd\xf1\x70\x78\xdd\x9f\x8d\x6f\xde\xfd\x35\x98\xbc\x1a\x8c\xde\xbd\x9c\xcd\x26\xef\x26\xe3\x9b\x59\x8d\x11\xc0\x2d\xaa\x34\xe3\xfd\xfc\x59\xa7\xd3\x38\x40\xc8\x18\xc3\x2f\x95\xdc\x0e\xf8\xda\x3a\x6d\x7e\x47\x0b\x9f\x17\xc2\x58\x76\xf5\xd4\xbf\xe4\x3b\xc9\xcb\x73\x76\x71\x71\x56\xcb\x36\xb1\x86\x8d\x30\x2a\x80\xd7\x57\x93\xbb\x78\x3a\xbf\xfc\xa5\xf3\x68\x9e\xba\x8f\xe3\xe9\xec\xe2\xe2\xf2\x2b\x9e\x66\xfd\x3b\x79\xca\x55\xf4\x38\xae\xb2\xf3\x7f\x80\x27\x4b\xb8\x90\x9a\x9c\x9b\x58\x33\xa7\xba\xc3\xcd\xee\xb9\xdf\x89\xeb\xb6\x00\x12\xe4\x28\x80\x86\x7f\xa8\x3c\x28\x04\x13\x40\xe7\x59\xf7\xfc\x79\xcd\xbe\xd4\x92\x25\xaa\x2b\x52\xb8\x9e\x92\x30\x7a\xe1\x02\x38\x3b\x18\xe6\x95\x39\x3e\x25\x7b\x2b\x05\x7d\x75\x88\xb7\x3e\xa4\x64\xd7\x4f\x6e\x94\xef\x58\x95\x07\xc6\x43\x66\x76\x25\xc1\xbd\xc6\xdc\x4e\x92\x1c\xd2\xca\xce\xcf\xdb\x3f\x93\xcb\xd3\xf2\xd2\x11\x85\x30\xda\x90\xf8\x50\xa9\x87\x7c\xbf\xc3\x35\xb7\xbd\x7d\x86\x06\x17\x2f\x50\x65\x0f\x36\xfb\x48\xda\x10\x46\x6d\x12\x78\x72\xfa\xa8\x32\xfb\x66\x8d\xec\x27\x7a\x44\x27\xfb\xe8\x16\x8b\x08\xb5\x26\x75\x20\x9b\xac\x95\x2f\xee\xab\x9c\x8a\xcd\xd1\x98\xb5\x32\xcd\x6c\x2f\x1f\x10\xef\xf2\xeb\xf1\xfe\x91\xc9\x7b\xa9\x0f\x22\xee\x8d\xd1\xbb\x04\x2c\x99\xfc\xd0\xce\xe8\xab\x34\xfb\x47\x36\x98\x3c\x52\x5b\x60\xb8\x7d\x1e\x3f\xa5\x96\xd8\xb1\xfa\xe6\x76\x28\x27\x78\xa4\x15\x72\x48\xa1\x8d\x16\x47\x56\x2e\xf9\x40\x22\x7b\x8f\x9b\x63\xcf\x87\xb2\x44\x2a\x26\xd5\x58\x59\xaa\x28\x0e\xa3\xec\x3d\x7c\xee\x12\xa5\x62\x52\x8d\x32\x97\x1a\xbf\x5c\x17\x95\x20\xdd\xfb\x07\xe9\x1e\x4d\x45\x2f\x65\xe8\xea\x0a\x76\xdf\x26\x2e\x99\x88\xad\xcc\x03\x18\xed\x5a\xe0\x07\x74\xda\x37\xf5\x54\x65\xbc\x3c\x9d\x6e\x2a\xd1\x7a\x78\x3b\x55\x72\xbb\xeb\x9d\xf2\x5d\xe6\xed\xff\xa4\x0d\xef\xdf\x00\x00\x00\xff\xff\xd6\x34\x83\x73\x4f\x13\x00\x00"),
		},
		"/namespace.yaml": &vfsgen۰FileInfo{
			name:    "namespace.yaml",
			modTime: time.Date(2020, 4, 2, 7, 17, 0, 483699560, time.UTC),
			content: []byte("\x0a\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger"].(os.FileInfo),
		fs["/namespace.yaml"].(os.FileInfo),
	}
	fs["/jaeger"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger/all-in-one-template.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
