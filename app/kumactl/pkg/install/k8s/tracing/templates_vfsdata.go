// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package tracing

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 4, 2, 7, 17, 0, 483307686, time.UTC),
		},
		"/jaeger": &vfsgen۰DirInfo{
			name:    "jaeger",
			modTime: time.Date(2020, 4, 2, 18, 0, 25, 210770506, time.UTC),
		},
		"/jaeger/all-in-one-template.yaml": &vfsgen۰CompressedFileInfo{
			name:             "all-in-one-template.yaml",
			modTime:          time.Date(2020, 4, 3, 7, 51, 40, 312984677, time.UTC),
			uncompressedSize: 4950,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x51\x73\xda\x46\x10\x7e\xd7\xaf\xd8\x81\x97\x76\xc6\x48\x86\xc6\xc6\x51\x9f\x08\x76\x1b\x1a\x06\x18\x43\x9a\x49\x5f\x32\xcb\xb1\x48\xd7\x9c\xee\x94\xbb\x95\x09\xcd\xe4\xbf\x77\x24\x8b\x80\x40\x34\xb6\xe3\xa4\xe6\x4d\x77\xdf\xee\x7e\xbb\xf7\xed\xde\xd1\x84\x17\xe8\x68\x01\x46\x43\xcc\x9c\xba\x30\x08\x22\xc9\x71\x36\xf7\x85\x49\x82\xbf\x91\x22\xb2\x6c\x51\x48\x1d\x95\x5f\xad\xf7\xd9\x9c\xac\x26\x26\x17\xcc\x95\x99\x07\x09\x3a\x26\x1b\xa0\x52\x2d\xa9\x5b\x46\xd3\x06\xb8\x5d\x69\x31\x25\xa9\x42\x26\x7f\x9d\x28\xcf\x6b\x7a\x4d\xe8\x9b\x74\x6d\x65\x14\x33\x74\x4e\xdb\xdd\x56\xe7\xb4\xfd\x1c\x66\x31\xc1\x1f\x85\x2d\xf4\x32\x8e\x8d\x75\x05\x74\x28\x05\xe9\x9c\x64\xa6\x17\x64\x81\x63\x82\x5e\x8a\x22\xa6\xcd\xce\x09\xfc\x49\xd6\x49\xa3\xa1\xe3\x9f\xc2\x4f\x39\xa0\x51\x6e\x35\x7e\xfe\x15\xd6\x26\x83\x04\xd7\xa0\x0d\x43\xe6\x08\x38\x96\x0e\x96\x52\x11\xd0\x47\x41\x29\x7b\x4d\x90\x1a\x84\x49\x52\x25\x51\x0b\x82\x95\xe4\xb8\x08\x53\x3a\xf1\xe1\x6d\xe9\xc2\xcc\x19\xa5\x06\x04\x61\xd2\x35\x98\xe5\x2e\x0a\x90\x0b\xba\x79\x1d\xc3\x20\x58\xad\x56\x3e\x16\x34\x7d\x63\xa3\x40\xdd\x82\x5c\x30\x1c\xf4\xaf\x46\xd3\xab\x56\xc7\x3f\x2d\xe0\xaf\xb5\x22\xe7\xc0\xd2\x87\x4c\x5a\x5a\xc0\x7c\x0d\x98\xa6\x4a\x0a\x9c\x2b\x02\x85\x2b\x30\x16\x30\xb2\x44\x0b\x60\x93\x33\x5d\x59\xc9\x52\x47\x27\xe0\xcc\x92\x57\x68\x09\x16\xd2\xb1\x95\xf3\x8c\x2b\x45\x2a\x79\xe5\xe9\xb9\x0a\xc4\x68\x40\x0d\x8d\xde\x14\x06\xd3\x06\xbc\xe8\x4d\x07\xd3\x13\x78\x33\x98\xbd\x1c\xbf\x9e\xc1\x9b\xde\xf5\x75\x6f\x34\x1b\x5c\x4d\x61\x7c\x0d\xfd\xf1\xe8\x72\x30\x1b\x8c\x47\x53\x18\xff\x06\xbd\xd1\x5b\x78\x35\x18\x5d\x9e\x00\x49\x8e\xc9\x02\x7d\x4c\x2d\x39\xe7\x35\x73\x92\x32\x2f\x20\x2d\x7c\x98\x12\x55\x0a\xb3\x34\xb7\x84\x5c\x4a\x42\x2e\xa5\x00\x85\x3a\xca\x30\x22\x88\xcc\x0d\x59\x2d\x75\x04\x29\xd9\x44\xba\xfc\x10\x1d\xa0\x5e\x80\x92\x89\x64\xe4\xe2\xbb\x48\xc9\x6b\x56\x8e\xc4\x6b\x7a\x1e\xa6\xb2\x3c\xf8\x10\x6e\xda\xde\x7b\xa9\x17\x21\x0c\xa5\x63\x4f\x32\x25\x2e\xf4\x00\x5a\xb0\x0b\xc2\x34\x75\xc1\x4d\xdb\x03\x00\xb8\x45\x5f\x52\xaa\xcc\x3a\x21\xcd\xc5\x62\x42\x8c\x0b\x64\x0c\x8b\x2f\x00\x8d\x09\x85\x70\xab\xe7\x9d\x25\x97\xa2\xa0\x10\x3e\x7d\x02\x7f\xb4\xf9\x84\xcf\x9f\x4b\x84\xc2\x39\x29\xb7\x71\x01\x79\xd4\x3d\x1f\xc5\x9a\xbf\x6d\x24\x5f\x9a\xa0\x26\x54\x1d\x2c\x97\xa9\xd1\xa4\x39\x84\x6d\x7f\x15\xf8\xbc\xba\x9b\xa0\x96\x0a\x05\xb9\x10\xda\xe5\x8a\x23\x45\x82\x8d\xdd\xd2\x4a\x90\x45\x3c\xdc\xe3\x5a\xc7\xd6\xb1\x45\xa6\x68\xbd\x45\xf1\x3a\xa5\x10\xae\x49\x58\x42\xa6\x72\x79\xd3\xe3\x3b\x11\xf6\xaa\x59\x57\x9c\x63\x05\xba\x47\x91\xee\x5b\xa8\xd2\x42\x6b\x53\x0a\xac\xca\x26\xb5\x26\x21\x8e\x29\x2b\xdc\x38\x61\x31\x4f\xb6\xc1\x36\xa3\xc6\x7f\x00\x53\x63\x39\x84\x46\xfb\xfc\xfc\xe2\x7c\x8b\xdb\x3d\x94\xfc\x27\x8c\xce\x27\x08\xd9\xbd\xa0\x2d\x00\x20\x7d\x53\x5d\xdc\x6c\xdd\x66\xdd\x1f\x0f\x87\x57\xfd\xd9\xf8\xfa\xdd\x5f\x83\xc9\xab\xc1\xe8\xdd\xcb\xd9\x6c\xf2\x6e\x32\xbe\x9e\xd5\x18\x01\xdc\xa0\xca\x72\xde\xcf\x9f\xb5\xdb\x8d\x03\x84\x4c\x30\xfa\x52\xc9\xcd\x80\xdf\xd6\x29\x6c\xfb\xed\xae\xdf\x3e\x30\x3b\x5a\xff\xa2\x1e\xc6\xb2\xab\xcf\xe0\x4b\xda\x93\xa2\x4a\x67\xdd\xee\x59\x2d\xe9\xd4\x1a\x36\xc2\xa8\x10\x5e\x5f\x4e\xee\xe2\xe9\xfc\xe2\x97\x43\x96\x0f\xf5\xd4\x79\x1c\x4f\x67\xdd\xee\xc5\x57\x3c\xcd\xfa\x77\xf2\x54\x88\xe9\x71\x5c\xe5\x32\x78\x80\x27\x4b\xb8\x90\x9a\x9c\x9b\x58\x33\xa7\xba\xc3\xcd\xaf\xbb\xdf\x89\xeb\xb6\x00\x52\xe4\x38\x84\x46\x70\x28\x40\x28\x05\x13\x42\xfb\x59\xe7\xfc\x79\xcd\xbe\xd4\x92\x25\xaa\x4b\x52\xb8\x9e\x92\x30\x7a\xe1\x42\x38\x3b\x98\xe9\x95\x71\x3e\x25\x7b\x23\x05\x7d\x75\x96\xb7\x3e\x64\x64\xd7\x4f\x6e\xa2\x6f\x59\xed\xce\x8d\x87\x8c\xee\x4a\x82\x7b\x8d\xb9\x19\x28\x05\xa4\x95\x9f\x9f\xb7\x7f\x26\x17\xa7\xbb\x4b\x47\x14\xc2\x68\x23\xe2\x43\xa5\x1e\xf2\xfd\x0e\xb7\xdd\xe6\x12\x1a\x1a\x5c\xbc\x40\x95\xbf\xdb\xec\x23\x69\x43\x18\x75\x9b\xc0\x93\xd3\x47\x95\xd9\x37\x6b\x64\x3f\xd1\x23\x3a\xd9\x47\xb7\x58\xc4\xa8\x35\xa9\x03\xd9\xe4\xad\xdc\xbd\xaf\x72\x2a\x36\x47\x63\xd6\xca\x34\xb7\xbd\x78\x40\xbc\x8b\xaf\xc7\xfb\x47\xa6\xef\xa5\x3e\x88\xb8\x37\x46\xef\x12\x70\xc7\xe4\x87\x76\x46\x5f\x65\xf9\x1f\xb3\xc1\xe4\x91\xda\x02\xa3\xcd\x2b\xf9\x29\xb5\xc4\x96\xd5\x37\xb7\xc3\x6e\x82\x47\x5a\xa1\x80\x94\xda\x68\x71\x6c\xe5\x92\x0f\x24\xb2\xf7\xb8\x39\xf6\x7c\xd8\x95\x48\xc5\xa4\x1a\x2b\x4f\x15\xc5\x61\x94\xbd\x87\xcf\x5d\xa2\x54\x4c\xaa\x51\xe6\x52\xe3\x97\xeb\xa2\x12\xa4\x73\xff\x20\x9d\xa3\xa9\xe8\xa5\x8c\x5c\x5d\xc1\xee\xdb\xc4\x3b\x26\x62\x23\xf3\x10\x46\xdb\x16\xf8\x01\x9d\xf6\x4d\x3d\x55\x19\x2f\x4f\xa7\x9b\x76\x68\x3d\xbc\x9d\x2a\xb9\xdd\xf5\x4e\xf9\x2e\xf3\xf6\x7f\xd2\x86\xf7\x6f\x00\x00\x00\xff\xff\x3a\x95\xda\x44\x56\x13\x00\x00"),
		},
		"/namespace.yaml": &vfsgen۰FileInfo{
			name:    "namespace.yaml",
			modTime: time.Date(2020, 4, 2, 7, 17, 0, 483699560, time.UTC),
			content: []byte("\x0a\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger"].(os.FileInfo),
		fs["/namespace.yaml"].(os.FileInfo),
	}
	fs["/jaeger"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger/all-in-one-template.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
