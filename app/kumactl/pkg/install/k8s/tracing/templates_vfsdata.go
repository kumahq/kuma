// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package tracing

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 3, 28, 0, 12, 6, 885715801, time.UTC),
		},
		"/jaeger": &vfsgen۰DirInfo{
			name:    "jaeger",
			modTime: time.Date(2020, 3, 30, 17, 35, 43, 223126235, time.UTC),
		},
		"/jaeger/all-in-one-template.yaml": &vfsgen۰CompressedFileInfo{
			name:             "all-in-one-template.yaml",
			modTime:          time.Date(2020, 3, 30, 17, 35, 43, 220967553, time.UTC),
			uncompressedSize: 4485,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x51\x73\xda\x46\x10\x7e\xd7\xaf\xd8\x81\x97\x76\xc6\x80\xa1\xb1\xc1\xea\x13\xc1\x6e\x43\xc3\x00\x03\xb8\x99\xf4\xc5\xb3\x48\x8b\x74\xf5\x71\xa7\xdc\xad\xc0\x34\x93\xff\xde\x91\x10\x06\x81\x5c\x63\xd7\x71\xac\x37\xdd\xed\xee\xb7\xbb\xdf\x77\x7b\x57\x76\xca\xd0\xd1\xd1\xca\x88\x20\x64\x68\x9c\xd6\x9b\x95\xc6\x69\xfd\x02\x26\x21\xc1\x1f\x48\x01\x19\x68\xc7\x1c\x6a\x63\x9d\xc4\xb4\x27\x3c\x52\x96\x7c\x88\x95\x4f\x06\x38\x24\x68\x47\xe8\x85\xb4\xd9\x39\x81\x3f\xc9\x58\xa1\x15\x34\xaa\xa7\xf0\x53\x62\x50\xca\xb6\x4a\x3f\xff\x0a\x2b\x1d\xc3\x1c\x57\xa0\x34\x43\x6c\x09\x38\x14\x16\x66\x42\x12\xd0\x9d\x47\x11\x3b\x65\x10\x0a\x3c\x3d\x8f\xa4\x40\xe5\x11\x2c\x05\x87\x29\x4c\x16\xa4\x0a\x9f\xb3\x10\x7a\xca\x28\x14\x20\x78\x3a\x5a\x81\x9e\xed\x5a\x01\x72\x9a\x6e\xc8\x1c\xb9\xb5\xda\x72\xb9\xac\x62\x9a\x66\x55\x9b\xa0\x26\xd7\x46\xb6\xd6\xeb\x76\xae\xfa\xe3\xab\x4a\xa3\x7a\x9a\x9a\x5f\x2b\x49\xd6\x82\xa1\x2f\xb1\x30\xe4\xc3\x74\x05\x18\x45\x52\x78\x38\x95\x04\x12\x97\xa0\x0d\x60\x60\x88\x7c\x60\x9d\x64\xba\x34\x82\x85\x0a\x4e\xc0\xea\x19\x2f\xd1\x10\xf8\xc2\xb2\x11\xd3\x98\x73\x4d\xca\xf2\x4a\xca\xb3\x39\x13\xad\x00\x15\x94\xda\x63\xe8\x8e\x4b\xf0\xbe\x3d\xee\x8e\x4f\xe0\x53\x77\xf2\x61\x70\x3d\x81\x4f\xed\xd1\xa8\xdd\x9f\x74\xaf\xc6\x30\x18\x41\x67\xd0\xbf\xec\x4e\xba\x83\xfe\x18\x06\xbf\x41\xbb\xff\x19\x3e\x76\xfb\x97\x27\x40\x82\x43\x32\x40\x77\x91\x21\x6b\x9d\x72\x92\xa4\x48\x1a\x48\x7e\x15\xc6\x44\xb9\xc6\xcc\xf4\x3a\x21\x1b\x91\x27\x66\xc2\x03\x89\x2a\x88\x31\x20\x08\xf4\x82\x8c\x12\x2a\x80\x88\xcc\x5c\xd8\x84\x44\x0b\xa8\x7c\x90\x62\x2e\x18\x39\xfd\x4f\x4b\x72\xca\x39\x4a\x9c\xb2\xe3\x60\x24\x32\xe2\x5d\x58\xd4\x9d\x5b\xa1\x7c\x17\x7a\xc2\xb2\x23\x98\xe6\xd6\x75\x00\x2a\xb0\x6b\x44\x77\x4c\x2a\xc5\xa8\x2d\xea\x53\x62\xac\x3b\x00\x00\x6b\xc7\x4b\x8a\xa4\x5e\xcd\x49\x71\xba\x38\x27\x46\x1f\x19\xdd\xf4\x0f\x40\xe1\x9c\x5c\xf8\x3b\x95\xe7\xce\x92\x8d\xd0\x23\x17\xbe\x7e\x85\x6a\x7f\xf3\x0b\xdf\xbe\x65\x16\x12\xa7\x24\xed\x26\x04\x24\xcc\xee\xc5\x48\xd7\xaa\xb7\xf1\x94\x8c\x22\x26\x5b\x15\xba\x56\x00\x55\x64\x96\x28\x56\x2b\x52\xec\x02\x4a\x59\x11\xaa\xa2\x15\xa5\xf6\x49\xa3\x37\xa0\x86\x52\x31\x59\x17\xea\xd9\x8a\x65\x83\x4c\xc1\x6a\x9b\x16\xaf\x22\x72\x61\x44\x9e\x21\x64\xca\x96\x99\xe6\x91\x44\xa6\xad\xd9\x7e\x4b\x8a\x2a\x7c\xa8\xca\x27\x54\xfa\xd4\x6a\x33\x0f\xa5\x74\x26\x98\x7c\x36\x91\xd1\x73\xe2\x90\xe2\x34\x8c\xf5\x0c\x26\xc5\x96\xd8\xc4\x54\xfa\x0f\xc3\x48\x1b\x76\xa1\x54\x3f\x3f\x6f\x9d\x6f\xed\x76\x3b\x9b\x7c\x9e\x56\xc9\x44\x20\xb3\x07\x5a\x01\x00\x52\x8b\xfc\xe2\x66\x6b\x5d\x75\x67\xd0\xeb\x5d\x75\x26\x83\xd1\xcd\x5f\xdd\xe1\xc7\x6e\xff\xe6\xc3\x64\x32\xbc\x19\x0e\x46\x93\x02\x27\x80\x05\xca\x38\xc9\xfb\xe2\x5d\xbd\x5e\x3a\xb0\x10\x73\x0c\xee\x3b\xc9\x06\x3d\xa1\x82\x5a\x61\x9f\xd6\xdf\x83\x8d\x4f\x1b\xa1\x0d\xdb\xe2\xd4\xef\xeb\x1d\xa6\xed\x39\x6b\x36\xcf\x0a\xb3\x8d\x8c\x66\xed\x69\xe9\xc2\xf5\xe5\xf0\x98\x48\xe7\xad\x5f\xea\x2f\x16\xa9\xf1\x32\x91\xce\x9a\xcd\xd6\x23\x91\x26\x9d\xa3\x22\xa5\x2a\x7a\x99\x50\x09\xff\xcf\x88\x64\x08\x7d\xa1\xc8\xda\xa1\xd1\x53\x2a\x22\x37\xb9\xb7\x7e\x27\x2e\xda\x02\x88\x90\x43\x17\x4a\xb5\x43\xe5\x41\x26\x18\x17\xea\xef\x1a\xe7\x17\x05\xfb\x42\x09\x16\x28\x2f\x49\xe2\x6a\x4c\x9e\x56\xbe\x75\xe1\xec\x60\x38\x2f\x76\x87\xf1\x98\xcc\x42\x78\xf4\xe8\x24\xae\x7c\x89\xc9\xac\xde\xdc\x3c\xde\x66\xb5\x3b\x30\xf6\xce\xd5\x66\x10\xa4\xc6\x95\xa4\xfd\xce\x7e\x4b\x5b\xa7\xce\xe3\x04\x33\x9a\x80\xf8\x50\x68\x96\x24\x79\xac\x8d\xfb\x3d\xaf\x9a\xcd\xe5\xd1\xd3\xe8\xbf\x47\x99\xbc\x9f\xcc\x0b\x51\xeb\x69\xb9\x2e\xe0\xcd\xd1\x9b\xcf\xec\x08\x8a\xf7\x2b\xaa\xb0\x17\xa2\x52\x24\x0f\x18\x4f\x0e\x51\xf3\xa9\xa4\xe7\x7c\x1e\xc4\x2c\x54\x58\xe2\xdb\x7a\x06\x5e\xeb\x71\xbc\x7f\x44\x74\x2b\xd4\x01\xe2\xde\x00\x3b\x06\x70\xc7\xe5\x55\x45\xdd\x91\xb1\x65\x32\xdd\xe1\x0b\x29\x1a\x83\xcd\xeb\xf2\x2d\xa9\x79\x9b\xd5\x11\x4a\x4e\x8d\x33\x6a\x2b\x1c\x1a\x31\xe3\x03\x86\xf7\x5e\x05\x0f\xdd\xbb\xbb\x0c\xe7\x5c\xf2\x58\x49\xa6\xe8\x1d\xa2\xec\xbd\x18\x8e\x41\xc9\xb9\xe4\x51\xa6\x42\xe1\xfd\x45\x92\x03\x69\x3c\x1d\xa4\xf1\x60\x29\x6a\x26\x02\x5b\xd4\xb0\xa7\x9e\xc1\x1d\x17\x6f\xa3\x52\x17\xfa\x5b\x05\xbf\xc2\x41\xf9\x5f\x47\x22\x37\x1d\x5e\x4b\xea\x3b\xa0\xcf\x99\xda\xdf\x65\xa2\xfd\x20\xfa\xfe\x0d\x00\x00\xff\xff\xa4\x85\xe6\xe5\x85\x11\x00\x00"),
		},
		"/namespace.yaml": &vfsgen۰FileInfo{
			name:    "namespace.yaml",
			modTime: time.Date(2020, 3, 28, 0, 11, 28, 367840899, time.UTC),
			content: []byte("\x0a\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger"].(os.FileInfo),
		fs["/namespace.yaml"].(os.FileInfo),
	}
	fs["/jaeger"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger/all-in-one-template.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
