// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package tracing

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 7, 31, 6, 15, 49, 749327490, time.UTC),
		},
		"/jaeger": &vfsgen۰DirInfo{
			name:    "jaeger",
			modTime: time.Date(2021, 3, 4, 9, 42, 10, 184838734, time.UTC),
		},
		"/jaeger/all-in-one-template.yaml": &vfsgen۰CompressedFileInfo{
			name:             "all-in-one-template.yaml",
			modTime:          time.Date(2021, 3, 4, 9, 42, 10, 184773748, time.UTC),
			uncompressedSize: 4945,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd4\x56\xdf\x93\xda\x36\x10\x7e\xf7\x5f\xb1\x03\x2f\xed\xcc\xd9\x3e\x68\xee\x8e\xb8\x4f\x84\xbb\x36\x34\x0c\x30\x40\x9a\x49\x5f\x32\x42\x2c\xb6\x1a\x59\x72\xa4\x35\x84\x66\xf2\xbf\x77\x6c\xec\x03\x83\xe9\xfd\xc8\xa5\xbd\xfa\xcd\xd2\xb7\xbb\xdf\xae\xbe\x5d\xa9\x09\xaf\x98\xc5\x05\x68\x05\x11\x51\x62\x03\xdf\x0f\x05\x45\xe9\xdc\xe3\x3a\xf6\xff\x64\x18\xa2\x21\xc3\xb8\x50\x61\xf1\xe7\x7e\x4c\xe7\x68\x14\x12\x5a\x7f\x2e\xf5\xdc\x8f\x99\x25\x34\x3e\x93\xd2\x15\xca\xd5\x0a\x4b\xe0\x6e\xc5\x25\x8c\x13\xc9\x08\xbd\x4d\x2c\x1d\xa7\xe9\x34\xa1\xa7\x93\x8d\x11\x61\x44\xd0\x3e\x6f\x5d\xb9\xed\xf3\xd6\x4b\x98\x45\x08\xbf\xe5\xb6\xd0\x4d\x29\xd2\xc6\xe6\xd0\x81\xe0\xa8\x32\x92\xa9\x5a\xa0\x01\x8a\x10\xba\x09\xe3\x11\x96\x3b\x67\xf0\x3b\x1a\x2b\xb4\x82\xb6\x77\x0e\x3f\x64\x80\x46\xb1\xd5\xf8\xf1\x67\xd8\xe8\x14\x62\xb6\x01\xa5\x09\x52\x8b\x40\x91\xb0\xb0\x14\x12\x01\x3f\x73\x4c\xc8\x69\x82\x50\xc0\x75\x9c\x48\xc1\x14\x47\x58\x0b\x8a\xf2\x30\x85\x13\x0f\xde\x17\x2e\xf4\x9c\x98\x50\xc0\x80\xeb\x64\x03\x7a\xb9\x8f\x02\x46\x39\xdd\xac\x8e\x81\xef\xaf\xd7\x6b\x8f\xe5\x34\x3d\x6d\x42\x5f\x6e\x41\xd6\x1f\xf4\x7b\x37\xc3\xe9\x8d\xdb\xf6\xce\x73\xf8\x5b\x25\xd1\x5a\x30\xf8\x29\x15\x06\x17\x30\xdf\x00\x4b\x12\x29\x38\x9b\x4b\x04\xc9\xd6\xa0\x0d\xb0\xd0\x20\x2e\x80\x74\xc6\x74\x6d\x04\x09\x15\x9e\x81\xd5\x4b\x5a\x33\x83\xb0\x10\x96\x8c\x98\xa7\x54\x29\x52\xc1\x2b\x4b\xcf\x56\x20\x5a\x01\x53\xd0\xe8\x4e\xa1\x3f\x6d\xc0\xab\xee\xb4\x3f\x3d\x83\x77\xfd\xd9\xeb\xd1\xdb\x19\xbc\xeb\x4e\x26\xdd\xe1\xac\x7f\x33\x85\xd1\x04\x7a\xa3\xe1\x75\x7f\xd6\x1f\x0d\xa7\x30\xfa\x05\xba\xc3\xf7\xf0\xa6\x3f\xbc\x3e\x03\x14\x14\xa1\x01\xfc\x9c\x18\xb4\xd6\x69\x66\x24\x45\x56\x40\x5c\x78\x30\x45\xac\x14\x66\xa9\xb7\x84\x6c\x82\x5c\x2c\x05\x07\xc9\x54\x98\xb2\x10\x21\xd4\x2b\x34\x4a\xa8\x10\x12\x34\xb1\xb0\xd9\x21\x5a\x60\x6a\x01\x52\xc4\x82\x18\xe5\xff\x79\x4a\x4e\xb3\x72\x24\x4e\xd3\x71\x58\x22\x8a\x83\x0f\x60\xd5\x72\x3e\x0a\xb5\x08\x60\x20\x2c\x39\x82\x30\xb6\x81\x03\xe0\xc2\x3e\x88\x25\x89\xf5\x57\x2d\x07\x00\x60\x8b\xbe\xc6\x44\xea\x4d\x8c\x8a\xf2\xc5\x18\x89\x2d\x18\xb1\x20\xff\x03\x50\x2c\xc6\x00\xb6\x7a\xde\x5b\xb2\x09\xe3\x18\xc0\x97\x2f\xe0\x0d\xcb\x5f\xf8\xfa\xb5\x40\x48\x36\x47\x69\x4b\x17\x90\x45\x3d\xf0\x91\xaf\x79\xbb\x46\xf2\x84\xf6\x6b\x42\xd5\xc1\x32\x99\x6a\x85\x8a\x02\xd8\xf5\x57\x8e\xcf\xaa\x5b\x06\x35\x98\x2b\xc8\x06\xd0\x2a\x56\x2c\x4a\xe4\xa4\xcd\x8e\x56\xcc\x88\x47\x83\x03\xae\x75\x6c\x2d\x19\x46\x18\x6e\x76\x28\xda\x24\x18\xc0\x04\xb9\x41\x46\x58\x2c\x97\x3d\xbe\x17\xe1\xa0\x9a\x75\xc5\x39\x55\xa0\x07\x14\xe9\xa1\x85\x2a\x2c\x94\xd2\x85\xc0\xaa\x6c\x12\xa3\x63\xa4\x08\xd3\xdc\x8d\xe5\x86\x65\xc9\x36\xc8\xa4\xd8\xf8\x07\x60\xa2\x0d\x05\xd0\x68\x5d\x5e\x76\x2e\x77\xb8\xfd\x43\xc9\x3e\xae\x55\x36\x41\xd0\x1c\x04\x75\x01\x00\xd5\xaa\xba\x58\x6e\x6d\xb3\xee\x8d\x06\x83\x9b\xde\x6c\x34\xf9\xf0\x47\x7f\xfc\xa6\x3f\xfc\xf0\x7a\x34\x9d\x7d\x18\x8f\x26\xb3\x1a\x23\x80\x15\x93\x69\xc6\xfb\xe5\x8b\x56\xab\x71\x84\x10\x31\x0b\x6f\x2b\x59\x0e\xf8\x5d\x9d\x82\x96\xd7\x6e\x1f\x19\x9d\xac\x7e\x5e\x0d\x6d\xc8\xd6\xf3\xbf\x4d\x7a\x9c\xd7\xe8\xe2\xea\xea\xa2\x96\x72\x62\x34\x69\xae\x65\x00\x6f\xaf\xc7\xf7\xf1\x74\xd9\xf9\xa9\xf5\x64\x9e\xda\x4f\xe3\xe9\xe2\xea\xaa\x73\x87\xa7\x59\xef\x5e\x9e\x72\x29\x3d\x8d\xab\x4c\x04\x8f\xf0\x64\x90\x2d\x84\x42\x6b\xc7\x46\xcf\xb1\xee\x70\xb3\xcb\xee\x57\xa4\xa0\xde\x39\xa3\x28\x80\x86\xdf\xa8\xdf\xdd\x26\xf9\xa2\x7d\xf9\xb2\x66\x5f\x28\x41\x82\xc9\x6b\x94\x6c\x33\x45\xae\xd5\xc2\x06\x70\x71\x34\xd1\x2b\xc3\x7c\x8a\x66\x25\x38\xde\x39\xc9\xdd\x4f\x29\x9a\xcd\xb3\x9b\xe7\x3b\x56\xfb\x53\xe3\x31\x83\xbb\x92\xe0\x41\x63\x96\xe3\x24\x87\xb8\xd9\xf9\x39\x87\x67\xd2\x39\x77\xee\x56\x08\x31\x13\x22\x1d\x2b\xf5\x98\xef\x77\xb8\xeb\xca\x2b\xa8\x27\xd3\xec\xf1\xd9\x1f\x3f\x91\x30\xb8\x96\x5b\xf6\xcf\x4e\x1c\x55\x66\xdf\x2c\x90\xc3\x44\x4f\x88\xe4\x10\xed\x12\x8f\x98\x52\x28\x9d\xba\x3e\xbe\x7a\xa8\x6c\x2a\x36\x27\x63\xd6\x6a\x34\xb3\xed\x3c\x22\x5e\xe7\xee\x78\x7f\x89\xe4\xa3\x50\x47\x11\x0f\x66\xe8\x7d\x02\xee\x99\xfc\xaf\xdb\x82\x85\xe5\x03\xf9\x59\xbd\x7f\x6f\x59\x7d\x73\x3b\xec\x27\x78\xa2\x15\x72\x48\xa1\x0d\x97\x22\x23\x96\x74\x24\x91\x83\x97\xcd\xa9\xb7\xc3\xbe\x44\x2a\x26\xd5\x58\x59\xaa\x8c\x1f\x47\x39\x78\xf5\xdc\x27\x4a\xc5\xa4\x1a\x65\x2e\x14\xbb\xbd\x2b\x2a\x41\xda\x0f\x0f\xd2\x3e\x99\x8a\x5a\x8a\xd0\xd6\x15\xec\xa1\x4d\xbc\x67\xc2\x4b\x99\x07\x30\xdc\xb5\xc0\xbf\xd0\x69\xdf\xd4\x53\x95\xf1\xf2\x7c\xba\x69\x8f\xd6\xe3\xdb\xa9\x92\xdb\x7d\xef\x94\xef\x32\x6f\xff\x23\x6d\x38\x7f\x07\x00\x00\xff\xff\xab\x15\xdd\xe3\x51\x13\x00\x00"),
		},
		"/namespace.yaml": &vfsgen۰FileInfo{
			name:    "namespace.yaml",
			modTime: time.Date(2020, 7, 31, 6, 15, 49, 749361115, time.UTC),
			content: []byte("\x0a\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger"].(os.FileInfo),
		fs["/namespace.yaml"].(os.FileInfo),
	}
	fs["/jaeger"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger/all-in-one-template.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
