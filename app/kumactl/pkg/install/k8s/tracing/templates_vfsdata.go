// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package tracing

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 3, 31, 12, 24, 4, 48463277, time.UTC),
		},
		"/jaeger": &vfsgen۰DirInfo{
			name:    "jaeger",
			modTime: time.Date(2020, 3, 31, 12, 24, 4, 48062124, time.UTC),
		},
		"/jaeger/all-in-one-template.yaml": &vfsgen۰CompressedFileInfo{
			name:             "all-in-one-template.yaml",
			modTime:          time.Date(2020, 3, 31, 12, 24, 4, 48383676, time.UTC),
			uncompressedSize: 4519,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xd1\x73\xda\xc6\x13\x7e\xd7\x5f\xb1\x03\x2f\xbf\xdf\x8c\x01\x43\x63\x43\xd4\x27\x82\xdd\x86\x86\x01\x06\x48\x33\xe9\x8b\x67\x91\x16\xe9\xea\xd3\x9d\x72\xb7\x02\xd3\x4c\xfe\xf7\x8e\x84\x30\x08\xe4\x1a\xbb\x4e\x6a\xbd\xe9\x6e\x77\xbf\x6f\xf7\xdb\xdb\xbb\xaa\x53\x85\x9e\x8e\xd7\x46\x04\x21\x43\xeb\xbc\xd9\xae\xb5\xce\x9b\x6f\x61\x16\x12\xfc\x86\x14\x90\x81\x6e\xc2\xa1\x36\xd6\x49\x4d\x07\xc2\x23\x65\xc9\x87\x44\xf9\x64\x80\x43\x82\x6e\x8c\x5e\x48\xdb\x9d\x33\xf8\x9d\x8c\x15\x5a\x41\xab\x7e\x0e\xff\x4b\x0d\x2a\xf9\x56\xe5\xff\x3f\xc3\x5a\x27\x10\xe1\x1a\x94\x66\x48\x2c\x01\x87\xc2\xc2\x42\x48\x02\xba\xf3\x28\x66\xa7\x0a\x42\x81\xa7\xa3\x58\x0a\x54\x1e\xc1\x4a\x70\x98\xc1\xe4\x41\xea\xf0\x39\x0f\xa1\xe7\x8c\x42\x01\x82\xa7\xe3\x35\xe8\xc5\xbe\x15\x20\x67\x74\x43\xe6\xd8\x6d\x34\x56\xab\x55\x1d\x33\x9a\x75\x6d\x82\x86\xdc\x18\xd9\xc6\xa0\xdf\xbb\x1e\x4e\xaf\x6b\xad\xfa\x79\x66\xfe\x51\x49\xb2\x16\x0c\x7d\x49\x84\x21\x1f\xe6\x6b\xc0\x38\x96\xc2\xc3\xb9\x24\x90\xb8\x02\x6d\x00\x03\x43\xe4\x03\xeb\x94\xe9\xca\x08\x16\x2a\x38\x03\xab\x17\xbc\x42\x43\xe0\x0b\xcb\x46\xcc\x13\x2e\x14\x29\xe7\x95\xa6\x67\x0b\x26\x5a\x01\x2a\xa8\x74\xa7\xd0\x9f\x56\xe0\x5d\x77\xda\x9f\x9e\xc1\xa7\xfe\xec\xfd\xe8\xe3\x0c\x3e\x75\x27\x93\xee\x70\xd6\xbf\x9e\xc2\x68\x02\xbd\xd1\xf0\xaa\x3f\xeb\x8f\x86\x53\x18\xfd\x02\xdd\xe1\x67\xf8\xd0\x1f\x5e\x9d\x01\x09\x0e\xc9\x00\xdd\xc5\x86\xac\x75\xaa\x29\x49\x91\x16\x90\xfc\x3a\x4c\x89\x0a\x85\x59\xe8\x0d\x21\x1b\x93\x27\x16\xc2\x03\x89\x2a\x48\x30\x20\x08\xf4\x92\x8c\x12\x2a\x80\x98\x4c\x24\x6c\x2a\xa2\x05\x54\x3e\x48\x11\x09\x46\xce\xfe\xb3\x94\x9c\x6a\x41\x12\xa7\xea\x38\x18\x8b\x5c\x78\x17\x96\x4d\xe7\x56\x28\xdf\x85\x81\xb0\xec\x08\xa6\xc8\xba\x0e\x40\x0d\xf6\x8d\xe8\x8e\x49\x65\x18\x8d\x65\x73\x4e\x8c\x4d\x07\x00\x60\xe3\x78\x45\xb1\xd4\xeb\x88\x14\x67\x8b\x11\x31\xfa\xc8\xe8\x66\x7f\x00\x0a\x23\x72\xe1\xcf\xac\x3d\xf7\x96\x6c\x8c\x1e\xb9\xf0\xf5\x2b\xd4\x87\xdb\x5f\xf8\xf6\x2d\xb7\x90\x38\x27\x69\xb7\x21\x20\x55\xf6\x20\x46\xb6\x56\xbf\x4d\xe6\x64\x14\x31\xd9\xba\xd0\x8d\x12\xa8\x32\xb3\xb4\x63\xb5\x22\xc5\x2e\xa0\x94\x35\xa1\x6a\x5a\x51\x66\x9f\x16\x7a\x0b\x6a\x28\x6b\x26\xeb\x42\x33\x5f\xb1\x6c\x90\x29\x58\xef\x68\xf1\x3a\x26\x17\x26\xe4\x19\x42\xa6\x7c\x99\x29\x8a\x25\x32\xed\xcc\x0e\x4b\x52\x96\xe1\x43\x59\x3e\x21\xd3\xa7\x66\x9b\x7b\x28\xa5\xf3\x86\x29\xb2\x89\x8d\x8e\x88\x43\x4a\xb2\x30\xd6\x33\x98\x26\x5b\x61\x93\x50\xe5\x1f\x0c\x63\x6d\xd8\x85\x4a\xf3\xf2\xb2\x73\xb9\xb3\xdb\xaf\x6c\xfa\x79\x5a\xa5\x13\x81\xcc\x01\x68\x0d\x00\x48\x2d\x8b\x8b\xdb\xad\x4d\xd6\xbd\xd1\x60\x70\xdd\x9b\x8d\x26\x37\x7f\xf4\xc7\x1f\xfa\xc3\x9b\xf7\xb3\xd9\xf8\x66\x3c\x9a\xcc\x4a\x9c\x00\x96\x28\x93\x94\xf7\xdb\x37\xcd\x66\xe5\xc8\x42\x44\x18\xdc\x57\x92\x0d\x7a\x42\x05\x8d\xd2\x3a\x6d\xbe\x07\x0b\x9f\x15\x42\x1b\xb6\xe5\xd4\xef\xf3\x1d\x67\xe5\xb9\x68\xb7\x2f\x4a\xd9\xc6\x46\xb3\xf6\xb4\x74\xe1\xe3\xd5\xf8\x94\x48\x97\x9d\x9f\x9a\x2f\x16\xa9\xf5\x32\x91\x2e\xda\xed\xce\x23\x91\x66\xbd\x93\x22\x65\x5d\xf4\x32\xa1\x52\xfd\x9f\x11\xc9\x10\xfa\x42\x91\xb5\x63\xa3\xe7\x54\x26\x6e\x7a\x6f\xfd\x4a\x5c\xb6\x05\x10\x23\x87\x2e\x54\x1a\xc7\x9d\x07\x79\xc3\xb8\xd0\x7c\xd3\xba\x7c\x5b\xb2\x2f\x94\x60\x81\xf2\x8a\x24\xae\xa7\xe4\x69\xe5\x5b\x17\x2e\x8e\x86\xf3\x72\x7f\x18\x4f\xc9\x2c\x85\x47\x8f\x4e\xe2\xda\x97\x84\xcc\xfa\xd5\xcd\xe3\x1d\xab\xfd\x81\x71\x70\xae\xb6\x83\x20\x33\xae\xa5\xe5\x77\x0e\x4b\xda\x39\x77\x1e\x17\x98\xd1\x04\xc4\xc7\x8d\x66\x49\x92\xc7\xda\xb8\xdf\xf3\xaa\xd9\x5e\x1e\x03\x8d\xfe\x3b\x94\xe9\xfb\xc9\xbc\x90\xb4\x9e\x96\x9b\x04\x5e\x9d\xbc\x45\x66\x27\x48\x7c\x98\x51\x8d\xbd\x10\x95\x22\x79\xa4\x78\x7a\x88\xda\x4f\x15\xbd\xe0\xf3\x20\x66\x69\x87\xa5\xbe\x9d\x67\xe0\x75\x1e\xc7\xfb\x4b\xc4\xb7\x42\x1d\x21\x1e\x0c\xb0\x53\x00\xf7\x5c\x7e\x68\x53\xf7\x64\x62\x99\x4c\x7f\xfc\x42\x1d\x8d\xc1\xf6\x75\xf9\x9a\xba\x79\xc7\xea\x84\x4e\xce\x8c\x73\x69\x6b\x1c\x1a\xb1\xe0\x23\x85\x0f\x5e\x05\x0f\xdd\xbb\xfb\x0a\x17\x5c\x8a\x58\x29\x53\xf4\x8e\x51\x0e\x5e\x0c\xa7\xa0\x14\x5c\x8a\x28\x73\xa1\xf0\xfe\x22\x29\x80\xb4\x9e\x0e\xd2\x7a\x30\x15\xb5\x10\x81\x2d\x2b\xd8\x53\xcf\xe0\x9e\x8b\xb7\xed\x52\x17\x86\xbb\x0e\xfe\x01\x07\xe5\x5f\x1d\x89\xc2\x74\x78\x3d\x87\x61\x8f\xd6\x73\xe6\xfa\x77\x99\x79\xff\x91\xc0\x7f\x07\x00\x00\xff\xff\x07\xcb\xbb\x47\xa7\x11\x00\x00"),
		},
		"/namespace.yaml": &vfsgen۰FileInfo{
			name:    "namespace.yaml",
			modTime: time.Date(2020, 3, 31, 12, 24, 4, 48993049, time.UTC),
			content: []byte("\x0a\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger"].(os.FileInfo),
		fs["/namespace.yaml"].(os.FileInfo),
	}
	fs["/jaeger"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger/all-in-one-template.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
