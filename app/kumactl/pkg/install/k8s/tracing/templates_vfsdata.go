// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package tracing

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Templates statically implements the virtual filesystem provided to vfsgen.
var Templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 4, 2, 7, 17, 0, 483307686, time.UTC),
		},
		"/jaeger": &vfsgen۰DirInfo{
			name:    "jaeger",
			modTime: time.Date(2020, 4, 2, 7, 17, 0, 482904877, time.UTC),
		},
		"/jaeger/all-in-one-template.yaml": &vfsgen۰CompressedFileInfo{
			name:             "all-in-one-template.yaml",
			modTime:          time.Date(2020, 4, 2, 7, 17, 0, 483216946, time.UTC),
			uncompressedSize: 4567,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xd1\x73\xda\xc6\x13\x7e\xd7\x5f\xb1\x03\x2f\xbf\xdf\x8c\x01\x43\x63\x43\xd4\x27\x82\xdd\x86\x86\x01\x06\x48\x33\xe9\x4b\x66\x91\x16\xe9\x9a\xd3\xdd\xe5\x6e\x05\xa1\x99\xfc\xef\x1d\x09\x08\x08\xe4\x1a\xbb\x4e\x6a\xbd\xe9\x6e\x77\xbf\x6f\xbf\xdd\xdb\xbb\xaa\x57\x85\x9e\x36\x6b\x2b\xa2\x98\xa1\x75\xd9\x6c\xd7\x5a\x97\xcd\x97\x30\x8b\x09\x7e\x43\x8a\xc8\x42\x37\xe5\x58\x5b\xe7\x65\xa6\x03\x11\x90\x72\x14\x42\xaa\x42\xb2\xc0\x31\x41\xd7\x60\x10\xd3\x6e\xe7\x02\x7e\x27\xeb\x84\x56\xd0\xaa\x5f\xc2\xff\x32\x83\xca\x76\xab\xf2\xff\x9f\x61\xad\x53\x48\x70\x0d\x4a\x33\xa4\x8e\x80\x63\xe1\x60\x21\x24\x01\x7d\x0e\xc8\xb0\x57\x05\xa1\x20\xd0\x89\x91\x02\x55\x40\xb0\x12\x1c\xe7\x30\xdb\x20\x75\x78\xbf\x0d\xa1\xe7\x8c\x42\x01\x42\xa0\xcd\x1a\xf4\xe2\xd0\x0a\x90\x73\xba\x31\xb3\xf1\x1b\x8d\xd5\x6a\x55\xc7\x9c\x66\x5d\xdb\xa8\x21\x37\x46\xae\x31\xe8\xf7\x6e\x87\xd3\xdb\x5a\xab\x7e\x99\x9b\xbf\x55\x92\x9c\x03\x4b\x9f\x52\x61\x29\x84\xf9\x1a\xd0\x18\x29\x02\x9c\x4b\x02\x89\x2b\xd0\x16\x30\xb2\x44\x21\xb0\xce\x98\xae\xac\x60\xa1\xa2\x0b\x70\x7a\xc1\x2b\xb4\x04\xa1\x70\x6c\xc5\x3c\xe5\x82\x48\x5b\x5e\x59\x7a\xae\x60\xa2\x15\xa0\x82\x4a\x77\x0a\xfd\x69\x05\x5e\x75\xa7\xfd\xe9\x05\xbc\xeb\xcf\x5e\x8f\xde\xce\xe0\x5d\x77\x32\xe9\x0e\x67\xfd\xdb\x29\x8c\x26\xd0\x1b\x0d\x6f\xfa\xb3\xfe\x68\x38\x85\xd1\x2f\xd0\x1d\xbe\x87\x37\xfd\xe1\xcd\x05\x90\xe0\x98\x2c\xd0\x67\x63\xc9\x39\xaf\x9a\x91\x14\x99\x80\x14\xd6\x61\x4a\x54\x10\x66\xa1\x37\x84\x9c\xa1\x40\x2c\x44\x00\x12\x55\x94\x62\x44\x10\xe9\x25\x59\x25\x54\x04\x86\x6c\x22\x5c\x56\x44\x07\xa8\x42\x90\x22\x11\x8c\x9c\xff\xe7\x29\x79\xd5\x42\x49\xbc\xaa\xe7\xa1\x11\xdb\xc2\xfb\xb0\x6c\x7a\x1f\x85\x0a\x7d\x18\x08\xc7\x9e\x60\x4a\x9c\xef\x01\xd4\xe0\xd0\x08\x8d\x71\x8d\x65\xd3\x03\x00\xd8\x58\xdf\x90\x91\x7a\x9d\x90\xe2\x7c\x31\x21\xc6\x10\x19\xfd\xfc\x0f\x40\x61\x42\x3e\xfc\x99\xf7\xe4\xc1\x92\x33\x18\x90\x0f\x5f\xbe\x40\x7d\xb8\xfb\x85\xaf\x5f\xb7\x16\x12\xe7\x24\xdd\x2e\x04\x64\xa8\x47\x31\xf2\xb5\xfa\xc7\x74\x4e\x56\x11\x93\xab\x0b\xdd\x28\x81\x2a\x33\xcb\xda\x54\x2b\x52\xec\x03\x4a\x59\x13\xaa\xa6\x15\xe5\xf6\x99\xba\x3b\x50\x47\x92\x02\xd6\x76\x4f\x22\x41\x0e\xe2\xc1\x11\xb3\x32\x6e\x96\xf2\xe6\x73\x3e\x34\x77\xc1\xd8\x22\x53\xb4\xde\xfb\xf1\xda\x90\x0f\x13\x0a\x2c\x21\xd3\x76\x99\x29\x31\x12\x99\x0e\x30\x8f\xd4\x2c\x13\xe7\x2e\x81\x1e\x20\xd2\x43\x85\xda\x7a\x28\xa5\xb7\x0d\x56\x64\x63\xac\x4e\x88\x63\x4a\xf3\x30\x2e\xb0\x98\x25\x5b\x61\x9b\x52\xe5\x1f\x0c\x8d\xb6\xec\x43\xa5\x79\x7d\xdd\xb9\xde\xdb\x1d\x16\x25\xfb\x02\xad\xb2\x09\x42\xf6\x08\xb4\x06\x00\xa4\x96\xc5\xc5\xdd\xd6\x26\xeb\xde\x68\x30\xb8\xed\xcd\x46\x93\x0f\x7f\xf4\xc7\x6f\xfa\xc3\x0f\xaf\x67\xb3\xf1\x87\xf1\x68\x32\x2b\x71\x02\x58\xa2\x4c\x33\xde\x2f\x5f\x34\x9b\x95\x13\x0b\x91\x60\xf4\x4d\x49\xb6\x18\x08\x15\x35\x4a\x75\xda\x7c\x77\x0a\x9f\x0b\xa1\x2d\xbb\x72\xea\xdf\xf2\x1d\xe7\xf2\x5c\xb5\xdb\x57\xa5\x6c\x8d\xd5\xac\x03\x2d\x7d\x78\x7b\x33\x3e\x27\xd2\x75\xe7\xa7\xe6\x93\x45\x6a\x3d\x4d\xa4\xab\x76\xbb\x73\x4f\xa4\x59\xef\xac\x48\x79\x17\x3d\x4d\xa8\xac\xfe\x8f\x88\x64\x09\x43\xa1\xc8\xb9\xb1\xd5\x73\x2a\x2b\x6e\x76\xcf\xfd\x4a\x5c\xb6\x05\x60\x90\x63\x1f\x2a\x8d\xd3\xce\x83\x6d\xc3\xf8\xd0\x7c\xd1\xba\x7e\x59\xb2\x2f\x94\x60\x81\xf2\x86\x24\xae\xa7\x14\x68\x15\x3a\x1f\xae\x4e\x86\x79\x61\x8e\x4f\xc9\x2e\x45\x40\xf7\x0e\xf1\xda\xa7\x94\xec\xfa\xd9\x8d\xf2\x3d\xab\xc3\x81\x71\x74\xae\x76\x83\x20\x37\xae\x65\xf2\x7b\xc7\x92\x76\x2e\xbd\xfb\x0b\xcc\x68\x23\xe2\xd3\x46\x3b\xbd\x34\xbe\xc3\x2d\xb5\xbb\x3c\x06\x1a\xc3\x57\x28\xb3\xf7\x96\x7d\xa2\xd2\x06\x5a\x6e\x12\x78\x76\xe5\x2d\x32\x3b\xa3\xc4\xc7\x19\xd5\x38\x88\x51\x29\x92\x27\x15\xcf\x0e\x51\xfb\xa1\x45\x2f\xf8\xdc\x89\x59\xda\x61\x99\x6f\xe7\x11\x78\x9d\xfb\xf1\xfe\x12\xe6\xa3\x50\x27\x88\x47\x03\xec\x1c\xc0\x03\x97\x1f\xda\xd4\x3d\x99\x3a\x26\xdb\x1f\x3f\x51\x47\x63\xb4\x7b\x98\x3e\xa7\x6e\xde\xb3\x3a\xa3\x93\x73\xe3\x6d\x69\x6b\x1c\x5b\xb1\xe0\x93\x0a\x1f\xbd\x0a\xee\xba\x77\x0f\x2b\x5c\x70\x29\x62\x65\x4c\x31\x38\x45\x39\x7a\x31\x9c\x83\x52\x70\x29\xa2\xcc\x85\xc2\x6f\x17\x49\x01\xa4\xf5\x70\x90\xd6\x9d\xa9\xa8\x85\x88\x5c\x99\x60\x0f\x3d\x83\x07\x2e\xc1\xae\x4b\x7d\x18\xee\x3b\xf8\x07\x1c\x94\x7f\x75\x24\x0a\xd3\xe1\xf9\x1c\x86\x03\x5a\x8f\x99\xeb\xdf\x65\xe6\xfd\x47\x05\xfe\x3b\x00\x00\xff\xff\x58\xa6\x04\x2b\xd7\x11\x00\x00"),
		},
		"/namespace.yaml": &vfsgen۰FileInfo{
			name:    "namespace.yaml",
			modTime: time.Date(2020, 4, 2, 7, 17, 0, 483699560, time.UTC),
			content: []byte("\x0a\x2d\x2d\x2d\x0a\x61\x70\x69\x56\x65\x72\x73\x69\x6f\x6e\x3a\x20\x76\x31\x0a\x6b\x69\x6e\x64\x3a\x20\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x0a\x6d\x65\x74\x61\x64\x61\x74\x61\x3a\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x7b\x7b\x20\x2e\x4e\x61\x6d\x65\x73\x70\x61\x63\x65\x20\x7d\x7d\x0a"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger"].(os.FileInfo),
		fs["/namespace.yaml"].(os.FileInfo),
	}
	fs["/jaeger"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/jaeger/all-in-one-template.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
