on:
  workflow_call:
    inputs:
      FULL_MATRIX:
        required: true
        type: string
      RUNNERS_BY_ARCH:
        required: true
        type: string
permissions:
  contents: read
env:
  CI_TOOLS_DIR: "/home/runner/work/kuma/kuma/.ci_tools"
  # This is automatically managed by CI
  K8S_MIN_VERSION: v1.31.12-k3s1
  K8S_MAX_VERSION: v1.34.1-k3s1
jobs:
  test_unit:
    timeout-minutes: 25
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci/skip-test') }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
      - uses: jdx/mise-action@e3d7b8d67a7958d1207f6ed871e83b1ea780e7b0 # v3.3.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
          MISE_DISABLE_TOOLS: "golangci-lint,skaffold"
      - run: |
          make test
  gen_e2e_matrix:
    timeout-minutes: 2
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - id: generate-matrix
        name: Generate matrix
        env:
          BASE_MATRIX: |-
            {
              "test_e2e": {
                "target": [""],
                "k8sVersion": ["${{ env.K8S_MAX_VERSION }}"],
                "arch": ["amd64"],
                "parallelism": [4],
                "cniNetworkPlugin": ["flannel"],
                "sidecarContainers": [""]
              },
              "test_e2e_env": {
                "target": ["kubernetes", "universal", "multizone"],
                "k8sVersion": ["kind", "kindIpv6", "${{ env.K8S_MAX_VERSION }}"],
                "arch": ["amd64"],
                "parallelism": [1],
                "cniNetworkPlugin": ["flannel"],
                "sidecarContainers": [""],
                "exclude":[
                  {"target": "kubernetes", "k8sVersion":"kind"},
                  {"target": "multizone", "k8sVersion":"kind"},
                  {"target":"universal", "k8sVersion":"${{ env.K8S_MAX_VERSION }}"}
                ],
                "include":[
                  {"sidecarContainers": "sidecarContainers", "k8sVersion": "${{ env.K8S_MAX_VERSION }}", "target": "kubernetes", "arch": "amd64"},
                  {"k8sVersion": "${{ env.K8S_MIN_VERSION }}", "target": "multizone", "arch": "amd64"},
                  {"k8sVersion": "${{ env.K8S_MIN_VERSION }}", "target": "kubernetes", "arch": "amd64"},
                  {"k8sVersion": "kind", "target": "universal", "arch": "arm64"},
                  {"k8sVersion": "${{ env.K8S_MAX_VERSION }}", "target": "gatewayapi", "arch": "amd64"},
                  {"cniNetworkPlugin": "calico", "k8sVersion": "${{ env.K8S_MAX_VERSION }}", "target": "multizone", "arch": "amd64"}
                ]
              }
            }
          # You can modify the include to run one of test suites on PRs (though you'd need to then remove it)
          OVERRIDE_JQ_CMD: |-
            .test_e2e = false
            | .test_e2e_env.include = []
            | .test_e2e_env.exclude += [{"arch": "arm64"}, {"k8sVersion": "kindIpv6"}, {"k8sVersion": "${{ inputs.K8S_MIN_VERSION}}"}]
        run: |-
          BASE_MATRIX_ALL='${{ env.BASE_MATRIX }}'
          if [[ "${{ inputs.FULL_MATRIX }}" != "true" ]]; then
            BASE_MATRIX_ALL=$(echo $BASE_MATRIX_ALL | jq -r '${{ env.OVERRIDE_JQ_CMD }}')
          fi
          # Skip e2e tests if the PR has the label "ci/skip-e2e-test" or "ci/skip-test"
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'ci/skip-e2e-test') || contains(github.event.pull_request.labels.*.name, 'ci/skip-test') }}" == "true" ]]; then
            BASE_MATRIX_ALL='{}'
          fi

          echo "final matrix: $BASE_MATRIX_ALL"
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$BASE_MATRIX_ALL" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  test_e2e:
    needs: ["gen_e2e_matrix"]
    if: fromJSON(needs.gen_e2e_matrix.outputs.matrix).test_e2e
    strategy:
      max-parallel: 5
      matrix: ${{ fromJSON(needs.gen_e2e_matrix.outputs.matrix).test_e2e }}
      fail-fast: false
    uses: ./.github/workflows/_e2e.yaml
    with:
      matrix: ${{ toJSON(matrix) }}
      runner: ${{ fromJSON(inputs.RUNNERS_BY_ARCH)[matrix.arch] }}
    secrets: inherit
  test_e2e_env:
    needs: ["gen_e2e_matrix"]
    if: fromJSON(needs.gen_e2e_matrix.outputs.matrix).test_e2e_env
    strategy:
      max-parallel: 5
      matrix: ${{ fromJSON(needs.gen_e2e_matrix.outputs.matrix).test_e2e_env }}
      fail-fast: false
    uses: ./.github/workflows/_e2e.yaml
    with:
      matrix: ${{ toJSON(matrix) }}
      runner: ${{ fromJSON(inputs.RUNNERS_BY_ARCH)[matrix.arch] }}
    secrets: inherit
