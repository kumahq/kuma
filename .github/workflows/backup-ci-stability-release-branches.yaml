name: ci-stability-release-branches

on:
  workflow_dispatch:
    inputs:
      force_run:
        description: "Force run the workflow outside the schedule"
        required: false
        type: boolean
      force_cleanup:
        description: "Force cleanup run outside the schedule"
        required: false
        type: boolean

permissions: {}

concurrency:
  group: ${{ github.workflow }}

jobs:
  should-skip:
    if: ${{ !inputs.force_cleanup }}
    runs-on: ubuntu-24.04
    permissions:
      actions: read # required to check the status of workflow runs
    outputs:
      skip_workflow: ${{ steps.check-skip.outputs.skip_workflow }}
    steps:
      - name: "Determine if workflow should be skipped"
        id: check-skip
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.1.0
        with:
          script: |
            const { eventName, payload, repo, runId } = context;
            
            // Check if this is a scheduled cleanup run
            if (payload.schedule === '10 1 * * *') {
              return core.setOutput('skip_workflow', true);
            }
            
            if (eventName === 'workflow_dispatch') {
              // Check if the event is `workflow_dispatch` outside the schedule without force_run
              const now = new Date();
              const utcHour = now.getUTCHours();
              const utcMinute = now.getUTCMinutes();

              // Define schedule ranges
              const isWithinSchedule = (
                (utcHour >= 19 && utcHour < 24) || // 19:00 - 23:50 UTC
                (utcHour === 0 && utcMinute < 50)  // 00:00 - 00:50 UTC
              );

              const forceRun = payload.inputs?.force_run === 'true';
              
              return core.setOutput('skip_workflow', !(isWithinSchedule || forceRun));
            }

            // Check for other running workflows
            const response = await github.rest.actions.listWorkflowRuns({
              ...repo,
              workflow_id: 'ci-stability-release-branches.yaml',
              per_page: 100,
            });

            const workflowRuns = response.data.workflow_runs;
            const doneStatuses = ['completed', 'failure', 'cancelled', 'timed_out', 'neutral', 'skipped'];

            const runningWorkflows = workflowRuns.filter(run =>
              run.id !== runId && !doneStatuses.includes(run.status)
            );

            core.setOutput('skip_workflow', runningWorkflows.length > 0);

  prepare-release-branches:
    if: needs.should-skip.outputs.skip_workflow == 'false'
    needs: should-skip
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    outputs:
      remaining: ${{ steps.prepare-branches-to-process.outputs.remaining }}
      branch: ${{ steps.prepare-branches-to-process.outputs.branch }}
    steps:
      - name: "Fetch active branches"
        id: prepare-branches-to-process
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.1.0
        env:
          BRANCHES_TO_PROCESS: ${{ vars.TEMP_CI_STABILITY_BRANCHES_TO_PROCESS }}
        with:
          script: |
            const { BRANCHES_TO_PROCESS } = process.env;
            
            const { data: file } = await github.rest.repos.getContent({
              ...context.repo,
              path: 'active-branches.json',
            });

            const content = Buffer.from(file.content, 'base64').toString('utf-8');
            const activeBranches = JSON.parse(content).filter(branch => branch !== 'master');
                        
            const branchesToProcess = BRANCHES_TO_PROCESS
              ? JSON.parse(BRANCHES_TO_PROCESS)
              : activeBranches;

            if (!Array.isArray(branchesToProcess) || branchesToProcess.length === 0) {
              throw new Error('No branches to process. BRANCHES_TO_PROCESS is empty.');
            }

            const [ branch, ...remaining ] = branchesToProcess;

            core.setOutput('remaining', remaining);
            core.setOutput('branch', branch);

  trigger-build-test-distribute:
    needs: prepare-release-branches
    runs-on: ubuntu-24.04
    permissions:
      actions: write # required to trigger workflows
    outputs:
      run_id: ${{ steps.get-run-id.outputs.run_id }}
    steps:
      - name: "Trigger the workflow and retrieve run ID"
        id: get-run-id
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.1.0
        env:
          BRANCH: ${{ needs.prepare-release-branches.outputs.branch }}
        with:
          script: |
            const workflowToTrigger = 'build-test-distribute.yaml';
            const branch = process.env.BRANCH;
            const started = new Date().toISOString();

            await github.rest.actions.createWorkflowDispatch({
              ...context.repo,
              workflow_id: workflowToTrigger,
              ref: branch,
            });

            console.log(`Triggered workflow '${workflowToTrigger}' for branch ${branch}`);

            const finished = new Date(new Date().getTime() + 10 * 1000).toISOString();

            const maxRetries = 5;
            let retryCount = 0;
            let runId = null;

            while (retryCount < maxRetries && !runId) {
              console.log(`Checking for workflow run (attempt ${retryCount + 1})...`);

              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                ...context.repo,
                workflow_id: workflowToTrigger,
                branch: branch,
                created: `${started}..${finished}`,
                per_page: 1,
              });

              if (runs.workflow_runs.length > 0) {
                runId = runs.workflow_runs[0].id;
              }

              if (!runId) {
                retryCount++;
                await new Promise(resolve => setTimeout(resolve, 5000));
              }
            }

            if (!runId) {
              throw new Error(`Unable to retrieve run ID after ${maxRetries} retries.`);
            }

            console.log(`Retrieved run ID: ${runId}`);

            core.setOutput('run_id', runId);

  monitor-triggered-workflow:
    needs: trigger-build-test-distribute
    runs-on: ubuntu-24.04
    timeout-minutes: 115
    permissions:
      actions: read
      checks: read
    env:
      RUN_ID: ${{ needs.trigger-build-test-distribute.outputs.run_id }}
    steps:
      - name: "Monitor triggered workflow"
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.1.0
        with:
          script: |
            while (true) {
              const response = await github.rest.actions.listJobsForWorkflowRun({
                ...context.repo,
                run_id: process.env.RUN_ID,
              });
              
              const { jobs } = response.data;

              console.table(
                jobs.map(job => {
                  const finishedSteps = job.steps.filter(s => s.conclusion).length;
                  const totalSteps = job.steps.length;

                  return {
                    Job: job.name,
                    Status: job.status,
                    Steps: `${finishedSteps}/${totalSteps}`,
                    Conclusion: job.conclusion || 'in_progress',
                  };
                })
              );

              if (jobs.every(job => job.conclusion !== null)) {
                console.log('All jobs completed.');
                break;
              }

              await new Promise(resolve => setTimeout(resolve, 60000));
            }

  update-branches-to-process:
    if: github.event_name == 'schedule' || !inputs.force_run
    needs: [prepare-release-branches, monitor-triggered-workflow]
    runs-on: ubuntu-24.04
    steps:
      - name: "Generate GitHub App Token"
        id: generate-github-app-token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: "Update repository variable"
        id: update-repository-variable
        env:
          REMAINING_BRANCHES: ${{ needs.prepare-release-branches.outputs.remaining }}
          GITHUB_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        run: |
          gh variable set TEMP_CI_STABILITY_BRANCHES_TO_PROCESS \
            --repo "$GITHUB_REPOSITORY" \
            --body "$REMAINING_BRANCHES"

  re-trigger-current-workflow:
    needs: update-branches-to-process
    runs-on: ubuntu-24.04
    permissions:
      actions: write # required to re-trigger workflows
    steps:
      - name: "Re-trigger the workflow if within schedule"
        id: re-trigger
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.1.0
        with:
          script: |
            const now = new Date();
            const utcHour = now.getUTCHours();
            const utcMinute = now.getUTCMinutes();

            const isWithinSchedule = (
              (utcHour >= 19 && utcHour < 24) || // 19:00 - 23:50 UTC
              (utcHour === 0 && utcMinute < 50)  // 00:00 - 00:50 UTC
            );

            if (!isWithinSchedule) {
              return;
            }

            await github.rest.actions.createWorkflowDispatch({
              ...context.repo,
              workflow_id: 'ci-stability-release-branches.yaml',
              ref: context.ref,
            });

            console.log("Workflow re-triggered successfully.");

  cleanup:
    if: always() && vars.TEMP_CI_STABILITY_BRANCHES_TO_PROCESS && (github.event.schedule == '10 1 * * *' || inputs.force_cleanup)
    runs-on: ubuntu-24.04
    steps:
      - name: "Generate GitHub App Token"
        id: generate-github-app-token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: "Cleanup variables"
        id: cleanup
        env:
          GITHUB_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        run: |
          gh variable delete TEMP_CI_STABILITY_BRANCHES_TO_PROCESS \
            --repo "$GITHUB_REPOSITORY"
