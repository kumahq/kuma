name: "build-test-distribute"
on:
  push:
    branches: ["master", "release-*", "!*-merge-master"]
    tags: ["*"]
  pull_request:
    branches: ["master", "release-*"]
  workflow_dispatch: # Allows manual trigger from GitHub Actions UI or via REST call
permissions:
  contents: read
env:
  KUMA_DIR: "."
  # To keep CI tools out of the SBOM, we use a `.ci_tools` directory in the parent
  # of the code checkout path (typically /home/runner/work/<repo-name>/<repo-name>
  # on the runner).
  CI_TOOLS_DIR: "/home/runner/work/kuma/.ci_tools"
concurrency:
  group: ${{ format('{0}-{1}-{2}', github.workflow, github.event_name, github.event_name == 'push' && github.sha || github.event_name == 'pull_request' && github.event.pull_request.number || github.event_name == 'workflow_dispatch' && github.ref_name) }}
  cancel-in-progress: ${{ github.event_name == 'push' && false || true }}
jobs:
  check:
    permissions:
      contents: read
      checks: write # needed for golangci/golangci-lint-action to add code annotations in PRs
    timeout-minutes: 25
    runs-on: ubuntu-24.04
    env:
      FULL_MATRIX: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'ci/run-full-matrix') }}
      ALLOW_PUSH: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'ci/force-publish') }}
      BUILD: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'ci/run-build') || contains(github.event.pull_request.labels.*.name, 'ci/force-publish') }}
      FORCE_PUBLISH_FROM_FORK: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'ci/force-publish') && github.event.pull_request.head.repo.full_name != github.repository }}
    outputs:
      FULL_MATRIX: ${{ env.FULL_MATRIX }}
      ALLOW_PUSH: ${{ env.ALLOW_PUSH }}
      BUILD: ${{ env.BUILD }}
      IMAGES: ${{ steps.metadata.outputs.images }}
      REGISTRY: ${{ steps.metadata.outputs.registry }}
      VERSION_NAME: ${{ steps.metadata.outputs.version }}
      NOTARY_REPOSITORY: ${{ (contains(steps.metadata.outputs.version, 'preview') && 'notary-internal') || 'notary' }}
      CLOUDSMITH_REPOSITORY: ${{ steps.metadata.outputs.distribution_repository }}
    steps:
      - name: "Fail when 'ci/force-publish' label is present on PRs from forks"
        if: ${{ fromJSON(env.FORCE_PUBLISH_FROM_FORK) }}
        run: |
          echo "::error title=Label 'ci/force-publish' cannot be used on PRs from forks::To prevent accidental exposure of secrets, CI won't use repository secrets on pull requests from forks"
          exit 1
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version-file: go.mod
          cache: false
      - uses: golangci/golangci-lint-action@ec5d18412c0aeab7936cb16880d708ba2a64e1ae # v6.2.0
        with:
          args: --fix=false --verbose
          version: v1.61.0
      - uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: |
            ${{ env.CI_TOOLS_DIR }}
          key: ${{ runner.os }}-${{ runner.arch }}-devtools-${{ hashFiles('mk/dependencies/deps.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-devtools
      - run: |
          make dev/tools
      - run: |
          make clean
      - run: |
          make check
      - name: "Set metadata for downstream jobs"
        id: metadata
        run: |
          echo "images=$(make images/info/release/json)" >> $GITHUB_OUTPUT
          echo "registry=$(make docker/info/registry)" >> $GITHUB_OUTPUT
          echo "version=$(make build/info/version)" >> $GITHUB_OUTPUT
          echo "distribution_repository=$(make build/info/cloudsmith_repository)" >> $GITHUB_OUTPUT
      # "make check" puts binaries in ./build/tools (see mk/generate.mk: $(POLICY_GEN)
      # and $(RESOURCE_GEN)), which are unnecessarily included in the SBOM.
      # Running the SCA step before "make check" might seem like a solution, but it
      # generates report files (e.g., sbom.spdx.json, cve-report.json) in the working
      # directory. These files cause "make check" to fail, as it checks if no files
      # in the repository were modified, deleted, or added after its process.
      # It doesn't recognize that the SBOM and CVE report files were added earlier
      # and should be ignored. Since we currently can't change the working directory
      # for the SCA step, it must run after "make check." Instead, we clean ./build
      # after "make check" to exclude tool binaries from the SBOM.
      - run: |
          make clean/build
      - name: "Generate SBOM and CVE report (Software Composition Analysis)"
        id: sca-project
        uses: Kong/public-shared-actions/security-actions/sca@a5b1cfac7d55d8cf9390456a1e6799425e28840d # v4.0.1
        env:
          SYFT_SOURCE_NAME: ${{ github.repository }}
          SYFT_SOURCE_VERSION: ${{ steps.metadata.outputs.version }}
        with:
          dir: .
          config: .syft.yaml
          upload-sbom-release-assets: true
  test:
    needs: ["check"]
    uses: ./.github/workflows/_test.yaml
    with:
      FULL_MATRIX: ${{ needs.check.outputs.FULL_MATRIX }}
      RUNNERS_BY_ARCH: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) && '{"amd64":"ubuntu-latest-kong","arm64":"ubuntu-latest-arm64-kong"}' || '{"amd64":"ubuntu-24.04","arm64":""}' }}
    secrets: inherit
  build_publish:
    permissions:
      contents: read
      id-token: write # Required for image signing
    needs: ["check", "test"]
    uses: ./.github/workflows/_build_publish.yaml
    if: ${{ fromJSON(needs.check.outputs.BUILD) }}
    with:
      FULL_MATRIX: ${{ needs.check.outputs.FULL_MATRIX }}
      ALLOW_PUSH: ${{ needs.check.outputs.ALLOW_PUSH }}
      IMAGE_ARTIFACT_NAME: "image_artifacts"
      BINARY_ARTIFACT_NAME: "binary_artifacts"
      IMAGES: ${{ needs.check.outputs.IMAGES }}
      REGISTRY: ${{ needs.check.outputs.REGISTRY }}
      NOTARY_REPOSITORY: ${{ needs.check.outputs.NOTARY_REPOSITORY }}
      VERSION_NAME: ${{ needs.check.outputs.VERSION_NAME }}
    secrets: inherit
  provenance:
    needs: ["check", "build_publish"]
    if: ${{ github.ref_type == 'tag' }}
    uses: ./.github/workflows/_provenance.yaml
    secrets: inherit
    permissions:
      actions: read # For getting workflow run info to build provenance
      contents: write # To add assets to a release
      id-token: write # For using token to sign images
      packages: write # Required for publishing provenance. Issue: https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/container#known-issues
    with:
      BINARY_ARTIFACTS_HASH_AS_FILE: ${{ needs.build_publish.outputs.BINARY_ARTIFACT_DIGEST_BASE64 }}
      IMAGES: ${{ needs.check.outputs.IMAGES }}
      REGISTRY: ${{ needs.check.outputs.REGISTRY }}
      NOTARY_REPOSITORY: ${{ needs.check.outputs.NOTARY_REPOSITORY }}
      IMAGE_DIGESTS: ${{ needs.build_publish.outputs.IMAGE_DIGESTS }}
  distributions:
    needs: ["build_publish", "check", "test", "provenance"]
    timeout-minutes: 10
    if: ${{ always() }}
    runs-on: ubuntu-24.04
    env:
      SECURITY_ASSETS_DOWNLOAD_PATH: "${{ github.workspace }}/security-assets"
      SECURITY_ASSETS_PACKAGE_NAME: "security-assets" # Cloudsmith package for hosting security assets
    steps:
      - name: "Halt due to previous failures"
        run: |-
          echo "results: ${{ toJson(needs.*.result) }}"
          # for some reason, GH Action will always trigger a downstream job even if there are errors in an dependent job
          # so we manually check it here. An example could be found here: https://github.com/kumahq/kuma/actions/runs/7044980149
          [[ ${{ contains(needs.*.result, 'failure')|| contains(needs.*.result, 'cancelled') }} == "true" ]] && exit 1
          echo "All dependent jobs succeeded"
      - name: "Download all SBOM assets"
        id: collect_sbom
        if: ${{ needs.build_publish.result == 'success' }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: ${{ env.SECURITY_ASSETS_DOWNLOAD_PATH }}
          pattern: "*sbom.{cyclonedx,spdx}.json"
          merge-multiple: true
      - name: "Download binary artifact provenance"
        if: ${{ needs.provenance.result == 'success' && github.ref_type == 'tag' }}
        id: collect_provenance
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: ${{ env.SECURITY_ASSETS_DOWNLOAD_PATH }}
          pattern: ${{ github.event.repository.name }}.intoto.jsonl
          merge-multiple: true
      - name: "Generate security assets TAR"
        if: ${{ needs.build_publish.result == 'success' }}
        id: security_assets_metadata
        run: |
          cd ${{ env.SECURITY_ASSETS_DOWNLOAD_PATH }}
          find . -maxdepth 1 -type f \( -name '*sbom.*.json' -o -name '*.intoto.jsonl' \) -print | tar -cvzf ${{ env.SECURITY_ASSETS_PACKAGE_NAME }}.tar.gz -T -
          ls -alR .
        # Publish aggregated zip file of SBOMs and/or Binary Provenance to artifact regstry
      - name: Push security assets to cloudsmith
        id: push_security_assets
        if: ${{ needs.provenance.result == 'success' || needs.build_publish.result == 'success' }}
        uses: cloudsmith-io/action@7af394e0f8add4867bce109385962dafecad1b8d # v0.6.14
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "raw"
          owner: "kong"
          repo: "${{ needs.check.outputs.CLOUDSMITH_REPOSITORY }}"
          version: "${{ needs.check.outputs.VERSION_NAME }}"
          file: "${{ env.SECURITY_ASSETS_DOWNLOAD_PATH }}/${{ env.SECURITY_ASSETS_PACKAGE_NAME }}.tar.gz"
          name: "${{ env.SECURITY_ASSETS_PACKAGE_NAME }}"
          summary: "SLSA security artifacts for ${{ github.repository }}"
          description: "SBOM and Binary artifact Provenance for ${{ github.repository }}"
          use-executable: "false"
