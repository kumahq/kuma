name: "build-test-distribute"
on:
  push:
    branches: ["master", "release-*", "!*-merge-master"]
    tags: ["*"]
  pull_request:
    branches: ["master", "release-*"]
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
permissions:
  contents: read
env:
  # This is automatically managed by CI
  K8S_MIN_VERSION: v1.23.17-k3s1
  K8S_MAX_VERSION: v1.28.1-k3s1
  GH_OWNER: ${{ github.repository_owner }}
  KUMA_DIR: "."
  CI_TOOLS_DIR: /home/runner/work/kuma/kuma/.ci_tools
  GH_USER: "github-actions[bot]"
  GH_EMAIL: "<41898282+github-actions[bot]@users.noreply.github.com>"
  GH_REPO: "charts"
  NOTARY_REPOSITORY: "${{ github.repository_owner }}/notary"
jobs:
  check:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: go.mod
          cache: false
      - uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: |
            ${{ env.CI_TOOLS_DIR }}
          key: ${{ runner.os }}-${{ runner.arch }}-devtools-${{ hashFiles('mk/dependencies/deps.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-devtools
      - run: |
          make dev/tools
      - uses: golangci/golangci-lint-action@3cfe3a4abbb849e10058ce4af15d205b6da42804 # v4.0.0
        with:
          args: --fix=false --verbose
          version: v1.55.2
          skip-pkg-cache: true
      - run: |
          make clean
      - run: |
          make check
  build:
    needs: ["check"]
    uses: ./.github/workflows/build.yml
  # Scan each image for every arch and os
  scan:
    needs: ["build"]
    uses: ./.github/workflows/sca.yml
    with:
      dir: .
      images: "${{ needs.build.outputs.IMAGES }}"
      artifact_name: ${{ needs.build.outputs.IMAGE_ARTIFACTS_NAME }}
  sign-and-publish:
    permissions:
      contents: read
      id-token: write # needed for signing the images
    needs: ["build", "scan"]
    uses: ./.github/workflows/distributions.yml
    with:
      binary_artifacts_name: ${{ needs.build.outputs.BINARY_ARTIFACTS_NAME }}
      image_artifacts_name: ${{ needs.build.outputs.IMAGE_ARTIFACTS_NAME }}
      enabled_goarches: ${{ needs.build.outputs.ENABLED_GOARCHES }}
      enabled_gooses: ${{ needs.build.outputs.ENABLED_GOOSES }}
      allow_push: ${{ needs.build.outputs.ALLOW_PUSH }}
    secrets:
      PULP_USERNAME: ${{ vars.PULP_USERNAME }}
      PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
      CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_API_KEY: ${{ secrets.DOCKER_API_KEY }}
  provenance:
    permissions:
      contents: write
      id-token: write # needed for signing the images
      actions: read # For getting workflow run info to build provenance
      packages: write # Required for publishing provenance. Issue: https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/container#known-issues
    needs: ["build", "sign-and-publish"]
    uses: ./.github/workflows/provenance.yml
    with:
      allow_push: ${{ needs.build.outputs.ALLOW_PUSH }}
      images: "${{ needs.build.outputs.IMAGES }}"
      binary_artifacts_hashes_as_file: ${{ needs.sign-and-publish.outputs.BINARY_ARTIFACTS_HASHES_AS_FILE }}
    secrets:
      DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      DOCKER_API_KEY: ${{ secrets.DOCKER_API_KEY }}
  test:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    if: ${{ ! contains(github.event.pull_request.labels.*.name, 'ci/skip-test') }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: go.mod
      - uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: |
            ${{ env.CI_TOOLS_DIR }}
          key: ${{ runner.os }}-${{ runner.arch }}-devtools-${{ hashFiles('mk/dependencies/deps.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-devtools
      - run: |
          make dev/tools
      - run: |
          make test
  gen_e2e_matrix:
    timeout-minutes: 2
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci/skip-test') && !contains(github.event.pull_request.labels.*.name, 'ci/skip-e2e-test') }}
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - id: generate-matrix
        name: Generate matrix
        env:
          RUN_FULL_MATRIX: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'ci/run-full-matrix') }}
          BASE_MATRIX: |-
            {
              "test_e2e": {
                "target": [""],
                "k8sVersion": ["kindIpv6", "${{ env.K8S_MIN_VERSION }}", "${{ env.K8S_MAX_VERSION }}"],
                "arch": ["amd64"],
                "parallelism": [3],
                "cniNetworkPlugin": ["flannel"],
                "legacyKDS": [false]
              },
              "test_e2e_env": {
                "target": ["kubernetes", "universal", "multizone"],
                "k8sVersion": ["kind", "kindIpv6", "${{ env.K8S_MIN_VERSION }}", "${{ env.K8S_MAX_VERSION }}"],
                "arch": ["amd64"],
                "parallelism": [1],
                "cniNetworkPlugin": ["flannel"],
                "legacyKDS": [false],
                "exclude":[
                  {"target": "kubernetes", "k8sVersion":"kind"},
                  {"target": "multizone", "k8sVersion":"kind"},
                  {"target":"universal", "k8sVersion":"${{ env.K8S_MIN_VERSION }}"},
                  {"target":"universal", "k8sVersion":"${{ env.K8S_MAX_VERSION }}"}
                ],
                "include":[
                  {"legacyKDS": true, "k8sVersion": "${{ env.K8S_MAX_VERSION }}", "target": "multizone", "arch": "amd64"},
                  {"k8sVersion": "${{ env.K8S_MAX_VERSION }}", "target": "multizone", "arch": "arm64"},
                  {"k8sVersion": "${{ env.K8S_MAX_VERSION }}", "target": "kubernetes", "arch": "arm64"},
                  {"k8sVersion": "${{ env.K8S_MAX_VERSION }}", "target": "universal", "arch": "arm64"},
                  {"k8sVersion": "${{ env.K8S_MAX_VERSION }}", "target": "gatewayapi", "arch": "amd64"},
                  {"cniNetworkPlugin": "calico", "k8sVersion": "${{ env.K8S_MAX_VERSION }}", "target": "multizone", "arch": "amd64"}
                ]
              }
            }
          # You can modify the include to run one of test suites on PRs (though you'd need to then remove it)
          OVERRIDE_JQ_CMD: |-
            .test_e2e = false
            | .test_e2e_env.include = []
            | .test_e2e_env.exclude += [{"arch": "arm64"}, {"k8sVersion": "kindIpv6"}, {"k8sVersion": "${{ env.K8S_MIN_VERSION}}"}]
        run: |-
          BASE_MATRIX_ALL='${{ env.BASE_MATRIX }}'
          if [[ "${{ env.RUN_FULL_MATRIX }}" != "true" ]]; then
            BASE_MATRIX_ALL=$(echo $BASE_MATRIX_ALL | jq -r '${{ env.OVERRIDE_JQ_CMD }}')
          fi

          echo "final matrix: $BASE_MATRIX_ALL"
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$BASE_MATRIX_ALL" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  test_e2e:
    needs: ["gen_e2e_matrix"]
    if: fromJSON(needs.gen_e2e_matrix.outputs.matrix).test_e2e
    strategy:
      matrix: ${{ fromJSON(needs.gen_e2e_matrix.outputs.matrix).test_e2e }}
      fail-fast: false
    uses: ./.github/workflows/e2e.yaml
    with:
      matrix: ${{ toJSON(matrix) }}
    secrets:
      circleCIToken: ${{ secrets.CIRCLECI_TOKEN }}
  test_e2e_env:
    needs: ["gen_e2e_matrix"]
    if: fromJSON(needs.gen_e2e_matrix.outputs.matrix).test_e2e_env
    strategy:
      matrix: ${{ fromJSON(needs.gen_e2e_matrix.outputs.matrix).test_e2e_env }}
      fail-fast: false
    uses: ./.github/workflows/e2e.yaml
    with:
      matrix: ${{ toJSON(matrix) }}
    secrets:
      circleCIToken: ${{ secrets.CIRCLECI_TOKEN }}
