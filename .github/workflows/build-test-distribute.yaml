name: "build-test-distribute"
on:
  push:
    branches: ["master", "release-*", "!*-merge-master"]
    tags: ["*"]
  pull_request_target:
    branches: ["master", "release-*"]
env:
  K8S_MIN_VERSION: v1.23.17-k3s1
  K8S_MAX_VERSION: v1.28.1-k3s1
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - uses: actions/cache@v3
        with:
          path: |
            ~/.kuma-dev
          key: ${{ runner.os }}-devtools-${{ hashFiles('mk/dependencies/deps.lock') }}
          restore-keys: |
            ${{ runner.os }}-devtools
      - run: |
          make dev/tools
      - run: |
          make clean
      - run: |
          make check
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Check if should run on all arch/os combinations"
        if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'ci/run-full-matrix')
        run: |
          echo 'ENABLED_GOARCHES=arm64 amd64' >> $GITHUB_ENV
          echo 'ENABLED_GOOSES=linux darwin' >> $GITHUB_ENV
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      # GitHub actions does not share cache across multiple jobs,
      # so we have to operate cache in each job and action file
      - uses: actions/cache@v3
        with:
          path: |
            ~/.kuma-dev
          key: ${{ runner.os }}-devtools-${{ hashFiles('mk/dependencies/deps.lock') }}
          restore-keys: |
            ${{ runner.os }}-devtools
      - run: |
          make dev/tools
      - run: |
          make build
      - run: |
          make -j build/distributions
      - name: Install dependencies for cross builds
        run: |
          sudo apt-get update; sudo apt-get install -y qemu-user-static binfmt-support
      - run: |
          make -j images
      - run: |
          make -j docker/save
      - name: Cleanup redundant build outputs
        run: |
          find  ./build/artifacts-* -maxdepth 0 -type d | xargs -I % rm -rf %
          find ./build/distributions/* -maxdepth 0 -type d | grep -v '/out' | xargs -I % rm -rf %
          find  ./build/tools-* -maxdepth 0 -type d | xargs -I % rm -rf %
          rm -rf ./build/oapitmp
          rm -rf ./build/ebpf/
      - name: Upload build output
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: build
          retention-days: 1
      - name: Run container structure test
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci/skip-container-structure-test') && !contains(github.event.pull_request.labels.*.name, 'ci/skip-test') }}
        run: |
          make test/container-structure
  test:
    runs-on: ubuntu-latest
    if: ${{ ! contains(github.event.pull_request.labels.*.name, 'ci/skip-test') }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - uses: actions/cache@v3
        with:
          path: |
            ~/.kuma-dev
          key: ${{ runner.os }}-devtools-${{ hashFiles('mk/dependencies/deps.lock') }}
          restore-keys: |
            ${{ runner.os }}-devtools
      - name: Free up disk space for the Runner
        run: |
          echo "Disk usage before cleanup"
          sudo df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          docker system prune --all -f
          echo "Disk usage after cleanup"
          sudo df -h
      - name: Run tests
        run: |
          make test TEST_REPORTS=1
      - name: Save test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: build/reports
          retention-days: 7
  distributions:
    needs: ["check", "build", "test"]
    if: ${{ always() && !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: "Check if should run on all arch/os combinations"
        if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'ci/run-full-matrix')
        run: |
          echo 'ENABLED_GOARCHES=arm64 amd64' >> $GITHUB_ENV
          echo 'ENABLED_GOOSES=linux darwin' >> $GITHUB_ENV
      - name: "Check if force push"
        if: contains(github.event.pull_request.labels.*.name, 'ci/force-publish')
        # Open up the following conditions when we don't generate artifacts on CircleCI
        #  github.event_name == 'push'
        run: |
          echo 'ALLOW_PUSH=true' >> $GITHUB_ENV
      - name: Install dependencies for cross builds
        run: |
          sudo apt-get update; sudo apt-get install -y qemu-user-static binfmt-support
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - uses: actions/cache@v3
        with:
          path: |
            ~/.kuma-dev
          key: ${{ runner.os }}-devtools-${{ hashFiles('mk/dependencies/deps.lock') }}
          restore-keys: |
            ${{ runner.os }}-devtools
      - uses: actions/download-artifact@v3
        with:
          name: build-output
          path: build
      - name: Inspect created tars
        run: |
          for i in build/distributions/out/*.tar.gz; do echo $i; tar -tvf $i; done
      - name: Publish distributions to Pulp
        run: |
          make publish/pulp
      - name: Load images
        run: |
          make docker/load
      - name: Publish images
        run: |-
          make docker/login
          # ensure we always logout
          function on_exit() {
            make docker/logout
          }
          trap on_exit EXIT
          make docker/push
          make docker/manifest
  gen_e2e_matrix:
    runs-on: ubuntu-latest
    needs: ["build"]
    outputs:
      slow: ${{ steps.generate-matrix.outputs.slow }}
      main: ${{ steps.generate-matrix.outputs.main }}
      legacy_kds: ${{ steps.generate-matrix.outputs.legacy_kds }}
      cni: ${{ steps.generate-matrix.outputs.cni }}
    steps:
      - name: Install jq
        run: |
          sudo apt-get install -y jq
      - id: generate-matrix
        name: Generate matrix
        run: |
          SKIP_CI_LABEL="${{ contains(github.event.pull_request.labels.*.name, 'ci/skip-test') || contains(github.event.pull_request.labels.*.name, 'ci/skip-e2e-test')  }}"
          if [[ "$SKIP_CI_LABEL" == "true" ]]; then
            echo "Skipping e2e jobs because the pull request contained a 'ci/skip-*' label."
            exit 0
          fi

          ALL_K8S_VERSION='{"k8sVersion":["kind", "kindIpv6", "${{ env.K8S_MIN_VERSION }}", "${{ env.K8S_MAX_VERSION }}"]}'
          ALL_ARCH='{"arch": ["amd64", "arm64"]}'
          ALL_TARGET='{"target": ["kubernetes", "universal", "multizone"]}'
          SINGLE_ENV='{"k8sVersion": ["${{ env.K8S_MAX_VERSION }}"], "target": ["multizone"], "arch":["amd64"]}'
          ALL_LEGACY_KDS='{"legacyKDS": [true]}'
          ALL_CNI='{"cniNetworkPlugin": ["calico"]}'

          # arm64 is treated as a non-priority
          EXCLUDE_ARM64='[{"arch": "arm64"}]'

          # kind should only be used when testing ipv6 or with e2e-universal
          EXCLUDE_KIND='[{"k8sVersion":"kind", "target": "kubernetes"}, {"k8sVersion":"kind", "target": "multizone"}]'

          # universal only runs on kind
          EXCLUDE_UNIVERSAL='[{"target":"universal", "k8sVersion":"${{ env.K8S_MIN_VERSION }}"}, {"target":"universal", "k8sVersion":"${{ env.K8S_MAX_VERSION }}"}]'

          # non priority main e2e
          EXCLUDE_MAIN_NON_PRIORITY='[{"k8sVersion":"kindIpv6"}, {"k8sVersion": "${{ env.K8S_MIN_VERSION }}"}]'

          # Default matrix
          SLOW=$(echo '{}' | jq -rc ". += $ALL_K8S_VERSION | . += $ALL_ARCH")
          MAIN=$(echo '{}' | jq -rc ". += $ALL_K8S_VERSION | . += $ALL_ARCH | . += $ALL_TARGET" | jq -rc ".exclude += $EXCLUDE_KIND | .exclude += $EXCLUDE_UNIVERSAL" )
          LEGACY_KDS=$(echo '{}' | jq -rc ". += $ALL_LEGACY_KDS | . += $SINGLE_ENV")
          CNI=$(echo '{}' | jq -rc ". += $ALL_CNI | . += $SINGLE_ENV")

          RUN_FULL_MATRIX="${{ contains(github.event.pull_request.labels.*.name, 'ci/run-full-matrix') }}"
          if [[ "$RUN_FULL_MATRIX" == "false" ]]; then
            echo "Skipping non priority e2e tests, because no label 'ci/run-full-matrix' was found on the pull request."

            SLOW=''         # target==""
            LEGACY_KDS=''   # legacyKDS=="true"
            CNI=''          # cniNetworkPlugin=="calico"
            MAIN=$(echo $MAIN | jq -rc ".exclude += $EXCLUDE_ARM64 | .exclude += $EXCLUDE_MAIN_NON_PRIORITY")
          fi

          echo "slow=$SLOW" >> $GITHUB_OUTPUT
          echo "main=$MAIN" >> $GITHUB_OUTPUT
          echo "legacy_kds=$LEGACY_KDS" >> $GITHUB_OUTPUT
          echo "cni=$CNI" >> $GITHUB_OUTPUT
  e2e_slow:
    name: "legacy-k8s:${{ matrix.arch }}-${{ matrix.k8sVersion }}"
    runs-on: ubuntu-latest
    needs: ["gen_e2e_matrix"]
    if: needs.gen_e2e_matrix.outputs.slow != ''
    strategy:
      matrix: ${{ fromJSON(needs.gen_e2e_matrix.outputs.slow) }}
    steps:
      - run: |
          echo "k8sVersion: ${{ matrix.k8sVersion }}"
          echo "arch: ${{ matrix.arch }}"
      - name: Install jq
        run: |
          sudo apt-get install -y jq
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/e2e
        with:
          k8sVersion: ${{ matrix.k8sVersion }}
          arch: ${{ matrix.arch }}
          parallelism: 3
          target: ""
          secureCircleCIToken: ${{ secrets.CIRCLECI_TOKEN }}
  e2e_main:
    name: "${{ matrix.target }}:${{ matrix.arch }}-${{ matrix.k8sVersion }}"
    runs-on: ubuntu-latest
    needs: ["gen_e2e_matrix"]
    if: needs.gen_e2e_matrix.outputs.main != ''
    strategy:
      matrix: ${{ fromJSON(needs.gen_e2e_matrix.outputs.main) }}
    steps:
      - run: |
          echo "k8sVersion: ${{ matrix.k8sVersion }}"
          echo "target: ${{ matrix.target }}"
          echo "arch: ${{ matrix.arch }}"
      - name: Install jq
        run: |
          sudo apt-get install -y jq
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/e2e
        with:
          k8sVersion: ${{ matrix.k8sVersion }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          secureCircleCIToken: ${{ secrets.CIRCLECI_TOKEN }}
  e2e_legacy_kds:
    name: "${{ matrix.target }}:${{ matrix.arch }}-${{ matrix.k8sVersion }}-legacy-kds"
    runs-on: ubuntu-latest
    needs: ["gen_e2e_matrix"]
    if: needs.gen_e2e_matrix.outputs.legacy_kds != ''
    strategy:
      matrix: ${{ fromJSON(needs.gen_e2e_matrix.outputs.legacy_kds) }}
    steps:
      - run: |
          echo "k8sVersion: ${{ matrix.k8sVersion }}"
          echo "target: ${{ matrix.target }}"
          echo "arch: ${{ matrix.arch }}"
          echo "legacyKDS: ${{ matrix.arch }}"
      - name: Install jq
        run: |
          sudo apt-get install -y jq
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/e2e
        with:
          k8sVersion: ${{ matrix.k8sVersion }}
          target: ${{ matrix.arch }}
          arch: ${{ matrix.arch }}
          legacyKDS: ${{ matrix.legacyKDS }}
          secureCircleCIToken: ${{ secrets.CIRCLECI_TOKEN }}
  e2e_calico:
    name: "${{ matrix.target }}:${{ matrix.arch }}-${{ matrix.k8sVersion }}-calico"
    runs-on: ubuntu-latest
    needs: ["gen_e2e_matrix"]
    if: needs.gen_e2e_matrix.outputs.cni != ''
    strategy:
      matrix: ${{ fromJSON(needs.gen_e2e_matrix.outputs.cni) }}
    steps:
      - run: |
          echo "k8sVersion: ${{ matrix.k8sVersion }}"
          echo "target: ${{ matrix.target }}"
          echo "arch: ${{ matrix.arch }}"
          echo "cniNetworkPlugin: ${{ matrix.cniNetworkPlugin }}"
      - name: Install jq
        run: |
          sudo apt-get install -y jq
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/e2e
        with:
          k8sVersion: ${{ matrix.k8sVersion }}
          target: ${{ matrix.arch }}
          arch: ${{ matrix.arch }}
          cniNetworkPlugin: ${{ matrix.cniNetworkPlugin }}
          secureCircleCIToken: ${{ secrets.CIRCLECI_TOKEN }}
