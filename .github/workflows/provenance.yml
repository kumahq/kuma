name: Generate Provenance
on:
  workflow_call:
    inputs:
      images:
        required: true
        type: string
        description: The JSON array of docker images / tar files to be analyzed. Must be present on disk  
      binary_artifacts_hashes_as_file:
        required: true
        type: string
        description: file containing hash for all compressed binary artifacts
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_API_KEY:
        required: true
jobs:
  # The provenance job is reusable workflow that:
  # Cannot be used as a step within other jobs
  # Cannot be used to pass ENV variables
  # GHA limitations don't allow dynamic output keys / expressions
  provenance-metadata:
    runs-on: ubuntu-latest
    outputs:
      artifact-provenance-result: ${{ steps.artifact-provenance-metadata.outputs.subjects-as-file }}
      artifact-upload-tag-name: ${{ steps.artifact-provenance-metadata.outputs.upload-ref-name }}
      artifact-upload-assets: ${{ steps.artifact-provenance-metadata.outputs.upload-assets }}
      image-manifest-provenance-result: ${{ steps.image-manifest-provenance-metadata.outputs.result }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
      - id: artifact-provenance-metadata
        run: |
          echo "upload-ref-name=${GITHUB_REF_NAME}" > $GITHUB_OUTPUT
          echo "subjects-as-file=${{inputs.binary_artifacts_hashes_as_file }}" > $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" =~ ^"refs/tags/" ]]; then
            echo "upload-assets=true" > $GITHUB_OUTPUT
          else
            echo "upload-assets=false" > $GITHUB_OUTPUT
          fi
      - uses: cloudposse/github-action-matrix-outputs-read@5690ce6664e0dcdf06e27e4ba27e7a424951da56
        id: image-manifest-provenance-metadata
        with:
          matrix-step-name: sign-image-manifests # Must match the job name where the matrix-outputs-write action is invoked
      - run: |
          echo ${{ steps.image-manifest-provenance-metadata.outputs.result }}

  # Provenance job for all compressed binary artifacts
  artifact-provenance:
    needs: ["provenance-metadata"]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects-as-file: "${{ needs.provenance-metadata.outputs.artifact-provenance-result }}"
      upload-assets: "${{ needs.provenance-metadata.outputs.artifact-upload-assets }}"
      upload-tag-name: "${{ needs.provenance-metadata.outputs.artifact-upload-tag-name }}"
  
  # Provenance job for all images manifests
  # SLSA generator is a reusable workflow
  # pull-request event is [not supported](https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/container#supported-triggers)
  # runs-on option is [not supported](https://github.com/orgs/community/discussions/25783)
  # ENV option is [not supported](https://github.com/orgs/community/discussions/26671)
  # Reusable workflow doesn't support exrernal COSIGN_REPOSITORY via input / env variable
  # TODO:
  #   Split provenance jobs for internal / official releases when repositories are split
  images-provenance:
    name: Images Provenance
    needs: ["provenance-metadata"]
    strategy:
      # limit to 3 jobs at a time
      max-parallel: 3
      fail-fast: false
      matrix:
        IMAGE: "${{ fromJSON(inputs.images) }}"
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
    with:
      image: ${{ matrix.IMAGE }}
      digest: "${{ fromJSON(needs.provenance-metadata.outputs.image-manifest-provenance-result)['digest'][matrix.IMAGE] }}"
    secrets:
      registry-password: ${{ secrets.DOCKER_API_KEY }}
      registry-username: ${{ secrets.DOCKER_USERNAME }}
