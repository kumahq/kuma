name: "distribute"
on:
  push:
    branches: ["master"]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      - name: "Install basic tools"
        # `unzip`    is necessary to install `protoc`
        # `gcc`      is necessary to run `go test -race`
        # `git`      is necessary because the CircleCI version is different somehow ¯\_(ツ)_/¯
        # `xz-utils` is necessary to decompress xz files
        run: |
          if [ -r /etc/os-release ]; then source /etc/os-release; fi
          case "$ID" in
          ubuntu)
            if ! command -v sudo 2>&1 >/dev/null; then
              apt update
              apt install -y sudo
            fi
            sudo apt update
            sudo env DEBIAN_FRONTEND=noninteractive apt install -y curl git make unzip gcc xz-utils
            ;;
          esac
      # GitHub actions does not share cache across multiple jobs,
      # so we have to operate cache in each job and action file
      - id: retrieve-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/.kuma-dev
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('mk/dependencies/deps.lock') }}
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - if: steps.retrieve-cache.outputs.cache-hit != 'true'
        run: |
          make dev/tools
      - if: steps.retrieve-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.cache/go-build
            ~/.kuma-dev
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('mk/dependencies/deps.lock') }}
      - run: |
          make clean
      - run: |
          make check
      - run: |
          make build
      - run: |
          make -j build/distributions
      - run: |
          make -j images
      - run: |
          make -j docker/save
      - name: Temporarily saving build output
        uses: actions/upload-artifact@v2
        with:
          name: build-output
          path: build
          retention-days: 1
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - name: "Install basic tools"
        run: |
          if [ -r /etc/os-release ]; then source /etc/os-release; fi
          case "$ID" in
          ubuntu)
            if ! command -v sudo 2>&1 >/dev/null; then
              apt update
              apt install -y sudo
            fi
            sudo apt update
            sudo env DEBIAN_FRONTEND=noninteractive apt install -y curl git make unzip gcc xz-utils
            ;;
          esac
      - uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/.kuma-dev
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('mk/dependencies/deps.lock') }}
          fail-on-cache-miss: true
      - name: Free up disk space for the Runner
        run: |
          # source: https://github.com/apache/flink/blob/master/tools/azure-pipelines/free_disk_space.sh
          echo "=============================================================================="
          echo "Freeing up disk space on CI system"
          echo "=============================================================================="
          echo "Listing 100 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          df -h
          echo "Removing large packages"
          sudo apt-get remove -y '^ghc-8.*' || true
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel  || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo "Removing large directories"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          docker system prune --all -f
          sudo df -h
      - name: Run tests
        run: |
          make test TEST_REPORTS=1
      - name: Save test reports
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: build/reports
          retention-days: 30
      - name: Cleanup build folder
        run: |
          rm -rf ./build
      - uses: actions/download-artifact@v2
        with:
          name: build-output
          path: build
      - run: |
          sudo apt-get update; sudo apt-get install -y qemu-user-static binfmt-support
      - run: |
          make test/container-structure
  distributions:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      - uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
      - name: "Install basic tools"
        run: |
          if [ -r /etc/os-release ]; then source /etc/os-release; fi
          case "$ID" in
          ubuntu)
            if ! command -v sudo 2>&1 >/dev/null; then
              apt update
              apt install -y sudo
            fi
            sudo apt update
            sudo env DEBIAN_FRONTEND=noninteractive apt install -y curl git make unzip gcc xz-utils
            ;;
          esac
      - uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/.kuma-dev
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}-${{ hashFiles('mk/dependencies/deps.lock') }}
          fail-on-cache-miss: true
      - uses: actions/download-artifact@v2
        with:
          name: build-output
          path: build
      - name: Inspect created tars
        run: |
          for i in build/distributions/out/*.tar.gz; do echo $i; tar -tvf $i; done
      - name: Publish distributions to Pulp
        run: |
          make publish/pulp
      - name: Load images
        run: |
          make docker/load
      - name: Publish images
        run: |-
          make docker/login
          # ensure we always logout
          function on_exit() {
            make docker/logout
          }
          trap on_exit EXIT
          make docker/push
          make docker/manifest
