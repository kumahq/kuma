name: Publish Distributions
on:
  workflow_call:
    inputs:
      binary_artifacts_name:
        required: true
        type: string
        description: The artifact name to download binary artifacts
      image_artifacts_name:
        required: true
        type: string
        description: The artifact name to download binary artifacts
      enabled_goarches:
        required: true
        type: string
      enabled_gooses:
        required: true
        type: string
      allow_push:
        required: true
        type: string
    secrets:
      PULP_USERNAME:
        required: true
      PULP_PASSWORD:
        required: true
      CLOUDSMITH_API_KEY:
        required: true
      DOCKER_USERNAME:
        required: true
      DOCKER_API_KEY:
        required: true
    outputs:
      BINARY_ARTIFACTS_HASHES_AS_FILE: 
        value: ${{ jobs.publish-packages.outputs.COMPRESSED_BINARY_ARTIFACTS_HASHES_AS_FILE }}
      IMAGE_MANIFESTS:
        value: ${{ jobs.publish-images.outputs.IMAGE_MANIFESTS }}
env:
  CI_TOOLS_DIR: /home/runner/work/kuma/kuma/.ci_tools
  ENABLED_GOARCHES: ${{ inputs.enabled_goarches }}
  ENABLED_GOOSES: ${{ inputs.enabled_gooses }}
  ALLOW_PUSH: ${{ inputs.allow_push }}
  NOTARY_REPOSITORY: "${{ github.repository_owner }}/notary"
  GH_USER: "github-actions[bot]"
  GH_EMAIL: "<41898282+github-actions[bot]@users.noreply.github.com>"

jobs:
  publish-packages:
    runs-on: ubuntu-latest
    outputs:
      COMPRESSED_BINARY_ARTIFACTS_HASHES_AS_FILE: ${{ steps.compressed-binary-artifacts-hashes.outputs.handle }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: go.mod
          cache-dependency-path: |
            .run-full-matrix
            go.sum
      - uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: |
            ${{ env.CI_TOOLS_DIR }}
          key: ${{ runner.os }}-${{ runner.arch }}-devtools-${{ hashFiles('mk/dependencies/deps.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-devtools
      - uses: actions/download-artifact@v4
        id: download-binary-artifacts
        with:
          name: ${{ inputs.binary_artifacts_name }}
      - name: Inspect build directory
        run: |
          ls -alR ${{ steps.download-binary-artifacts.outputs.download-path }}
      - name: Create artifacts provenance checksum
        run: |
          make -j build/distributions-provenance-metadata
      - uses: slsa-framework/slsa-github-generator/actions/generator/generic/create-base64-subjects-from-file@v1.9.0
        id: compressed-binary-artifacts-hashes
        with:
          path: ./build/artifact_digest_file.text # depends on output generated by build/distributions-provenance-metadata target
      - name: Publish distributions to Pulp
        env:
          PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
          PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          make publish/pulp
      - name: package-helm-chart
        id: package-helm
        env:
          HELM_DEV: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
        run: |
          make helm/update-version

          git config user.name "${{ env.GH_USER }}"
          git config user.email "${{ env.GH_EMAIL }}"
          git add -u deployments/charts
          # This commit never ends up in the repo
          git commit --allow-empty -m "ci(helm): update versions"
          # To get an idea of what's in the commit to debug
          git show

          make helm/package
          PKG_FILENAME=$(find .cr-release-packages -type f -printf "%f\n")
          echo "filename=${PKG_FILENAME}" >> $GITHUB_OUTPUT
      - name: Upload packaged chart
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: ${{ steps.package-helm.outputs.filename }}
          path: .cr-release-packages/${{ steps.package-helm.outputs.filename }}
          retention-days: ${{ github.event_name == 'pull_request' && 1 || 30 }}
      # Everything from here is only running on releases.
      # Ideally we'd finish the workflow early, but this isn't possible: https://github.com/actions/runner/issues/662
      - name: Generate GitHub app token
        id: github-app-token
        if: ${{ startsWith(github.event.ref, 'refs/tags/') }}
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Release chart
        if: ${{ startsWith(github.event.ref, 'refs/tags/') }}
        env:
          GITHUB_APP: "true"
          GH_TOKEN: ${{ steps.github-app-token.outputs.token }}
        run: make helm/release

  publish-images:
    runs-on: ubuntu-latest
    if: ${{ inputs.allow_push == 'true' }}
    outputs:
      IMAGE_MANIFESTS: ${{ steps.release_images.outputs.manifests }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        id: download-image-artifacts
        with:
          name: ${{ inputs.image_artifacts_name }}
      - name: Inspect image directory
        run: |
          ls -alR ${{ steps.download-image-artifacts.outputs.download-path }}
      # Needed to publish images
      # Image Digest is needed image signing
      # TODO:
      #   To reduce supply chain surface attack, split image registries for internal and official images
      #   Images needs to be promoted / copied over instead of rebuilding
      #   Ideal flow: Publish manifest to internal registry => sign internal manifest using digest => generate internal provenance => promote/copy manifest tag with SAME Digest to production registry => generate official image provenance
      - name: Release Image Manifests
        id: release_images
        env:
          DOCKER_API_KEY: ${{ secrets.DOCKER_API_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |-
          make docker/load
          make docker/login
          # ensure we always logout
          function on_exit() {
            make docker/logout
          }
          trap on_exit EXIT
          make docker/push
          make docker/manifest
          manifests=$(make manifests/release/show | jq -R -c -S 'split("\\s+";"")[:-1]') # Create JSON array for release manifests needed for signing
          echo "published_manifests=${manifests}"
          echo "manifests=${manifests}" >> "$GITHUB_OUTPUT"
  
  # This job name is needed to collect matrix outputs in ./github/workflows/provenance.yml
  sign-image-manifests:
    needs: ["publish-images"]
    if: ${{ inputs.allow_push == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        IMAGE_MANIFEST: "${{ fromJSON(needs.publish-images.outputs.IMAGE_MANIFESTS) }}"
    steps:
      - name: Install regctl
        uses: regclient/actions/regctl-installer@main
      - name: Fetch manifest digest
        id: manifest_meta
        run: |
          echo "Fetching image manifest digest for ${{ matrix.IMAGE_MANIFEST }}"
          echo "digest=$(regctl image digest ${{ matrix.IMAGE_MANIFEST }})" >> $GITHUB_OUTPUT
          echo "label=$(echo ${{ matrix.IMAGE_MANIFEST }} | rev | cut -d "/" -f 1 | rev | cut -d ":" -f1)" >> "$GITHUB_OUTPUT"
      - name: sign image manifest
        id: sign
        uses: Kong/public-shared-actions/security-actions/sign-docker-image@b0ef627fa71528272d1daa9257b71dc90246cc46
        with:
          image_digest: ${{ steps.manifest_meta.outputs.digest }}
          tags: ${{ matrix.IMAGE_MANIFEST }}
          signature_registry: ${{ env.NOTARY_REPOSITORY }}
          registry_username: ${{ secrets.DOCKER_USERNAME }}
          registry_password: ${{ secrets.DOCKER_API_KEY }}
      # Aggregate the list of image manifest metadata
      #   GHA limiatations doesn't allow aggregated output list:
      #   https://github.com/actions/runner/pull/2477?
      #   GHA limiatations doesn't support dynamic output keys for matrix jobs
      - uses: cloudposse/github-action-matrix-outputs-write@928e2a2d3d6ae4eb94010827489805c17c81181f
        id: write-provenance-metadata
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.IMAGE_MANIFEST }}
          outputs: |-
            digest: ${{ steps.manifest_meta.outputs.digest }}