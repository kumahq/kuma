name: backport
run-name: "${{ format( 'backport #{0} to {1}', inputs.PR, ( inputs.branches || 'active branches' )) }}"
on:
  workflow_dispatch:
    inputs:
      PR:
        description: "number of the PR to be backported"
        type: string
        default: ""
        required: true
      branches:
        description: "target branches to backport to (use comma to separate multi-values, leave empty to target all active branches that applies)"
        type: string
        default: ""
        required: false
permissions:
  contents: read
  pull-requests: write
env:
  GH_USER: kumahq[bot]
  GH_EMAIL: <110050114+kumahq[bot]@users.noreply.github.com>
  GH_REPO: ${{ github.repository }}
jobs:
  pr-info:
    runs-on: ubuntu-24.04
    outputs:
      pr_title: ${{ steps.get-pr-info.outputs.pr_title }}
      pr_change_log: ${{ steps.get-pr-info.outputs.pr_change_log }}
      pr_state: ${{ steps.get-pr-info.outputs.pr_state }}
      pr_base_ref: ${{ steps.get-pr-info.outputs.pr_base_ref }}
      pr_merge_commit_sha: ${{ steps.get-pr-info.outputs.pr_merge_commit_sha }}
    steps:
      - name: get-pr-info
        id: get-pr-info
        env:
          GH_TOKEN: ${{ github.token }}
          GH_DEBUG: ${{ runner.debug == '1' }}
        run: |
          [[ "${GH_DEBUG}" == "true" ]] && set -x

          function get_change_log() {
            awk '
            BEGIN { in_comment = 0; changelog = "" }
            
            # Process each line of input
            {
              if (match($0, /<!--/)) {
                in_comment = 1
              }
              if (in_comment && match($0, /-->/)) {
                in_comment = 0
              }
              if (!in_comment && match($0, /^> Changelog: /)) {
                changelog = $0
              }
            }
            
            # After processing all lines, print the changelog
            END { print changelog }
            ' <<< "$1"
          }
          
          PR_INFO_JSON=$(gh pr view ${{ inputs.PR }} --json 'number,title,mergedAt,state,mergeCommit,baseRefName' || echo '{}')
          PR_INFO_BODY=$(gh pr view ${{ inputs.PR }} --json 'body' -q '.body' || echo '')
          
          TITLE=$(echo -n "$PR_INFO_JSON" | jq -r '.title //empty')
          CHANGE_LOG=$(get_change_log "$PR_INFO_BODY")
          STATE=$(echo -n "$PR_INFO_JSON" | jq -r '.state //empty')
          BASE_REF=$(echo -n "$PR_INFO_JSON" | jq -r '.baseRefName //empty')
          COMMIT=$(echo -n "$PR_INFO_JSON" | jq -r '.mergeCommit.oid //empty')
          
          echo "pr_title=${TITLE}" >> $GITHUB_OUTPUT
          echo "pr_state=${STATE}" >> $GITHUB_OUTPUT
          echo "pr_base_ref=${BASE_REF}" >> $GITHUB_OUTPUT
          echo "pr_merge_commit_sha=${COMMIT}" >> $GITHUB_OUTPUT
          echo "pr_change_log<<EOF" >> $GITHUB_OUTPUT
          echo "${CHANGE_LOG}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: ensure-pr-merged
        run: |
          if [[ "${{ steps.get-pr-info.outputs.pr_state }}" != "MERGED" ]]; then
            echo "PR #${{ inputs.PR }} is not merged, current state: '$PR_STATE'"
            exit 1
          fi
  active-branches:
    needs: pr-info
    uses: ./.github/workflows/_get-active-branches.yaml
    with:
      beforeBranch: ${{ needs.pr-info.outputs.pr_base_ref }}
      branches: ${{ inputs.branches }}
  open-prs:
    needs: [pr-info, active-branches]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.active-branches.outputs.out) }}
    env:
      PR_NUMBER: ${{ inputs.PR }}
      PR_TITLE: ${{ needs.pr-info.outputs.pr_title }}
      SHA: ${{ needs.pr-info.outputs.pr_merge_commit_sha }}
      TARGET_BRANCH: ${{ matrix.branch }}
      USE_APP_TOKEN: ${{ secrets.APP_ID != '' }}
    steps:
      - uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405 # v2.9.4
        with:
          append: true
          message: backporting to ${{ matrix.branch }} with [action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
      - name: Generate GitHub app token
        id: github-app-token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        if: ${{ env.USE_APP_TOKEN == 'true' }}
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ env.TARGET_BRANCH }}
          fetch-depth: 0
      - name: git-config
        run: |
          git config user.name "${GH_USER}"
          git config user.email "${GH_EMAIL}"
      - name: cherry-pick
        run: |
          if [[ "${{ runner.debug }}" == "1" ]]; then
            set -x
          fi
          
          echo LABELS=${{ matrix.branch }} >> $GITHUB_ENV
          if git cherry-pick ${{ env.SHA }}; then
            echo "Cherry-picked without conflicts!"
          else
            echo LABELS=${{ matrix.branch }},conflict >> $GITHUB_ENV
            echo "DIFF<<EOF" >> $GITHUB_ENV
            echo ":warning: :warning: :warning: Conflicts happened when cherry-picking! :warning: :warning: :warning:" >> $GITHUB_ENV
            echo '```' >> $GITHUB_ENV
            git status >> $GITHUB_ENV
            echo '```' >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            git add .
            git cherry-pick --continue
          fi
      - uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        with:
          title: "${{ env.PR_TITLE }} (backport of #${{ env.PR_NUMBER }})"
          signoff: true
          branch: chore/backport-${{ env.TARGET_BRANCH }}-${{ env.PR_NUMBER }}
          body: |
            Automatic cherry-pick of #${{ env.PR_NUMBER }} for branch ${{ env.TARGET_BRANCH }}
            
            Generated by [action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            cherry-picked commit ${{ env.SHA }}
            
            ${{ env.DIFF }}
            
            ${{ needs.pr-info.outputs.pr_change_log }}
          commit-message: |
            Automatic cherry-pick of PR ${{ env.PR_NUMBER }} for branch ${{ env.TARGET_BRANCH }}
            
            cherry-picked commit ${{ env.SHA }}
          delete-branch: true
          draft: ${{ contains(env.LABELS, 'conflict') }}
          labels: ${{ env.LABELS }}
          token: ${{ env.USE_APP_TOKEN == 'true' && steps.github-app-token.outputs.token || github.token }}
          committer: ${{ env.GH_USER }} ${{ env.GH_EMAIL }}
          author: ${{ env.GH_USER }} ${{ env.GH_EMAIL }}
