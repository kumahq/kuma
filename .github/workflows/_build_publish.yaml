on:
  workflow_call:
    inputs:
      FULL_MATRIX:
        required: true
        type: string
      ALLOW_PUSH:
        required: true
        type: string
      BINARY_ARTIFACT_NAME:
        required: true
        type: string
      IMAGE_ARTIFACT_NAME:
        required: true
        type: string
      IMAGES:
        required: true
        type: string
      REGISTRY:
        required: true
        type: string
      VERSION_NAME:
        required: true
        type: string
      NOTARY_REPOSITORY:
        required: true
        type: string
    outputs:
      BINARY_ARTIFACT_DIGEST_BASE64:
        value: ${{ jobs.build-binaries.outputs.BINARY_ARTIFACT_DIGEST_BASE64 }}
      IMAGE_DIGESTS:
        value: ${{ jobs.digest-images.outputs.DIGESTS }}
permissions:
  contents: read
  id-token: write # Required for image signing
env:
  CI_TOOLS_DIR: "/home/runner/work/kuma/kuma/.ci_tools"
  FULL_MATRIX: 'true'
  ALLOW_PUSH: ${{ inputs.ALLOW_PUSH }}
  GH_OWNER: ${{ github.repository_owner }}
  GH_USER: "github-actions[bot]"
  GH_EMAIL: "<41898282+github-actions[bot]@users.noreply.github.com>"
  GH_REPO: "charts"
jobs:
  build-binaries:
    timeout-minutes: 40
    runs-on: ubuntu-latest
    outputs:
      BINARY_ARTIFACT_DIGEST_BASE64: ${{ steps.inspect-binary-output.outputs.binary_artifact_digest_base64 }}
    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          fetch-depth: 0
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: go.mod
      - uses: actions/cache@2cdf405574d6ef1f33a1d12acccd3ae82f47b3f2 # v4.1.0
        with:
          path: |
            ${{ env.CI_TOOLS_DIR }}
          key: ${{ runner.os }}-${{ runner.arch }}-devtools-${{ hashFiles('mk/dependencies/deps.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-devtools
      - run: |
          make build
      - run: |
          make -j build/distributions
      - id: inspect-binary-output
        run: |
          for i in build/distributions/out/*.tar.gz; do echo $i; tar -tvf $i; done
          echo "Artifact digest:"
          cat ./build/distributions/artifact_digest_file.text
          echo "binary_artifact_digest_base64=$(cat ./build/distributions/artifact_digest_file.text)" > $GITHUB_OUTPUT
      - uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        id: binary-artifacts
        with:
          name: ${{ inputs.BINARY_ARTIFACT_NAME }}
          path: |
            ./build/distributions/out/*.tar.gz
            ./build/distributions/out/*.sha256
            !./build/distributions/out/*.tar.gz.sha256
          retention-days: ${{ github.event_name == 'pull_request' && 1 || 30 }}
      - name: publish binaries
        env:
          PULP_USERNAME: ${{ vars.PULP_USERNAME }}
          PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          make publish/pulp
  build-images:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(inputs.images) }}
    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          fetch-depth: 0
      - name: Install dependencies for cross builds
        if: true
        run: |
          sudo apt-get update; sudo apt-get install -y qemu-user-static binfmt-support
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: go.mod
      - uses: actions/cache@2cdf405574d6ef1f33a1d12acccd3ae82f47b3f2 # v4.1.0
        with:
          path: |
            ${{ env.CI_TOOLS_DIR }}
          key: ${{ runner.os }}-${{ runner.arch }}-devtools-${{ hashFiles('mk/dependencies/deps.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-devtools
      - run: |
          make dev/tools
      - id: image_meta
        run: |
          echo "Extracting image meta for ${{ matrix.image }}"
          echo "image=${{ inputs.REGISTRY }}/${{ matrix.image }}:${{ inputs.VERSION_NAME }}" >> $GITHUB_OUTPUT
      - run: |
          make images/${{ matrix.image }}
      - name: Setup upterm session
        uses: lhotari/action-upterm@v1
        if: ${{ failure() }}
        with:
          limit-access-to-actor: true
          wait-timeout-minutes: 20

