// Generated by tools/policy-gen
// Run "make generate" to update this file.

// nolint:whitespace
package v1alpha1

import (
	"fmt"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	policy "github.com/kumahq/kuma/pkg/core/resources/apis/meshexternalservice/api/v1alpha1"
	core_model "github.com/kumahq/kuma/pkg/core/resources/model"
	"github.com/kumahq/kuma/pkg/plugins/resources/k8s/native/pkg/model"
	"github.com/kumahq/kuma/pkg/plugins/resources/k8s/native/pkg/registry"
	"github.com/kumahq/kuma/pkg/plugins/runtime/k8s/metadata"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories=kuma,scope=Namespaced
type MeshExternalService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// Spec is the specification of the Kuma MeshExternalService resource.
	// +kubebuilder:validation:Optional
	Spec *policy.MeshExternalService `json:"spec,omitempty"`
	// Status is the current status of the Kuma MeshExternalService resource.
	// +kubebuilder:validation:Optional
	Status *policy.MeshExternalServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Namespaced
type MeshExternalServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MeshExternalService `json:"items"`
}

func (cb *MeshExternalService) GetObjectMeta() *metav1.ObjectMeta {
	return &cb.ObjectMeta
}

func (cb *MeshExternalService) SetObjectMeta(m *metav1.ObjectMeta) {
	cb.ObjectMeta = *m
}

func (cb *MeshExternalService) GetMesh() string {
	if mesh, ok := cb.ObjectMeta.Labels[metadata.KumaMeshLabel]; ok {
		return mesh
	} else {
		return core_model.DefaultMesh
	}
}

func (cb *MeshExternalService) SetMesh(mesh string) {
	if cb.ObjectMeta.Labels == nil {
		cb.ObjectMeta.Labels = map[string]string{}
	}
	cb.ObjectMeta.Labels[metadata.KumaMeshLabel] = mesh
}

func (cb *MeshExternalService) GetSpec() (core_model.ResourceSpec, error) {
	return cb.Spec, nil
}

func (cb *MeshExternalService) SetSpec(spec core_model.ResourceSpec) {
	if spec == nil {
		cb.Spec = nil
		return
	}

	if _, ok := spec.(*policy.MeshExternalService); !ok {
		panic(fmt.Sprintf("unexpected protobuf message type %T", spec))
	}

	cb.Spec = spec.(*policy.MeshExternalService)
}

func (cb *MeshExternalService) GetStatus() (core_model.ResourceStatus, error) {
	return cb.Status, nil
}

func (cb *MeshExternalService) SetStatus(status core_model.ResourceStatus) error {
	if status == nil {
		cb.Status = nil
		return nil
	}

	if _, ok := status.(*policy.MeshExternalServiceStatus); !ok {
		panic(fmt.Sprintf("unexpected message type %T", status))
	}

	cb.Status = status.(*policy.MeshExternalServiceStatus)
	return nil
}

func (cb *MeshExternalService) Scope() model.Scope {
	return model.ScopeNamespace
}

func (l *MeshExternalServiceList) GetItems() []model.KubernetesObject {
	result := make([]model.KubernetesObject, len(l.Items))
	for i := range l.Items {
		result[i] = &l.Items[i]
	}
	return result
}

func init() {
	SchemeBuilder.Register(&MeshExternalService{}, &MeshExternalServiceList{})
	registry.RegisterObjectType(&policy.MeshExternalService{}, &MeshExternalService{
		TypeMeta: metav1.TypeMeta{
			APIVersion: GroupVersion.String(),
			Kind:       "MeshExternalService",
		},
	})
	registry.RegisterListType(&policy.MeshExternalService{}, &MeshExternalServiceList{
		TypeMeta: metav1.TypeMeta{
			APIVersion: GroupVersion.String(),
			Kind:       "MeshExternalServiceList",
		},
	})
}
