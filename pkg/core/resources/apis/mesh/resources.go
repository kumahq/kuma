// Generated by tools/resource-gen.
// Run "make generate" to update this file.

// nolint:whitespace
package mesh

import (
	"fmt"

	mesh_proto "github.com/kumahq/kuma/api/mesh/v1alpha1"
	"github.com/kumahq/kuma/pkg/core/resources/model"
	"github.com/kumahq/kuma/pkg/core/resources/registry"
)

const (
	CircuitBreakerType model.ResourceType = "CircuitBreaker"
)

var _ model.Resource = &CircuitBreakerResource{}

type CircuitBreakerResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.CircuitBreaker
}

func NewCircuitBreakerResource() *CircuitBreakerResource {
	return &CircuitBreakerResource{
		Spec: &mesh_proto.CircuitBreaker{},
	}
}

func (t *CircuitBreakerResource) GetType() model.ResourceType {
	return CircuitBreakerType
}

func (t *CircuitBreakerResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *CircuitBreakerResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *CircuitBreakerResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *CircuitBreakerResource) Sources() []*mesh_proto.Selector {
	return t.Spec.GetSources()
}

func (t *CircuitBreakerResource) Destinations() []*mesh_proto.Selector {
	return t.Spec.GetDestinations()
}

func (t *CircuitBreakerResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.CircuitBreaker)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *CircuitBreakerResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &CircuitBreakerResourceList{}

type CircuitBreakerResourceList struct {
	Items      []*CircuitBreakerResource
	Pagination model.Pagination
}

func (l *CircuitBreakerResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *CircuitBreakerResourceList) GetItemType() model.ResourceType {
	return CircuitBreakerType
}

func (l *CircuitBreakerResourceList) NewItem() model.Resource {
	return NewCircuitBreakerResource()
}

func (l *CircuitBreakerResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*CircuitBreakerResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*CircuitBreakerResource)(nil), r)
	}
}

func (l *CircuitBreakerResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewCircuitBreakerResource())
	registry.RegistryListType(&CircuitBreakerResourceList{})
}

const (
	DataplaneType model.ResourceType = "Dataplane"
)

var _ model.Resource = &DataplaneResource{}

type DataplaneResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.Dataplane
}

func NewDataplaneResource() *DataplaneResource {
	return &DataplaneResource{
		Spec: &mesh_proto.Dataplane{},
	}
}

func (t *DataplaneResource) GetType() model.ResourceType {
	return DataplaneType
}

func (t *DataplaneResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *DataplaneResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *DataplaneResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *DataplaneResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.Dataplane)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *DataplaneResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &DataplaneResourceList{}

type DataplaneResourceList struct {
	Items      []*DataplaneResource
	Pagination model.Pagination
}

func (l *DataplaneResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *DataplaneResourceList) GetItemType() model.ResourceType {
	return DataplaneType
}

func (l *DataplaneResourceList) NewItem() model.Resource {
	return NewDataplaneResource()
}

func (l *DataplaneResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*DataplaneResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*DataplaneResource)(nil), r)
	}
}

func (l *DataplaneResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewDataplaneResource())
	registry.RegistryListType(&DataplaneResourceList{})
}

const (
	DataplaneInsightType model.ResourceType = "DataplaneInsight"
)

var _ model.Resource = &DataplaneInsightResource{}

type DataplaneInsightResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.DataplaneInsight
}

func NewDataplaneInsightResource() *DataplaneInsightResource {
	return &DataplaneInsightResource{
		Spec: &mesh_proto.DataplaneInsight{},
	}
}

func (t *DataplaneInsightResource) GetType() model.ResourceType {
	return DataplaneInsightType
}

func (t *DataplaneInsightResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *DataplaneInsightResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *DataplaneInsightResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *DataplaneInsightResource) Validate() error {
	return nil
}

func (t *DataplaneInsightResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.DataplaneInsight)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *DataplaneInsightResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &DataplaneInsightResourceList{}

type DataplaneInsightResourceList struct {
	Items      []*DataplaneInsightResource
	Pagination model.Pagination
}

func (l *DataplaneInsightResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *DataplaneInsightResourceList) GetItemType() model.ResourceType {
	return DataplaneInsightType
}

func (l *DataplaneInsightResourceList) NewItem() model.Resource {
	return NewDataplaneInsightResource()
}

func (l *DataplaneInsightResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*DataplaneInsightResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*DataplaneInsightResource)(nil), r)
	}
}

func (l *DataplaneInsightResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewDataplaneInsightResource())
	registry.RegistryListType(&DataplaneInsightResourceList{})
}

const (
	DataplaneOverviewType model.ResourceType = "DataplaneOverview"
)

var _ model.Resource = &DataplaneOverviewResource{}

type DataplaneOverviewResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.DataplaneOverview
}

func NewDataplaneOverviewResource() *DataplaneOverviewResource {
	return &DataplaneOverviewResource{
		Spec: &mesh_proto.DataplaneOverview{},
	}
}

func (t *DataplaneOverviewResource) GetType() model.ResourceType {
	return DataplaneOverviewType
}

func (t *DataplaneOverviewResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *DataplaneOverviewResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *DataplaneOverviewResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *DataplaneOverviewResource) Validate() error {
	return nil
}

func (t *DataplaneOverviewResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.DataplaneOverview)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *DataplaneOverviewResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &DataplaneOverviewResourceList{}

type DataplaneOverviewResourceList struct {
	Items      []*DataplaneOverviewResource
	Pagination model.Pagination
}

func (l *DataplaneOverviewResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *DataplaneOverviewResourceList) GetItemType() model.ResourceType {
	return DataplaneOverviewType
}

func (l *DataplaneOverviewResourceList) NewItem() model.Resource {
	return NewDataplaneOverviewResource()
}

func (l *DataplaneOverviewResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*DataplaneOverviewResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*DataplaneOverviewResource)(nil), r)
	}
}

func (l *DataplaneOverviewResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

const (
	ExternalServiceType model.ResourceType = "ExternalService"
)

var _ model.Resource = &ExternalServiceResource{}

type ExternalServiceResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.ExternalService
}

func NewExternalServiceResource() *ExternalServiceResource {
	return &ExternalServiceResource{
		Spec: &mesh_proto.ExternalService{},
	}
}

func (t *ExternalServiceResource) GetType() model.ResourceType {
	return ExternalServiceType
}

func (t *ExternalServiceResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *ExternalServiceResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *ExternalServiceResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *ExternalServiceResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.ExternalService)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *ExternalServiceResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &ExternalServiceResourceList{}

type ExternalServiceResourceList struct {
	Items      []*ExternalServiceResource
	Pagination model.Pagination
}

func (l *ExternalServiceResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ExternalServiceResourceList) GetItemType() model.ResourceType {
	return ExternalServiceType
}

func (l *ExternalServiceResourceList) NewItem() model.Resource {
	return NewExternalServiceResource()
}

func (l *ExternalServiceResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*ExternalServiceResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*ExternalServiceResource)(nil), r)
	}
}

func (l *ExternalServiceResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewExternalServiceResource())
	registry.RegistryListType(&ExternalServiceResourceList{})
}

const (
	FaultInjectionType model.ResourceType = "FaultInjection"
)

var _ model.Resource = &FaultInjectionResource{}

type FaultInjectionResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.FaultInjection
}

func NewFaultInjectionResource() *FaultInjectionResource {
	return &FaultInjectionResource{
		Spec: &mesh_proto.FaultInjection{},
	}
}

func (t *FaultInjectionResource) GetType() model.ResourceType {
	return FaultInjectionType
}

func (t *FaultInjectionResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *FaultInjectionResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *FaultInjectionResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *FaultInjectionResource) Sources() []*mesh_proto.Selector {
	return t.Spec.GetSources()
}

func (t *FaultInjectionResource) Destinations() []*mesh_proto.Selector {
	return t.Spec.GetDestinations()
}

func (t *FaultInjectionResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.FaultInjection)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *FaultInjectionResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &FaultInjectionResourceList{}

type FaultInjectionResourceList struct {
	Items      []*FaultInjectionResource
	Pagination model.Pagination
}

func (l *FaultInjectionResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *FaultInjectionResourceList) GetItemType() model.ResourceType {
	return FaultInjectionType
}

func (l *FaultInjectionResourceList) NewItem() model.Resource {
	return NewFaultInjectionResource()
}

func (l *FaultInjectionResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*FaultInjectionResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*FaultInjectionResource)(nil), r)
	}
}

func (l *FaultInjectionResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewFaultInjectionResource())
	registry.RegistryListType(&FaultInjectionResourceList{})
}

const (
	HealthCheckType model.ResourceType = "HealthCheck"
)

var _ model.Resource = &HealthCheckResource{}

type HealthCheckResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.HealthCheck
}

func NewHealthCheckResource() *HealthCheckResource {
	return &HealthCheckResource{
		Spec: &mesh_proto.HealthCheck{},
	}
}

func (t *HealthCheckResource) GetType() model.ResourceType {
	return HealthCheckType
}

func (t *HealthCheckResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *HealthCheckResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *HealthCheckResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *HealthCheckResource) Sources() []*mesh_proto.Selector {
	return t.Spec.GetSources()
}

func (t *HealthCheckResource) Destinations() []*mesh_proto.Selector {
	return t.Spec.GetDestinations()
}

func (t *HealthCheckResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.HealthCheck)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *HealthCheckResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &HealthCheckResourceList{}

type HealthCheckResourceList struct {
	Items      []*HealthCheckResource
	Pagination model.Pagination
}

func (l *HealthCheckResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *HealthCheckResourceList) GetItemType() model.ResourceType {
	return HealthCheckType
}

func (l *HealthCheckResourceList) NewItem() model.Resource {
	return NewHealthCheckResource()
}

func (l *HealthCheckResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*HealthCheckResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*HealthCheckResource)(nil), r)
	}
}

func (l *HealthCheckResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewHealthCheckResource())
	registry.RegistryListType(&HealthCheckResourceList{})
}

const (
	MeshType model.ResourceType = "Mesh"
)

var _ model.Resource = &MeshResource{}

type MeshResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.Mesh
}

func NewMeshResource() *MeshResource {
	return &MeshResource{
		Spec: &mesh_proto.Mesh{},
	}
}

func (t *MeshResource) GetType() model.ResourceType {
	return MeshType
}

func (t *MeshResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *MeshResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *MeshResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *MeshResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.Mesh)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *MeshResource) Scope() model.ResourceScope {

	return model.ScopeGlobal

}

var _ model.ResourceList = &MeshResourceList{}

type MeshResourceList struct {
	Items      []*MeshResource
	Pagination model.Pagination
}

func (l *MeshResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *MeshResourceList) GetItemType() model.ResourceType {
	return MeshType
}

func (l *MeshResourceList) NewItem() model.Resource {
	return NewMeshResource()
}

func (l *MeshResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*MeshResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*MeshResource)(nil), r)
	}
}

func (l *MeshResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewMeshResource())
	registry.RegistryListType(&MeshResourceList{})
}

const (
	MeshInsightType model.ResourceType = "MeshInsight"
)

var _ model.Resource = &MeshInsightResource{}

type MeshInsightResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.MeshInsight
}

func NewMeshInsightResource() *MeshInsightResource {
	return &MeshInsightResource{
		Spec: &mesh_proto.MeshInsight{},
	}
}

func (t *MeshInsightResource) GetType() model.ResourceType {
	return MeshInsightType
}

func (t *MeshInsightResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *MeshInsightResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *MeshInsightResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *MeshInsightResource) Validate() error {
	return nil
}

func (t *MeshInsightResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.MeshInsight)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *MeshInsightResource) Scope() model.ResourceScope {

	return model.ScopeGlobal

}

var _ model.ResourceList = &MeshInsightResourceList{}

type MeshInsightResourceList struct {
	Items      []*MeshInsightResource
	Pagination model.Pagination
}

func (l *MeshInsightResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *MeshInsightResourceList) GetItemType() model.ResourceType {
	return MeshInsightType
}

func (l *MeshInsightResourceList) NewItem() model.Resource {
	return NewMeshInsightResource()
}

func (l *MeshInsightResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*MeshInsightResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*MeshInsightResource)(nil), r)
	}
}

func (l *MeshInsightResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewMeshInsightResource())
	registry.RegistryListType(&MeshInsightResourceList{})
}

const (
	ProxyTemplateType model.ResourceType = "ProxyTemplate"
)

var _ model.Resource = &ProxyTemplateResource{}

type ProxyTemplateResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.ProxyTemplate
}

func NewProxyTemplateResource() *ProxyTemplateResource {
	return &ProxyTemplateResource{
		Spec: &mesh_proto.ProxyTemplate{},
	}
}

func (t *ProxyTemplateResource) GetType() model.ResourceType {
	return ProxyTemplateType
}

func (t *ProxyTemplateResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *ProxyTemplateResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *ProxyTemplateResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *ProxyTemplateResource) Selectors() []*mesh_proto.Selector {
	return t.Spec.GetSelectors()
}

func (t *ProxyTemplateResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.ProxyTemplate)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *ProxyTemplateResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &ProxyTemplateResourceList{}

type ProxyTemplateResourceList struct {
	Items      []*ProxyTemplateResource
	Pagination model.Pagination
}

func (l *ProxyTemplateResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ProxyTemplateResourceList) GetItemType() model.ResourceType {
	return ProxyTemplateType
}

func (l *ProxyTemplateResourceList) NewItem() model.Resource {
	return NewProxyTemplateResource()
}

func (l *ProxyTemplateResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*ProxyTemplateResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*ProxyTemplateResource)(nil), r)
	}
}

func (l *ProxyTemplateResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewProxyTemplateResource())
	registry.RegistryListType(&ProxyTemplateResourceList{})
}

const (
	RateLimitType model.ResourceType = "RateLimit"
)

var _ model.Resource = &RateLimitResource{}

type RateLimitResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.RateLimit
}

func NewRateLimitResource() *RateLimitResource {
	return &RateLimitResource{
		Spec: &mesh_proto.RateLimit{},
	}
}

func (t *RateLimitResource) GetType() model.ResourceType {
	return RateLimitType
}

func (t *RateLimitResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *RateLimitResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *RateLimitResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *RateLimitResource) Sources() []*mesh_proto.Selector {
	return t.Spec.GetSources()
}

func (t *RateLimitResource) Destinations() []*mesh_proto.Selector {
	return t.Spec.GetDestinations()
}

func (t *RateLimitResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.RateLimit)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *RateLimitResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &RateLimitResourceList{}

type RateLimitResourceList struct {
	Items      []*RateLimitResource
	Pagination model.Pagination
}

func (l *RateLimitResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *RateLimitResourceList) GetItemType() model.ResourceType {
	return RateLimitType
}

func (l *RateLimitResourceList) NewItem() model.Resource {
	return NewRateLimitResource()
}

func (l *RateLimitResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*RateLimitResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*RateLimitResource)(nil), r)
	}
}

func (l *RateLimitResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewRateLimitResource())
	registry.RegistryListType(&RateLimitResourceList{})
}

const (
	RetryType model.ResourceType = "Retry"
)

var _ model.Resource = &RetryResource{}

type RetryResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.Retry
}

func NewRetryResource() *RetryResource {
	return &RetryResource{
		Spec: &mesh_proto.Retry{},
	}
}

func (t *RetryResource) GetType() model.ResourceType {
	return RetryType
}

func (t *RetryResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *RetryResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *RetryResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *RetryResource) Sources() []*mesh_proto.Selector {
	return t.Spec.GetSources()
}

func (t *RetryResource) Destinations() []*mesh_proto.Selector {
	return t.Spec.GetDestinations()
}

func (t *RetryResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.Retry)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *RetryResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &RetryResourceList{}

type RetryResourceList struct {
	Items      []*RetryResource
	Pagination model.Pagination
}

func (l *RetryResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *RetryResourceList) GetItemType() model.ResourceType {
	return RetryType
}

func (l *RetryResourceList) NewItem() model.Resource {
	return NewRetryResource()
}

func (l *RetryResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*RetryResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*RetryResource)(nil), r)
	}
}

func (l *RetryResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewRetryResource())
	registry.RegistryListType(&RetryResourceList{})
}

const (
	ServiceInsightType model.ResourceType = "ServiceInsight"
)

var _ model.Resource = &ServiceInsightResource{}

type ServiceInsightResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.ServiceInsight
}

func NewServiceInsightResource() *ServiceInsightResource {
	return &ServiceInsightResource{
		Spec: &mesh_proto.ServiceInsight{},
	}
}

func (t *ServiceInsightResource) GetType() model.ResourceType {
	return ServiceInsightType
}

func (t *ServiceInsightResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *ServiceInsightResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *ServiceInsightResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *ServiceInsightResource) Validate() error {
	return nil
}

func (t *ServiceInsightResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.ServiceInsight)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *ServiceInsightResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &ServiceInsightResourceList{}

type ServiceInsightResourceList struct {
	Items      []*ServiceInsightResource
	Pagination model.Pagination
}

func (l *ServiceInsightResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ServiceInsightResourceList) GetItemType() model.ResourceType {
	return ServiceInsightType
}

func (l *ServiceInsightResourceList) NewItem() model.Resource {
	return NewServiceInsightResource()
}

func (l *ServiceInsightResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*ServiceInsightResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*ServiceInsightResource)(nil), r)
	}
}

func (l *ServiceInsightResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewServiceInsightResource())
	registry.RegistryListType(&ServiceInsightResourceList{})
}

const (
	ServiceOverviewType model.ResourceType = "ServiceOverview"
)

var _ model.Resource = &ServiceOverviewResource{}

type ServiceOverviewResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.ServiceInsight_Service
}

func NewServiceOverviewResource() *ServiceOverviewResource {
	return &ServiceOverviewResource{
		Spec: &mesh_proto.ServiceInsight_Service{},
	}
}

func (t *ServiceOverviewResource) GetType() model.ResourceType {
	return ServiceOverviewType
}

func (t *ServiceOverviewResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *ServiceOverviewResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *ServiceOverviewResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *ServiceOverviewResource) Validate() error {
	return nil
}

func (t *ServiceOverviewResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.ServiceInsight_Service)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *ServiceOverviewResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &ServiceOverviewResourceList{}

type ServiceOverviewResourceList struct {
	Items      []*ServiceOverviewResource
	Pagination model.Pagination
}

func (l *ServiceOverviewResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ServiceOverviewResourceList) GetItemType() model.ResourceType {
	return ServiceOverviewType
}

func (l *ServiceOverviewResourceList) NewItem() model.Resource {
	return NewServiceOverviewResource()
}

func (l *ServiceOverviewResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*ServiceOverviewResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*ServiceOverviewResource)(nil), r)
	}
}

func (l *ServiceOverviewResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

const (
	TimeoutType model.ResourceType = "Timeout"
)

var _ model.Resource = &TimeoutResource{}

type TimeoutResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.Timeout
}

func NewTimeoutResource() *TimeoutResource {
	return &TimeoutResource{
		Spec: &mesh_proto.Timeout{},
	}
}

func (t *TimeoutResource) GetType() model.ResourceType {
	return TimeoutType
}

func (t *TimeoutResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *TimeoutResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *TimeoutResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *TimeoutResource) Sources() []*mesh_proto.Selector {
	return t.Spec.GetSources()
}

func (t *TimeoutResource) Destinations() []*mesh_proto.Selector {
	return t.Spec.GetDestinations()
}

func (t *TimeoutResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.Timeout)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *TimeoutResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &TimeoutResourceList{}

type TimeoutResourceList struct {
	Items      []*TimeoutResource
	Pagination model.Pagination
}

func (l *TimeoutResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *TimeoutResourceList) GetItemType() model.ResourceType {
	return TimeoutType
}

func (l *TimeoutResourceList) NewItem() model.Resource {
	return NewTimeoutResource()
}

func (l *TimeoutResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*TimeoutResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*TimeoutResource)(nil), r)
	}
}

func (l *TimeoutResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewTimeoutResource())
	registry.RegistryListType(&TimeoutResourceList{})
}

const (
	TrafficLogType model.ResourceType = "TrafficLog"
)

var _ model.Resource = &TrafficLogResource{}

type TrafficLogResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.TrafficLog
}

func NewTrafficLogResource() *TrafficLogResource {
	return &TrafficLogResource{
		Spec: &mesh_proto.TrafficLog{},
	}
}

func (t *TrafficLogResource) GetType() model.ResourceType {
	return TrafficLogType
}

func (t *TrafficLogResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *TrafficLogResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *TrafficLogResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *TrafficLogResource) Sources() []*mesh_proto.Selector {
	return t.Spec.GetSources()
}

func (t *TrafficLogResource) Destinations() []*mesh_proto.Selector {
	return t.Spec.GetDestinations()
}

func (t *TrafficLogResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.TrafficLog)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *TrafficLogResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &TrafficLogResourceList{}

type TrafficLogResourceList struct {
	Items      []*TrafficLogResource
	Pagination model.Pagination
}

func (l *TrafficLogResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *TrafficLogResourceList) GetItemType() model.ResourceType {
	return TrafficLogType
}

func (l *TrafficLogResourceList) NewItem() model.Resource {
	return NewTrafficLogResource()
}

func (l *TrafficLogResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*TrafficLogResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*TrafficLogResource)(nil), r)
	}
}

func (l *TrafficLogResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewTrafficLogResource())
	registry.RegistryListType(&TrafficLogResourceList{})
}

const (
	TrafficPermissionType model.ResourceType = "TrafficPermission"
)

var _ model.Resource = &TrafficPermissionResource{}

type TrafficPermissionResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.TrafficPermission
}

func NewTrafficPermissionResource() *TrafficPermissionResource {
	return &TrafficPermissionResource{
		Spec: &mesh_proto.TrafficPermission{},
	}
}

func (t *TrafficPermissionResource) GetType() model.ResourceType {
	return TrafficPermissionType
}

func (t *TrafficPermissionResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *TrafficPermissionResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *TrafficPermissionResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *TrafficPermissionResource) Sources() []*mesh_proto.Selector {
	return t.Spec.GetSources()
}

func (t *TrafficPermissionResource) Destinations() []*mesh_proto.Selector {
	return t.Spec.GetDestinations()
}

func (t *TrafficPermissionResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.TrafficPermission)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *TrafficPermissionResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &TrafficPermissionResourceList{}

type TrafficPermissionResourceList struct {
	Items      []*TrafficPermissionResource
	Pagination model.Pagination
}

func (l *TrafficPermissionResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *TrafficPermissionResourceList) GetItemType() model.ResourceType {
	return TrafficPermissionType
}

func (l *TrafficPermissionResourceList) NewItem() model.Resource {
	return NewTrafficPermissionResource()
}

func (l *TrafficPermissionResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*TrafficPermissionResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*TrafficPermissionResource)(nil), r)
	}
}

func (l *TrafficPermissionResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewTrafficPermissionResource())
	registry.RegistryListType(&TrafficPermissionResourceList{})
}

const (
	TrafficRouteType model.ResourceType = "TrafficRoute"
)

var _ model.Resource = &TrafficRouteResource{}

type TrafficRouteResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.TrafficRoute
}

func NewTrafficRouteResource() *TrafficRouteResource {
	return &TrafficRouteResource{
		Spec: &mesh_proto.TrafficRoute{},
	}
}

func (t *TrafficRouteResource) GetType() model.ResourceType {
	return TrafficRouteType
}

func (t *TrafficRouteResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *TrafficRouteResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *TrafficRouteResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *TrafficRouteResource) Sources() []*mesh_proto.Selector {
	return t.Spec.GetSources()
}

func (t *TrafficRouteResource) Destinations() []*mesh_proto.Selector {
	return t.Spec.GetDestinations()
}

func (t *TrafficRouteResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.TrafficRoute)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *TrafficRouteResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &TrafficRouteResourceList{}

type TrafficRouteResourceList struct {
	Items      []*TrafficRouteResource
	Pagination model.Pagination
}

func (l *TrafficRouteResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *TrafficRouteResourceList) GetItemType() model.ResourceType {
	return TrafficRouteType
}

func (l *TrafficRouteResourceList) NewItem() model.Resource {
	return NewTrafficRouteResource()
}

func (l *TrafficRouteResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*TrafficRouteResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*TrafficRouteResource)(nil), r)
	}
}

func (l *TrafficRouteResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewTrafficRouteResource())
	registry.RegistryListType(&TrafficRouteResourceList{})
}

const (
	TrafficTraceType model.ResourceType = "TrafficTrace"
)

var _ model.Resource = &TrafficTraceResource{}

type TrafficTraceResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.TrafficTrace
}

func NewTrafficTraceResource() *TrafficTraceResource {
	return &TrafficTraceResource{
		Spec: &mesh_proto.TrafficTrace{},
	}
}

func (t *TrafficTraceResource) GetType() model.ResourceType {
	return TrafficTraceType
}

func (t *TrafficTraceResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *TrafficTraceResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *TrafficTraceResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *TrafficTraceResource) Selectors() []*mesh_proto.Selector {
	return t.Spec.GetSelectors()
}

func (t *TrafficTraceResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.TrafficTrace)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *TrafficTraceResource) Scope() model.ResourceScope {

	return model.ScopeMesh

}

var _ model.ResourceList = &TrafficTraceResourceList{}

type TrafficTraceResourceList struct {
	Items      []*TrafficTraceResource
	Pagination model.Pagination
}

func (l *TrafficTraceResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *TrafficTraceResourceList) GetItemType() model.ResourceType {
	return TrafficTraceType
}

func (l *TrafficTraceResourceList) NewItem() model.Resource {
	return NewTrafficTraceResource()
}

func (l *TrafficTraceResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*TrafficTraceResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*TrafficTraceResource)(nil), r)
	}
}

func (l *TrafficTraceResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewTrafficTraceResource())
	registry.RegistryListType(&TrafficTraceResourceList{})
}

const (
	ZoneIngressType model.ResourceType = "ZoneIngress"
)

var _ model.Resource = &ZoneIngressResource{}

type ZoneIngressResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.ZoneIngress
}

func NewZoneIngressResource() *ZoneIngressResource {
	return &ZoneIngressResource{
		Spec: &mesh_proto.ZoneIngress{},
	}
}

func (t *ZoneIngressResource) GetType() model.ResourceType {
	return ZoneIngressType
}

func (t *ZoneIngressResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *ZoneIngressResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *ZoneIngressResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *ZoneIngressResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.ZoneIngress)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *ZoneIngressResource) Scope() model.ResourceScope {

	return model.ScopeGlobal

}

var _ model.ResourceList = &ZoneIngressResourceList{}

type ZoneIngressResourceList struct {
	Items      []*ZoneIngressResource
	Pagination model.Pagination
}

func (l *ZoneIngressResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ZoneIngressResourceList) GetItemType() model.ResourceType {
	return ZoneIngressType
}

func (l *ZoneIngressResourceList) NewItem() model.Resource {
	return NewZoneIngressResource()
}

func (l *ZoneIngressResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*ZoneIngressResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*ZoneIngressResource)(nil), r)
	}
}

func (l *ZoneIngressResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewZoneIngressResource())
	registry.RegistryListType(&ZoneIngressResourceList{})
}

const (
	ZoneIngressInsightType model.ResourceType = "ZoneIngressInsight"
)

var _ model.Resource = &ZoneIngressInsightResource{}

type ZoneIngressInsightResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.ZoneIngressInsight
}

func NewZoneIngressInsightResource() *ZoneIngressInsightResource {
	return &ZoneIngressInsightResource{
		Spec: &mesh_proto.ZoneIngressInsight{},
	}
}

func (t *ZoneIngressInsightResource) GetType() model.ResourceType {
	return ZoneIngressInsightType
}

func (t *ZoneIngressInsightResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *ZoneIngressInsightResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *ZoneIngressInsightResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *ZoneIngressInsightResource) Validate() error {
	return nil
}

func (t *ZoneIngressInsightResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.ZoneIngressInsight)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *ZoneIngressInsightResource) Scope() model.ResourceScope {

	return model.ScopeGlobal

}

var _ model.ResourceList = &ZoneIngressInsightResourceList{}

type ZoneIngressInsightResourceList struct {
	Items      []*ZoneIngressInsightResource
	Pagination model.Pagination
}

func (l *ZoneIngressInsightResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ZoneIngressInsightResourceList) GetItemType() model.ResourceType {
	return ZoneIngressInsightType
}

func (l *ZoneIngressInsightResourceList) NewItem() model.Resource {
	return NewZoneIngressInsightResource()
}

func (l *ZoneIngressInsightResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*ZoneIngressInsightResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*ZoneIngressInsightResource)(nil), r)
	}
}

func (l *ZoneIngressInsightResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}

func init() {
	registry.RegisterType(NewZoneIngressInsightResource())
	registry.RegistryListType(&ZoneIngressInsightResourceList{})
}

const (
	ZoneIngressOverviewType model.ResourceType = "ZoneIngressOverview"
)

var _ model.Resource = &ZoneIngressOverviewResource{}

type ZoneIngressOverviewResource struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.ZoneIngressOverview
}

func NewZoneIngressOverviewResource() *ZoneIngressOverviewResource {
	return &ZoneIngressOverviewResource{
		Spec: &mesh_proto.ZoneIngressOverview{},
	}
}

func (t *ZoneIngressOverviewResource) GetType() model.ResourceType {
	return ZoneIngressOverviewType
}

func (t *ZoneIngressOverviewResource) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *ZoneIngressOverviewResource) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *ZoneIngressOverviewResource) GetSpec() model.ResourceSpec {
	return t.Spec
}

func (t *ZoneIngressOverviewResource) Validate() error {
	return nil
}

func (t *ZoneIngressOverviewResource) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.ZoneIngressOverview)
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *ZoneIngressOverviewResource) Scope() model.ResourceScope {

	return model.ScopeGlobal

}

var _ model.ResourceList = &ZoneIngressOverviewResourceList{}

type ZoneIngressOverviewResourceList struct {
	Items      []*ZoneIngressOverviewResource
	Pagination model.Pagination
}

func (l *ZoneIngressOverviewResourceList) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *ZoneIngressOverviewResourceList) GetItemType() model.ResourceType {
	return ZoneIngressOverviewType
}

func (l *ZoneIngressOverviewResourceList) NewItem() model.Resource {
	return NewZoneIngressOverviewResource()
}

func (l *ZoneIngressOverviewResourceList) AddItem(r model.Resource) error {
	if trr, ok := r.(*ZoneIngressOverviewResource); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*ZoneIngressOverviewResource)(nil), r)
	}
}

func (l *ZoneIngressOverviewResourceList) GetPagination() *model.Pagination {
	return &l.Pagination
}
