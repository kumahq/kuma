// Generated by tools/policy-gen
// Run "make generate" to update this file.

// nolint:whitespace
package v1alpha1

import (
	"fmt"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	policy "github.com/kumahq/kuma/pkg/core/resources/apis/meshidentity/api/v1alpha1"
	core_model "github.com/kumahq/kuma/pkg/core/resources/model"
	"github.com/kumahq/kuma/pkg/plugins/resources/k8s/native/pkg/model"
	"github.com/kumahq/kuma/pkg/plugins/resources/k8s/native/pkg/registry"
	"github.com/kumahq/kuma/pkg/plugins/runtime/k8s/metadata"
)

// +kubebuilder:object:root=true
// +kubebuilder:resource:categories=kuma,scope=Namespaced,shortName=mid
type MeshIdentity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// Spec is the specification of the Kuma MeshIdentity resource.
	// +kubebuilder:validation:Optional
	Spec *policy.MeshIdentity `json:"spec,omitempty"`
	// Status is the current status of the Kuma MeshIdentity resource.
	// +kubebuilder:validation:Optional
	Status *policy.MeshIdentityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Namespaced
type MeshIdentityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MeshIdentity `json:"items"`
}

func (cb *MeshIdentity) GetObjectMeta() *metav1.ObjectMeta {
	return &cb.ObjectMeta
}

func (cb *MeshIdentity) SetObjectMeta(m *metav1.ObjectMeta) {
	cb.ObjectMeta = *m
}

func (cb *MeshIdentity) GetMesh() string {
	if mesh, ok := cb.Labels[metadata.KumaMeshLabel]; ok {
		return mesh
	} else {
		return core_model.DefaultMesh
	}
}

func (cb *MeshIdentity) SetMesh(mesh string) {
	if cb.Labels == nil {
		cb.Labels = map[string]string{}
	}
	cb.Labels[metadata.KumaMeshLabel] = mesh
}

func (cb *MeshIdentity) GetSpec() (core_model.ResourceSpec, error) {
	return cb.Spec, nil
}

func (cb *MeshIdentity) SetSpec(spec core_model.ResourceSpec) {
	if spec == nil {
		cb.Spec = nil
		return
	}

	if _, ok := spec.(*policy.MeshIdentity); !ok {
		panic(fmt.Sprintf("unexpected protobuf message type %T", spec))
	}

	cb.Spec = spec.(*policy.MeshIdentity)
}

func (cb *MeshIdentity) GetStatus() (core_model.ResourceStatus, error) {
	return cb.Status, nil
}

func (cb *MeshIdentity) SetStatus(status core_model.ResourceStatus) error {
	if status == nil {
		cb.Status = nil
		return nil
	}

	if _, ok := status.(*policy.MeshIdentityStatus); !ok {
		panic(fmt.Sprintf("unexpected message type %T", status))
	}

	cb.Status = status.(*policy.MeshIdentityStatus)
	return nil
}

func (cb *MeshIdentity) Scope() model.Scope {
	return model.ScopeNamespace
}

func (l *MeshIdentityList) GetItems() []model.KubernetesObject {
	result := make([]model.KubernetesObject, len(l.Items))
	for i := range l.Items {
		result[i] = &l.Items[i]
	}
	return result
}

func init() {
	SchemeBuilder.Register(&MeshIdentity{}, &MeshIdentityList{})
	registry.RegisterObjectType(&policy.MeshIdentity{}, &MeshIdentity{
		TypeMeta: metav1.TypeMeta{
			APIVersion: GroupVersion.String(),
			Kind:       "MeshIdentity",
		},
	})
	registry.RegisterListType(&policy.MeshIdentity{}, &MeshIdentityList{
		TypeMeta: metav1.TypeMeta{
			APIVersion: GroupVersion.String(),
			Kind:       "MeshIdentityList",
		},
	})
}
