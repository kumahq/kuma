//go:build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import ()

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CABundle) DeepCopyInto(out *CABundle) {
	*out = *in
	if in.PEM != nil {
		in, out := &in.PEM, &out.PEM
		*out = new(PEM)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CABundle.
func (in *CABundle) DeepCopy() *CABundle {
	if in == nil {
		return nil
	}
	out := new(CABundle)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MeshTrust) DeepCopyInto(out *MeshTrust) {
	*out = *in
	if in.Origin != nil {
		in, out := &in.Origin, &out.Origin
		*out = new(Origin)
		(*in).DeepCopyInto(*out)
	}
	if in.CABundles != nil {
		in, out := &in.CABundles, &out.CABundles
		*out = make([]CABundle, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MeshTrust.
func (in *MeshTrust) DeepCopy() *MeshTrust {
	if in == nil {
		return nil
	}
	out := new(MeshTrust)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Origin) DeepCopyInto(out *Origin) {
	*out = *in
	if in.KRI != nil {
		in, out := &in.KRI, &out.KRI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Origin.
func (in *Origin) DeepCopy() *Origin {
	if in == nil {
		return nil
	}
	out := new(Origin)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PEM) DeepCopyInto(out *PEM) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PEM.
func (in *PEM) DeepCopy() *PEM {
	if in == nil {
		return nil
	}
	out := new(PEM)
	in.DeepCopyInto(out)
	return out
}
