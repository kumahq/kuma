package builders

import (
	"context"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	common_api "github.com/kumahq/kuma/api/common/v1alpha1"
	"github.com/kumahq/kuma/api/common/v1alpha1/datasource"
	meshidentity_api "github.com/kumahq/kuma/pkg/core/resources/apis/meshidentity/api/v1alpha1"
	core_model "github.com/kumahq/kuma/pkg/core/resources/model"
	"github.com/kumahq/kuma/pkg/core/resources/store"
	test_model "github.com/kumahq/kuma/pkg/test/resources/model"
	"github.com/kumahq/kuma/pkg/util/pointer"
)

type MeshIdentityBuilder struct {
	res *meshidentity_api.MeshIdentityResource
}

func MeshIdentity() *MeshIdentityBuilder {
	return &MeshIdentityBuilder{
		res: &meshidentity_api.MeshIdentityResource{
			Meta: &test_model.ResourceMeta{
				Mesh: "default",
				Name: "identity-1",
			},
			Spec: &meshidentity_api.MeshIdentity{
				Selector: &meshidentity_api.Selector{
					Dataplane: &common_api.LabelSelector{},
				},
			},
		},
	}
}

func (mi *MeshIdentityBuilder) Build() *meshidentity_api.MeshIdentityResource {
	return mi.res
}

func (mi *MeshIdentityBuilder) Create(s store.ResourceStore) error {
	return s.Create(context.Background(), mi.Build(), store.CreateBy(core_model.MetaToResourceKey(mi.res.GetMeta())))
}

func (mi *MeshIdentityBuilder) Key() core_model.ResourceKey {
	return core_model.MetaToResourceKey(mi.res.GetMeta())
}

func (mi *MeshIdentityBuilder) WithName(name string) *MeshIdentityBuilder {
	mi.res.Meta.(*test_model.ResourceMeta).Name = name
	return mi
}

func (mi *MeshIdentityBuilder) WithSelector(selector *common_api.LabelSelector) *MeshIdentityBuilder {
	mi.res.Spec.Selector.Dataplane = selector
	return mi
}

func (mi *MeshIdentityBuilder) WithBundledAutoGenerated() *MeshIdentityBuilder {
	mi.res.Spec.Provider = meshidentity_api.Provider{
		Type: meshidentity_api.BundledType,
		Bundled: &meshidentity_api.Bundled{
			MeshTrustCreation: pointer.To(meshidentity_api.MeshTrustCreationEnabled),
			Autogenerate: &meshidentity_api.Autogenerate{
				Enabled: pointer.To(true),
			},
			InsecureAllowSelfSigned: pointer.To(true),
			CertificateParameters: &meshidentity_api.CertificateParameters{
				Expiry: &v1.Duration{
					Duration: 99 * time.Minute,
				},
			},
		},
	}
	return mi
}

func (mi *MeshIdentityBuilder) WithSpire() *MeshIdentityBuilder {
	mi.res.Spec.Provider = meshidentity_api.Provider{
		Type: meshidentity_api.SpireType,
		Spire: &meshidentity_api.Spire{
			Agent: &meshidentity_api.SpireAgent{
				Timeout: &v1.Duration{Duration: 5 * time.Second},
			},
		},
	}
	return mi
}

func (mi *MeshIdentityBuilder) NotSelfSigned() *MeshIdentityBuilder {
	if mi.res.Spec.Provider.Bundled == nil {
		mi.res.Spec.Provider.Bundled = &meshidentity_api.Bundled{}
	}
	mi.res.Spec.Provider.Bundled.InsecureAllowSelfSigned = pointer.To(false)
	return mi
}

func (mi *MeshIdentityBuilder) WithBundled() *MeshIdentityBuilder {
	mi.res.Spec.Provider = meshidentity_api.Provider{
		Type: meshidentity_api.BundledType,
		Bundled: &meshidentity_api.Bundled{
			MeshTrustCreation: pointer.To(meshidentity_api.MeshTrustCreationEnabled),
			Autogenerate: &meshidentity_api.Autogenerate{
				Enabled: pointer.To(false),
			},
			InsecureAllowSelfSigned: pointer.To(true),
			CertificateParameters: &meshidentity_api.CertificateParameters{
				Expiry: &v1.Duration{
					Duration: 99 * time.Minute,
				},
			},
			CA: &meshidentity_api.CA{
				Certificate: &datasource.SecureDataSource{
					Type: datasource.SecureDataSourceInline,
					InsecureInline: &datasource.Inline{
						Value: "123",
					},
				},
				PrivateKey: &datasource.SecureDataSource{
					Type: datasource.SecureDataSourceInline,
					InsecureInline: &datasource.Inline{
						Value: "456",
					},
				},
			},
		},
	}
	return mi
}

func (mi *MeshIdentityBuilder) WithInitializedStatus() *MeshIdentityBuilder {
	mi.res.Status = &meshidentity_api.MeshIdentityStatus{
		Conditions: []common_api.Condition{
			{
				Type:    meshidentity_api.ReadyConditionType,
				Status:  v1.ConditionTrue,
				Reason:  "Ready",
				Message: "Successfully initialized",
			},
		},
	}
	return mi
}

func (mi *MeshIdentityBuilder) WithMesh(name string) *MeshIdentityBuilder {
	mi.res.Meta.(*test_model.ResourceMeta).Mesh = name
	return mi
}
