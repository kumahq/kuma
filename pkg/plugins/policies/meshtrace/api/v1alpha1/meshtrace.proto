syntax = "proto3";

package kuma.plugins.policies.meshtrace.v1alpha1;

import "mesh/options.proto";
option go_package = "github.com/kumahq/kuma/pkg/plugins/policies/meshtrace/api/v1alpha1";

import "common/v1alpha1/targetref.proto";
import "google/protobuf/wrappers.proto";
import "kuma-doc/config.proto";

option (doc.config) = {
  type : Policy,
  name : "MeshTrace",
  file_name : "meshtrace"
};

// MeshTrace
message MeshTrace {
  option (kuma.mesh.policy) = {
    // Toggle this to have the policy registered or not in Kuma
    skip_registration : false,
  };

  // TargetRef is a reference to the resource the policy takes an effect on.
  // The resource could be either a real store object or virtual resource
  // defined inplace.
  kuma.common.v1alpha1.TargetRef targetRef = 1;

  // a mirror of api/mesh/v1alpha1/mesh.proto DatadogTracingBackendConfig /
  // ZipkinTracingBackendConfig make generate/policies failed when trying to
  // re-use these
  message DatadogBackend {
    // Address of datadog collector.
    string address = 1 [ (doc.required) = true ];

    // Port of datadog collector
    uint32 port = 2 [ (doc.required) = true ];
  }

  message ZipkinBackend {
    // Address of Zipkin collector.
    string url = 1 [ (doc.required) = true ];

    // Generate 128bit traces. Default: false
    bool traceId128bit = 2;

    // Version of the API. values: httpJson, httpJsonV1, httpProto. Default:
    // httpJson see
    // https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/trace/v3/zipkin.proto#L66
    string apiVersion = 3 [ (doc.required) = true ];

    // Determines whether client and server spans will share the same span
    // context. Default: true.
    // https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/trace/v3/zipkin.proto#L63
    google.protobuf.BoolValue sharedSpanContext = 4;
  }

  message Backend {
    // only one of zipkin or datadog can be used
    ZipkinBackend zipkin = 1;
    DatadogBackend datadog = 2;
  }

  message Sampling {
    double overall = 1;
    double client = 2;
    double random = 3;
  }

  message HeaderTag {
    string name = 1 [ (doc.required) = true ];
    // if the default is missing and there is no value the tag will not be included
    string default = 2;
  }

  message Tag {
    string name = 1 [ (doc.required) = true ];

    // only one of literal or header can be used
    string literal = 2;
    HeaderTag header = 3;
  }

  message Conf {
    repeated Backend backends = 1 [ (doc.required) = true ];
    Sampling sampling = 2;
    repeated Tag tags = 3;
  }

  Conf default = 2;
}
