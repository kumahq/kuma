syntax = "proto3";

package kuma.plugins.policies.meshtrace.v1alpha1;

import "mesh/options.proto";
option go_package = "github.com/kumahq/kuma/pkg/plugins/policies/meshtrace/api/v1alpha1";

import "common/v1alpha1/targetref.proto";
import "google/protobuf/wrappers.proto";
import "kuma-doc/config.proto";

option (doc.config) = {
  type : Policy,
  name : "MeshTrace",
  file_name : "meshtrace"
};

// MeshTrace allows users to enable request tracing between services in the mesh
// and sending these traces to a third party storage.
message MeshTrace {
  option (kuma.mesh.policy) = {
    // Toggle this to have the policy registered or not in Kuma
    skip_registration : false,
  };

  // TargetRef is a reference to the resource the policy takes an effect on.
  // The resource could be either a real store object or virtual resource
  // defined inplace.
  kuma.common.v1alpha1.TargetRef targetRef = 1;

  // Datadog tracing backend configuration.
  message DatadogBackend {
    // Address of Datadog collector, only host and port are allowed (no paths,
    // fragments etc.)
    string url = 1 [ (doc.required) = true ];

    // Determines if datadog service name should be split based on traffic
    // direction and destination. For example, with `splitService: true` and a
    // `backend` service that communicates with a couple of databases, you would
    // get service names like `backend_INBOUND`, `backend_OUTBOUND_db1`, and
    // `backend_OUTBOUND_db2` in Datadog. Default: false
    bool splitService = 2;
  }

  // Zipkin tracing backend configuration.
  message ZipkinBackend {
    // Address of Zipkin collector.
    string url = 1 [ (doc.required) = true ];

    // Generate 128bit traces. Default: false
    bool traceId128bit = 2;

    // Version of the API. values: httpJson, httpProto. Default:
    // httpJson see
    // https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/trace/v3/zipkin.proto#L66
    string apiVersion = 3 [ (doc.required) = true ];

    // Determines whether client and server spans will share the same span
    // context. Default: true.
    // https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/trace/v3/zipkin.proto#L63
    google.protobuf.BoolValue sharedSpanContext = 4;
  }

  // Only one of zipkin or datadog can be used.
  message Backend {
    // Zipkin backend configuration.
    ZipkinBackend zipkin = 1;
    // Datadog backend configuration.
    DatadogBackend datadog = 2;
  }

  // Sampling configuration.
  message Sampling {
    // Target percentage of requests will be traced
    // after all other sampling checks have been applied (client, force tracing,
    // random sampling). This field functions as an upper limit on the total
    // configured sampling rate. For instance, setting client_sampling to 100%
    // but overall_sampling to 1% will result in only 1% of client requests with
    // the appropriate headers to be force traced. Default: 100% Mirror of
    // overall_sampling in Envoy
    // https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L142-L150
    google.protobuf.UInt32Value overall = 1;

    // Target percentage of requests that will be force traced if the
    // 'x-client-trace-id' header is set. Default: 100% Mirror of
    // client_sampling in Envoy
    // https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L127-L133
    google.protobuf.UInt32Value client = 2;

    // Target percentage of requests that will be randomly selected for trace
    // generation, if not requested by the client or not forced. Default: 100%
    // Mirror of random_sampling in Envoy
    // https://github.com/envoyproxy/envoy/blob/v1.22.0/api/envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto#L135-L140
    google.protobuf.UInt32Value random = 3;
  }

  // Tag taken from a header configuration.
  message HeaderTag {
    // Name of the header.
    string name = 1 [ (doc.required) = true ];
    // Default value to use if header is missing.
    // If the default is missing and there is no value the tag will not be
    // included.
    string default = 2;
  }

  // Custom tags configuration.
  // Only one of literal or header can be used.
  message Tag {
    // Name of the tag.
    string name = 1 [ (doc.required) = true ];

    // Tag taken from literal value.
    string literal = 2;
    // Tag taken from a header.
    HeaderTag header = 3;
  }

  message Conf {
    // A one element array of backend definition.
    // Envoy allows configuring only 1 backend, so the natural way of
    // representing that would be just one object. Unfortunately due to the
    // reasons explained in MADR 009-tracing-policy this has to be a one element
    // array for now.
    repeated Backend backends = 1 [ (doc.required) = true ];

    // Sampling configuration.
    // Sampling is the process by which a decision is made on whether to
    // process/export a span or not.
    Sampling sampling = 2;

    // Custom tags configuration. You can add custom tags to traces based on
    // headers or literal values.
    repeated Tag tags = 3;
  }

  // MeshTrace configuration.
  Conf default = 2;
}
