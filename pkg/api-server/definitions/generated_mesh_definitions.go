// Generated by tools/resource-gen.
// Run "make generate" to update this file.

// nolint:whitespace
package definitions

import (
	"github.com/kumahq/kuma/pkg/core/resources/apis/mesh"
	"github.com/kumahq/kuma/pkg/core/resources/model"
)

var meshWsDefinitions = []ResourceWsDefinition{

	{
		Name: "CircuitBreaker",
		Path: "circuit-breakers",
		ResourceFactory: func() model.Resource {
			return mesh.NewCircuitBreakerResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.CircuitBreakerResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "Dataplane",
		Path: "dataplanes",
		ResourceFactory: func() model.Resource {
			return mesh.NewDataplaneResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.DataplaneResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "DataplaneInsight",
		Path: "dataplane-insights",
		ResourceFactory: func() model.Resource {
			return mesh.NewDataplaneInsightResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.DataplaneInsightResourceList{}
		},
		Admin:    false,
		ReadOnly: true,
	},

	{
		Name: "ExternalService",
		Path: "external-services",
		ResourceFactory: func() model.Resource {
			return mesh.NewExternalServiceResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.ExternalServiceResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "FaultInjection",
		Path: "fault-injections",
		ResourceFactory: func() model.Resource {
			return mesh.NewFaultInjectionResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.FaultInjectionResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "HealthCheck",
		Path: "health-checks",
		ResourceFactory: func() model.Resource {
			return mesh.NewHealthCheckResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.HealthCheckResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "Mesh",
		Path: "meshes",
		ResourceFactory: func() model.Resource {
			return mesh.NewMeshResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.MeshResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "MeshInsight",
		Path: "mesh-insights",
		ResourceFactory: func() model.Resource {
			return mesh.NewMeshInsightResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.MeshInsightResourceList{}
		},
		Admin:    false,
		ReadOnly: true,
	},

	{
		Name: "ProxyTemplate",
		Path: "proxytemplates",
		ResourceFactory: func() model.Resource {
			return mesh.NewProxyTemplateResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.ProxyTemplateResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "RateLimit",
		Path: "rate-limits",
		ResourceFactory: func() model.Resource {
			return mesh.NewRateLimitResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.RateLimitResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "Retry",
		Path: "retries",
		ResourceFactory: func() model.Resource {
			return mesh.NewRetryResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.RetryResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "ServiceInsight",
		Path: "service-insights",
		ResourceFactory: func() model.Resource {
			return mesh.NewServiceInsightResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.ServiceInsightResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "Timeout",
		Path: "timeouts",
		ResourceFactory: func() model.Resource {
			return mesh.NewTimeoutResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.TimeoutResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "TrafficLog",
		Path: "traffic-logs",
		ResourceFactory: func() model.Resource {
			return mesh.NewTrafficLogResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.TrafficLogResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "TrafficPermission",
		Path: "traffic-permissions",
		ResourceFactory: func() model.Resource {
			return mesh.NewTrafficPermissionResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.TrafficPermissionResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "TrafficRoute",
		Path: "traffic-routes",
		ResourceFactory: func() model.Resource {
			return mesh.NewTrafficRouteResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.TrafficRouteResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "TrafficTrace",
		Path: "traffic-traces",
		ResourceFactory: func() model.Resource {
			return mesh.NewTrafficTraceResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.TrafficTraceResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "ZoneIngress",
		Path: "zone-ingresses",
		ResourceFactory: func() model.Resource {
			return mesh.NewZoneIngressResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.ZoneIngressResourceList{}
		},
		Admin:    false,
		ReadOnly: false,
	},

	{
		Name: "ZoneIngressInsight",
		Path: "zone-ingress-insights",
		ResourceFactory: func() model.Resource {
			return mesh.NewZoneIngressInsightResource()
		},
		ResourceListFactory: func() model.ResourceList {
			return &mesh.ZoneIngressInsightResourceList{}
		},
		Admin:    false,
		ReadOnly: true,
	},
}
