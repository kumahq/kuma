version: 2.1 # Adds support for executors, parameterized jobs, etc

orbs:
  aws-cli: circleci/aws-cli@1.4.0
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.11.2
  slack: circleci/slack@4.1
  azure-cli: circleci/azure-cli@1.1.0
  azure-acr: circleci/azure-acr@0.2.0
  azure-aks: circleci/azure-aks@0.2.1

parameters:
  run_workflow_clean_eks:
    default: true
    type: boolean

  run_workflow_clean_aks:
    default: true
    type: boolean

  run_workflow_e2e_eks:
    default: true
    type: boolean

  run_workflow_e2e_aks:
    default: true
    type: boolean

reusable:

  constants:
    - &go_version "1.17.3"

  docker_images:
    - &golang_image "golang:1.17.3"
    - &circleci_golang_image "circleci/golang:1.17.3"

  vm_images:
  - &ubuntu_vm_image "ubuntu-2004:202111-01"

  snippets:

    # apparently, a job can run on a tag only if it has an explicit configuration for tag filters
    release_workflow_filters: &release_workflow_filters
      filters:
        branches:
          ignore: /.*/
        tags:
          only: /.*/

    # release the charts only on tagged releases
    helm_release_workflow_filters: &helm_release_workflow_filters
      filters:
        branches:
          ignore: /.*/
        tags:
          only: /^v?(\d+)\.(\d+)\.(\d+)$/

    # filters for the kuma-commit workflow
    master_workflow_filters: &master_workflow_filters
      filters:
        branches:
          only:
           - master
           - /^release-.*/
        tags:
          ignore: /.*/ # we don't want to run master workflow on commits with tag because use_local_kuma_images has to be false for all the jobs to pass

    # filters for the {a,e}ks-e2e workflow
    master_only_workflow_filters: &master_only_workflow_filters
      filters:
        branches:
          only:
            - master

    # filters for the kuma-commit workflow
    commit_workflow_filters: &commit_workflow_filters
      filters:
        branches:
          ignore:
           - master
           - /^release-.*/
           - gh-pages

# See https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version-21.
commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
    - run:
        name: "Early return if this build is from a forked PR"
        command: |
          if [ -n "${CIRCLE_PR_NUMBER}" ]; then
            echo "Nothing to do for forked PRs, so marking this step successful"
            circleci step halt
          fi
  install_aws_eksctl:
    description: "Install eksctl because of: https://github.com/CircleCI-Public/aws-eks-orb/issues/42"
    steps:
      - run:
          name: "Install eksctl"
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi

            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
  install_build_tools:
    description: "Install an upstream Go release to $HOME/go"
    parameters:
      go_os:
        type: string
        default: linux
      go_arch:
        type: string
        default: amd64
      go_version:
        type: string
        default: *go_version
    steps:
    - run:
        # `unzip`    is necessary to install `protoc`
        # `gcc`      is necessary to run `go test -race`
        # `git`      is necessary because the CircleCI version is different somehow ¯\_(ツ)_/¯
        # `xz-utils` is necessary to decompress xz files
        name: "Install basic tools"
        command: |
          if [ -r /etc/os-release ]; then source /etc/os-release; fi
          case "$ID" in
          ubuntu)
            if ! command -v sudo 2>&1 >/dev/null; then
              apt update
              apt install -y sudo
            fi

            sudo apt update
            sudo env DEBIAN_FRONTEND=noninteractive apt install -y curl git make unzip gcc xz-utils
            ;;
          esac
    - run:
        name: "Install Go"
        # See https://golang.org/doc/install#tarball
        command: |
          curl -s --fail --location https://dl.google.com/go/go<<parameters.go_version>>.<<parameters.go_os>>-<<parameters.go_arch>>.tar.gz | tar -xz -C $HOME
          echo 'export PATH=$HOME/go/bin:$PATH' >> $BASH_ENV
    - run:
        name: "Update runc"
        # See https://github.com/rancher/k3d/issues/807 (runc's default version on the instance fails k3d)
        command: |
          if [[ `uname -s` == "Linux" ]]; then
            sudo sh -c 'curl -s --fail --location https://github.com/opencontainers/runc/releases/download/v1.0.3/runc.amd64 > /usr/bin/runc'
            sudo chown root:root /usr/bin/runc ; sudo chmod o+x /usr/bin/runc
          fi

executors:
  golang:
    docker:
    - image: *golang_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"
    working_directory: /go/src/github.com/kumahq/kuma

  remote-docker:
    docker:
    - image: *circleci_golang_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

  vm:
    resource_class: large
    machine:
      image: *ubuntu_vm_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

  mac:
    resource_class: medium
    macos:
      xcode: "12.5.1"
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

jobs:
  eks-ecr-clean-registry:
    executor: aws-cli/default
    steps:
    - aws-cli/install

    - run:
        name: "Remove all test images from repository"
        command: |
          for image in kumactl kuma-cp kuma-dp kuma-init kuma-universal; do
            images="$(aws ecr list-images --repository-name ${image})"

            aws ecr batch-delete-image \
              --repository-name "${image}" \
              --cli-input-json "${images}" &
          done

          wait || true

  eks-e2e:
    executor: vm
    environment:
      GOPATH: /home/circleci/.go-kuma-go
    parameters:
      prefix:
        description: "Prefix for the cluster names"
        type: string
        default: kuma-cicd-e2e-test
      api_version:
        description: "XDS API version"
        type: string
        default: v3
    steps:
    - early_return_for_forked_pull_requests

    - checkout

    - run:
        name: "Setup Environment"
        command: |
          echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
          echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV
          echo "export TAG=${CIRCLE_SHA1:0:7}" >> $BASH_ENV
          echo "export CLUSTER_1=<< parameters.prefix >>-${CIRCLE_SHA1:0:7}-1" >> $BASH_ENV
          echo "export CLUSTER_2=<< parameters.prefix >>-${CIRCLE_SHA1:0:7}-2" >> $BASH_ENV

          # we have to install `unzip` to be able to install aws-cli
          sudo apt update
          sudo apt install -y \
            unzip

    - aws-cli/install

    - install_aws_eksctl

    - aws-eks/install-aws-iam-authenticator

    - kubernetes/install

    # Mount files from the upstream jobs
    - attach_workspace:
        at: build

    - run:
        name: "Load Docker images from TAR archives"
        command: make docker/load

    - aws-ecr/ecr-login:
        account-url: ECR_REGISTRY
        region: AWS_DEFAULT_REGION

    - run:
        name: "Push images to ECR & Create clusters"
        command: |
          for image in kuma-cp kuma-dp kuma-init kumactl kuma-universal; do
            make docker/tag/${image} \
              DOCKER_REGISTRY="${ECR_REGISTRY}" \
              KUMA_VERSION="${TAG}" && \
            docker push "${ECR_REGISTRY}"/${image}:"${TAG}" &
          done

          eksctl create cluster \
            --name "${CLUSTER_1}" \
            --nodes 1 \
            &
          eksctl create cluster \
            --name "${CLUSTER_2}" \
            --nodes 1 \
            &

          FAIL="0"
          for job in $(jobs -p); do
            wait "${job}" || FAIL=$((FAIL + 1))
          done

          exit ${FAIL}

    - aws-eks/update-kubeconfig-with-authenticator:
        cluster-name: "${CLUSTER_1}"
        kubeconfig-file-path: ~/.kube/kind-kuma-1-config

    - aws-eks/update-kubeconfig-with-authenticator:
        cluster-name: "${CLUSTER_2}"
        kubeconfig-file-path: ~/.kube/kind-kuma-2-config

    - restore_cache:
        keys:
        # prefer the exact match
        - vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}

    - install_build_tools

    - run:
        name: "Download Go modules"
        command: |
          go mod download

    # since execution of go commands might change contents of "go.sum",
    #  we have to save cache immediately
    - save_cache:
        key: vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
        - "/home/circleci/.go-kuma-go"

    - run:
        name: "Install all development tools"
        command: |
          make dev/tools

    - run:
        name: "Setup Helm"
        command: helm repo add kuma https://kumahq.github.io/charts

    # We need kumactl to be built to run tests, and to not build it again,
    #  we can use the one already build by earlier jobs
    - attach_workspace:
        at: build

    - run:
        name: "Run E2E tests"
        command: |
          export E2E_PKG_LIST="./test/e2e/helm/...";
          export API_VERSION="<< parameters.api_version >>"
          export KUMA_GLOBAL_IMAGE_REGISTRY="${ECR_REGISTRY}"
          export KUMA_GLOBAL_IMAGE_TAG="${TAG}"
          export KUMA_K8S_TYPE="aws"
          export KUMA_USE_LOAD_BALANCER=true
          export KUMA_USE_HOSTNAME_INSTEAD_OF_IP=true
          export KUMA_DEFAULT_RETRIES=60
          export KUMA_DEFAULT_TIMEOUT="6s"

          make test/e2e/test
    - run:
        name: "Cleanup"
        when: always
        command: |
          for image in kumactl kuma-cp kuma-dp kuma-init kuma-universal; do
            aws ecr batch-delete-image \
                --repository-name "${image}" \
                --image-ids imageTag="${TAG}" &
          done

          eksctl delete cluster --wait --name "${CLUSTER_1}" &
          eksctl delete cluster --wait --name "${CLUSTER_2}" &

          wait || true

    - slack/notify:
        event: fail
        template: basic_fail_1

    - slack/notify:
        event: pass
        template: basic_success_1

  aks-acr-clean-registry:
    executor: azure-cli/default
    steps:
    - azure-cli/install

    - azure-cli/login-with-service-principal

    - run:
        name: "Remove all test images from repository"
        command: |
          PURGE_CMD="acr purge \
            --filter 'kumactl:.*' \
            --filter 'kuma-cp:.*' \
            --filter 'kuma-dp:.*' \
            --filter 'kuma-init:.*' \
            --filter 'kuma-universal:.*' \
            --untagged \
            --ago 1s"

          az acr run \
             --cmd "${PURGE_CMD}" \
             --registry "${AZURE_ACR_REGISTRY}" \
             /dev/null

  aks-delete-clusters:
    executor: azure-cli/default
    steps:
    - azure-cli/install

    - azure-cli/login-with-service-principal

    - run:
        name: "Remove all test images from repository"
        command: |
          for name in $(az aks list --resource-group=${AZURE_RESOURCE_GROUP} | jq -r '.[].name'); do
            az aks delete --resource-group=${AZURE_RESOURCE_GROUP} --name ${name} --yes &
          done

          wait

  aks-e2e:
    executor: vm
    environment:
      GOPATH: /home/circleci/.go-kuma-go
    parameters:
      prefix:
        description: |
          Prefix for the cluster names
        type: string
        default: kuma-cicd-e2e-test
      api_version:
        description: |
          XDS API version
        type: string
        default: v3
      node_count:
        description: |
          Amount of nodes for cluster's node pool
        type: integer
        default: 1
      node_vm_size:
        description: |
          Size of Virtual Machines to create as Kubernetes nodes
        type: string
        default: "Standard_DS2_v2"
      kubernetes_version:
        description: |
          Version of Kubernetes to use for creating the cluster, such as "1.11.8" or "1.12.6".
        type: string
        default: "1.22.2"
    steps:
    - early_return_for_forked_pull_requests

    - checkout

    - run:
        name: "Setup Environment"
        command: |
          echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
          echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV
          echo "export TAG=${CIRCLE_SHA1:0:7}" >> $BASH_ENV
          echo "export CLUSTER_1=<< parameters.prefix >>-${CIRCLE_SHA1:0:7}-1" >> $BASH_ENV
          echo "export CLUSTER_2=<< parameters.prefix >>-${CIRCLE_SHA1:0:7}-2" >> $BASH_ENV
          echo "export AZURE_ACR_REGISTRY_FULLNAME=${AZURE_ACR_REGISTRY}.azurecr.io" >> $BASH_ENV

    - azure-cli/install

    - azure-cli/login-with-service-principal

    - run:
        name: "Install AKS Preview Azure CLI Extension"
        command: |
          az extension add --name aks-preview

    - kubernetes/install

    # Mount files from the upstream jobs
    - attach_workspace:
        at: build

    - run:
        name: "Load Docker images from TAR archives"
        command: make docker/load

    - azure-acr/acr-login:
        registry-name: ${AZURE_ACR_REGISTRY}

    - run:
        name: "Push images to ECR & Create clusters"
        command: |
          for image in kuma-cp kuma-dp kuma-init kumactl kuma-universal; do
            make docker/tag/${image} \
              DOCKER_REGISTRY="${AZURE_ACR_REGISTRY_FULLNAME}" \
              KUMA_VERSION="${TAG}" &
          done

          wait

          for image in kuma-cp kuma-dp kuma-init kumactl kuma-universal; do
            docker push "${AZURE_ACR_REGISTRY_FULLNAME}"/${image}:"${TAG}" &
          done

          clusters="${CLUSTER_1} ${CLUSTER_2}"

          for name in ${clusters}; do
            az aks create \
              --name "${name}" \
              --resource-group "${AZURE_RESOURCE_GROUP}" \
              --location "${AZURE_LOCATION}" \
              --subscription ${AZURE_SUBSCRIPTION} \
              --node-count << parameters.node_count >> \
              --node-vm-size << parameters.node_vm_size >> \
              --kubernetes-version << parameters.kubernetes_version >> \
              --enable-addons monitoring \
              --generate-ssh-keys \
              --network-plugin azure \
              --enable-managed-identity \
              --assign-identity "${AZURE_IDENTITY_CONTROL_PLANE}" \
              --assign-kubelet-identity "${AZURE_IDENTITY_KUBELET}" \
              &
          done

          FAIL="0"
          for job in $(jobs -p); do
            wait "${job}" || FAIL=$((FAIL + 1))
          done

          exit ${FAIL}

    - azure-aks/update-kubeconfig-with-credentials:
        cluster-name: "${CLUSTER_1}"
        resource-group: "${AZURE_RESOURCE_GROUP}"
        subscription: "${AZURE_SUBSCRIPTION}"
        file: ~/.kube/kind-kuma-1-config

    - azure-aks/update-kubeconfig-with-credentials:
        cluster-name: "${CLUSTER_2}"
        resource-group: "${AZURE_RESOURCE_GROUP}"
        subscription: "${AZURE_SUBSCRIPTION}"
        file: ~/.kube/kind-kuma-2-config

    - restore_cache:
        keys:
        # prefer the exact match
        - vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}

    - install_build_tools

    - run:
        name: "Download Go modules"
        command: |
          go mod download

    # since execution of go commands might change contents of "go.sum",
    #  we have to save cache immediately
    - save_cache:
        key: vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
        - "/home/circleci/.go-kuma-go"

    - run:
        name: "Install all development tools"
        command: |
          make dev/tools

    - run:
        name: "Setup Helm"
        command: helm repo add kuma https://kumahq.github.io/charts

    # We need kumactl to be built to run tests, and to not build it again,
    #  we can use the one already build by earlier jobs
    - attach_workspace:
        at: build

    - run:
        name: "Run E2E tests"
        command: |
          export E2E_PKG_LIST="./test/e2e/helm/..."
          export API_VERSION="<< parameters.api_version >>"
          export KUMA_GLOBAL_IMAGE_REGISTRY="${AZURE_ACR_REGISTRY_FULLNAME}"
          export KUMA_GLOBAL_IMAGE_TAG="${TAG}"
          export KUMA_K8S_TYPE="azure"
          export KUMA_USE_LOAD_BALANCER=true

          make test/e2e/test
    - run:
        name: "Cleanup"
        when: always
        command: |
          for image in kumactl kuma-cp kuma-dp kuma-init kuma-universal; do
            az acr repository delete \
              --subscription "${AZURE_SUBSCRIPTION}" \
              --name "${AZURE_ACR_REGISTRY}" \
              --image "${image}:${TAG}" \
              --yes \
              &
          done

          clusters="${CLUSTER_1} ${CLUSTER_2}"

          for name in ${clusters}; do
            az aks delete \
              --subscription "${AZURE_SUBSCRIPTION}" \
              --name "${name}" \
              --resource-group "${AZURE_RESOURCE_GROUP}" \
              --yes \
              &
          done

          wait || true

    - slack/notify:
        event: fail
        template: basic_fail_1

    - slack/notify:
        event: pass
        template: basic_success_1

  eks-delete-clusters:
    executor: aws-cli/default
    steps:
    - aws-cli/install

    - install_aws_eksctl

    - run:
        name: "Clean clusters"
        command: |
          for cluster in $(eksctl get cluster -o json | jq -r '.[].metadata.name | select(. | test("kuma-cicd-e2e-test"))'); do
            eksctl delete cluster --wait --name "${cluster}" &
          done

          wait

  dev_ubuntu:
    docker:
    - image: ubuntu:20.04
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"
      CLANG_FORMAT_PATH: clang-format-13
      # if GOPATH is not set, `golang-ci` fails with an obscure message
      # "ERRO Running error: context loading failed: failed to load program with go/packages: could not determine GOARCH and Go compiler"
      GOPATH: /root/.go-kuma-go
    steps:
    - install_build_tools
    - checkout
    - run:
        name: "Install all development tools"
        command: |
          make dev/tools
    - run:
        name: "Build all binaries"
        command: |
          make build
    - run:
        name: "Run unit tests"
        command: |
          GO_TEST_OPTS='-p 2' make test

  dev_mac:
    executor: mac
    environment:
      # if GOPATH is not set, `golang-ci` fails with an obscure message
      # "ERRO Running error: context loading failed: failed to load program with go/packages: could not determine GOARCH and Go compiler"
      GOPATH: /Users/distiller/.go-kuma-go
    steps:
    - checkout
    - install_build_tools:
        go_os: darwin
    - run:
        name: "Install all development tools"
        command: |
          make dev/tools
    # Do NOT install `clang-format` on Mac since it takes unreasonable amount of time
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: |
          make check BUILD_INFO_VERSION=latest
    - run:
        name: "Build all binaries"
        command: |
          make build
    - run:
        name: "Run unit tests"
        command: |
          make test

  go_cache:
    executor: golang
    steps:
    - checkout
    - run:
        name: "Download Go modules"
        command: |
          go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
        - "/go/pkg/mod"

  check:
    executor: golang
    # we need a large resource class to satisfy the needs of golangci-lint run under `make check`
    resource_class: large
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        # `xz-utils` is necessary to decompress xz files
        command: apt update && apt install -y unzip xz-utils
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Install check tools (clang-format, ...)"
        command: |
         # see https://apt.llvm.org/

         # Assuming this is Debian, $VERSION_CODENAME nas the release name we
         # need for apt.
         . /etc/os-release

         cat  >>/etc/apt/sources.list \<<EOF

         deb https://apt.llvm.org/${VERSION_CODENAME}/ llvm-toolchain-${VERSION_CODENAME} main
         deb-src https://apt.llvm.org/${VERSION_CODENAME}/ llvm-toolchain-${VERSION_CODENAME} main

         EOF

         wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -

         apt update && apt install -y clang-format
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: make check

  test:
    executor: vm
    parameters:
      target:
        description: The test make target.
        type: string
        default: test
    environment:
      GOPATH: /home/circleci/.go-kuma-go
    steps:
    - install_build_tools
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: "Download Go modules"
        command: |
          go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
          - "/home/circleci/.go-kuma-go"
    - run:
        name: "Install all development tools"
        command: |
          make dev/tools
    - run:
        name: "Run tests"
        command: |
          export GINKGO_TEST_RESULTS_DIR=/tmp/ginkgo-test-results
          make << parameters.target >>
    - run:
        # Ref https://docs.codecov.com/docs/about-the-codecov-bash-uploader
        name: "Push coverage to Codecov"
        when: always
        command: |
          set -o errexit
          curl --fail --location --silent --output codecov https://codecov.io/bash
          readonly VERSION=$(grep -o 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2)
          readonly URL="https://raw.githubusercontent.com/codecov/codecov-bash"
          for i in 1 256 512 ; do
            echo checking SHA${i}SUM for version ${VERSION}
            shasum --algorithm $i --check --ignore-missing <(
              curl --location --silent "${URL}/${VERSION}/SHA${i}SUM"
            )
          done
          bash ./codecov -f "build/coverage/*.out"
    - store_artifacts:
        path: build/coverage
        destination: /coverage
    - store_test_results:
        path: /tmp/ginkgo-test-results

  e2e:
    executor: vm
    parameters:
      api:
        description: XDS API version
        type: string
        default: v3
      ipv6:
        description: use IPv6
        type: boolean
        default: false
      k3sVersion:
        description: version of k3s to use
        type: string
        default: v1.21.7-k3s1
    parallelism: 8
    environment:
      GOPATH: /home/circleci/.go-kuma-go
    steps:
      - install_build_tools
      - checkout
      - restore_cache:
          keys:
            # prefer the exact match
            - vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
      - run:
          name: "Download Go modules"
          command: |
            go mod download
      # since execution of go commands might change contents of "go.sum", we have to save cache immediately
      - save_cache:
          key: vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/.go-kuma-go"
      # Mount files from the upstream jobs
      - attach_workspace:
          at: build
      - run:
          name: "Install all development tools"
          command: |
            make dev/tools
      - run:
          name: "Setup Helm"
          command: |
            helm repo add kuma https://kumahq.github.io/charts
      - when:
          condition: << parameters.ipv6 >>
          steps:
            - run:
                name: Enable IPV6 and change DNS # CircleCI's DNS on IPV6 prevents resolving inside Kind. When change to 8.8.8.8 and remove "search" section (. removes it), resolving works again
                command: |
                  cat \<<'EOF' | sudo tee /etc/docker/daemon.json
                  {
                    "ipv6": true,
                    "fixed-cidr-v6": "2001:db8:1::/64",
                    "dns": ["8.8.8.8"],
                    "dns-search": ["."]
                  }
                  EOF
                  sudo service docker restart
            - run:
                name: "Run IPv6 E2E tests"
                command: |
                  export E2E_PKG_LIST=$(circleci tests glob ./test/e2e/* | circleci tests split | xargs printf "./%s/... ")
                  export API_VERSION=<< parameters.api >>
                  export IPV6=true
                  export KUMA_DEFAULT_RETRIES=60
                  export KUMA_DEFAULT_TIMEOUT="6s"
                  export GINKGO_TEST_RESULTS_DIR=/tmp/ginkgo-test-results
                  make -j2 test/e2e
            - store_test_results:
                path: /tmp/ginkgo-test-results
      - unless:
          condition: << parameters.ipv6 >>
          steps:
            - run:
                name: "Run IPv4 E2E tests"
                command: |
                  export CI_K3S_VERSION=<< parameters.k3sVersion >>
                  export E2E_PKG_LIST=$(circleci tests glob ./test/e2e/* | circleci tests split | xargs printf "./%s/... ")
                  export API_VERSION=<< parameters.api >>
                  export GINKGO_TEST_RESULTS_DIR=/tmp/ginkgo-test-results
                  export K3D=true
                  make -j2 test/e2e
            - store_test_results:
                path: /tmp/ginkgo-test-results

  build:
    executor: golang
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: Build all Kuma binaries (such as, kumactl, kuma-cp, kuma-dp, kuma-prometheus-sd)
        command: make build

    # Persist the specified paths into the workspace for use in downstream jobs
    - persist_to_workspace:
        root: build
        paths:
        - artifacts-linux-amd64

  images:
    executor: remote-docker
    parameters:
      docker_registry:
        description: "Registry for container images"
        type: string
        default: "docker.io/kumahq"
    steps:
    - checkout
    # Mount files from the upstream jobs
    - attach_workspace:
        at: build
    - setup_remote_docker:
        version: 20.10.7
    - run:
        name: Build Docker images
        command: |
          make images \
            DOCKER_REGISTRY="<< parameters.docker_registry >>"
    - run:
        name: Save Docker images into TAR archives
        command: |
          make docker/save \
            DOCKER_REGISTRY="<< parameters.docker_registry >>"
    # Persist the specified paths into the workspace for use in downstream jobs
    - persist_to_workspace:
        root: build
        paths:
        - docker-images

  images-kumactl:
    executor: remote-docker
    parameters:
      docker_registry:
        description: "Registry for container images"
        type: string
        default: "docker.io/kumahq"
    steps:
    - checkout
    # Mount files from the upstream jobs
    - attach_workspace:
        at: build
    - setup_remote_docker:
        version: 20.10.7
    - run:
        name: Build kumactl's Docker image
        command: |
          make image/kumactl \
            DOCKER_REGISTRY="<< parameters.docker_registry >>"
    - run:
        name: Save kumactl's Docker image into TAR archives
        command: |
          make docker/save/kumactl \
            DOCKER_REGISTRY="<< parameters.docker_registry >>"
    # Persist the specified paths into the workspace for use in downstream jobs
    - persist_to_workspace:
        root: build
        paths:
        - docker-images

  release:
    executor: vm
    steps:
    - install_build_tools
    - checkout
    - run:
        name: "Download Go modules"
        command: go mod download
    - run:
        name: Build Packages
        command: |
          ./tools/releases/distros.sh --package
    - run:
        name: Push Packages
        command: |
          ./tools/releases/distros.sh --release
    - run:
        name: Build Docker
        command: |
          ./tools/releases/docker.sh --build
    - run:
        name: Push Docker
        command: |
          ./tools/releases/docker.sh --push

  helm-release:
    executor: golang
    steps:
    - checkout
    - run:
        name: "Install Helm Chart Releaser"
        command: |
          VER="1.1.1"
          curl -L -o /tmp/cr-$VER.tgz https://github.com/helm/chart-releaser/releases/download/v$VER/chart-releaser_${VER}_linux_amd64.tar.gz
          mkdir -p /tmp/cr
          tar -xz -C /tmp/cr -f /tmp/cr-$VER.tgz
          mv /tmp/cr/cr /usr/bin
    - run:
        name: "Package Helm Charts"
        command: |
          ./tools/releases/helm.sh --package
    - run:
        name: "Release Helm Charts"
        command: |
          ./tools/releases/helm.sh --release


#
# Below, the tag filter needs to be in all jobs
# transitively required by the push job; otherwise,
# the build isn't triggered.
# TODO investigate whether it's possible to DRY it,
# perhaps by creating a separate workflow for deploy,
# which depends on the first workflow (check/test/build)
#
workflows:
  version: 2
  kuma-commit:
    jobs:
    - go_cache: *commit_workflow_filters
    - check:
        <<: *commit_workflow_filters
        requires:
        - go_cache
    - build:
        <<: *commit_workflow_filters
        requires:
        - go_cache
    - test:
        <<: *commit_workflow_filters
        requires:
        - check
    - images:
        <<: *commit_workflow_filters
        requires:
        - build
    - e2e:
        <<: *commit_workflow_filters
        name: test/e2e-ipv4
        requires:
          - images
          - check
    - e2e:
        <<: *commit_workflow_filters
        name: test/e2e-ipv4-oldk8s
        k3sVersion: v1.19.16-k3s1
        requires:
          - images
          - check
    - e2e:
        <<: *commit_workflow_filters
        name: test/e2e-ipv6
        requires:
          - images
          - check
        # custom parameters
        ipv6: true

  clean-eks:
    when: << pipeline.parameters.run_workflow_clean_eks >>
    triggers:
    - schedule:
        # run cleanup everyday at 02:00 - it's the last resort for cleanup of
        # EKS resources if anything went wrong and because of any reason
        # they were not cleaned immediately after tests
        cron: "0 2 * * *"
        <<: *master_only_workflow_filters
    jobs:
    - eks-ecr-clean-registry
    - eks-delete-clusters

  clean-aks:
    when: << pipeline.parameters.run_workflow_clean_aks >>
    triggers:
    - schedule:
        # run cleanup everyday at 02:00 - it's the last resort for cleanup of
        # AKS resources if anything went wrong and because of any reason
        # they were not cleaned immediately after tests
        cron: "0 2 * * *"
        <<: *master_only_workflow_filters
    jobs:
    - aks-acr-clean-registry
    - aks-delete-clusters

  e2e-eks:
    when: << pipeline.parameters.run_workflow_e2e_eks >>
    triggers:
    - schedule:
        # run every Monday at 00:00
        cron: "0 0 * * 1"
        <<: *master_only_workflow_filters
    jobs:
    - go_cache: *master_only_workflow_filters
    - build:
        <<: *master_only_workflow_filters
        requires:
        - go_cache
    - images:
        <<: *master_only_workflow_filters
        requires:
        - build
        docker_registry: ${ECR_REGISTRY}
    - eks-e2e:
        <<: *master_only_workflow_filters
        name: test/e2e/eks
        requires:
        - images

  e2e-aks:
    when: << pipeline.parameters.run_workflow_e2e_aks >>
    triggers:
    - schedule:
        # run every Monday at 00:00
        cron: "0 0 * * 1"
        <<: *master_only_workflow_filters
    jobs:
    - go_cache: *master_only_workflow_filters
    - build:
        <<: *master_only_workflow_filters
        requires:
        - go_cache
    - images:
        <<: *master_only_workflow_filters
        requires:
        - build
        docker_registry: ${AZURE_ACR_REGISTRY}.azurecr.io
    - aks-e2e:
        <<: *master_only_workflow_filters
        name: test/e2e/aks
        requires:
        - images

  kuma-master:
    jobs:
      - dev_mac: *master_workflow_filters
      - dev_ubuntu: *master_workflow_filters
      - go_cache: *master_workflow_filters
      - check:
          <<: *master_workflow_filters
          requires:
            - go_cache
      - build:
          <<: *master_workflow_filters
          requires:
            - go_cache
      - test:
          <<: *master_workflow_filters
          requires:
            - check
      - images:
          <<: *master_workflow_filters
          requires:
            - build
      - e2e:
          <<: *master_workflow_filters
          name: test/e2e
          requires:
            - images
            - check
      - e2e:
          <<: *master_workflow_filters
          name: test/e2e-ipv6
          requires:
            - images
            - check
          # custom parameters
          ipv6: true
      - release:
          <<: *master_workflow_filters
          requires:
            - test
            - test/e2e
      - helm-release:
          <<: *helm_release_workflow_filters
          requires:
          - release
