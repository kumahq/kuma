version: 2.1 # Adds support for executors, parameterized jobs, etc

reusable:

  constants:
    - &go_version "1.18"
    - &docker_version "20.10.7"

  docker_images:
    - &golang_image "cimg/go:1.18.0"

  vm_images:
    - &ubuntu_vm_image "ubuntu-2004:202111-01"

  snippets:
    # on branches master or release-*
    work_branch_workflow_filter: &work_branch_workflow_filter
      filters:
        branches:
          only:
           - master
           - /^release-.*/
        tags:
          ignore: /.*/
    # on tags
    tags_workflow_filter: &tags_workflow_filter
      filters:
        branches:
          ignore: /.*/
        tags:
          only: /.*/

# See https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version-21.
commands:
  install_build_tools:
    description: "Install an upstream Go release to $HOME/go"
    parameters:
      go_os:
        type: string
        default: linux
      go_arch:
        type: string
        default: amd64
      go_version:
        type: string
        default: *go_version
    steps:
    - run:
        # `unzip`    is necessary to install `protoc`
        # `gcc`      is necessary to run `go test -race`
        # `git`      is necessary because the CircleCI version is different somehow ¯\_(ツ)_/¯
        # `xz-utils` is necessary to decompress xz files
        name: "Install basic tools"
        command: |
          if [ -r /etc/os-release ]; then source /etc/os-release; fi
          case "$ID" in
          ubuntu)
            if ! command -v sudo 2>&1 >/dev/null; then
              apt update
              apt install -y sudo
            fi

            sudo apt update
            sudo env DEBIAN_FRONTEND=noninteractive apt install -y curl git make unzip gcc xz-utils
            ;;
          esac
    - run:
        name: "Install Go"
        # See https://golang.org/doc/install#tarball
        command: |
          curl -s --fail --location https://dl.google.com/go/go<<parameters.go_version>>.<<parameters.go_os>>-<<parameters.go_arch>>.tar.gz | tar -xz -C $HOME
          echo 'export PATH=$HOME/go/bin:$PATH' >> $BASH_ENV
          # if GOPATH is not set, `golang-ci` fails with an obscure message
          # "ERRO Running error: context loading failed: failed to load program with go/packages: could not determine GOARCH and Go compiler"
          echo 'export GOPATH=$HOME/.go-kuma-go' >> $BASH_ENV
    - run:
        name: "Update runc"
        # See https://github.com/rancher/k3d/issues/807 (runc's default version on the instance fails k3d)
        command: |
          if [[ `uname -s` == "Linux" ]]; then
            sudo sh -c 'curl -s --fail --location https://github.com/opencontainers/runc/releases/download/v1.1.0/runc.<<parameters.go_arch>> > /usr/bin/runc'
            sudo chown root:root /usr/bin/runc ; sudo chmod o+x /usr/bin/runc
          fi

executors:
  golang:
    resource_class: large
    docker:
    - image: *golang_image
    environment:
      GO_VERSION: *go_version

  vm-amd64:
    resource_class: large
    machine:
      image: *ubuntu_vm_image
    environment:
      GO_VERSION: *go_version

  vm-arm64:
    resource_class: arm.large
    machine:
      image: *ubuntu_vm_image
    environment:
      GO_VERSION: *go_version

  linux:
    resource_class: large
    machine:
      image: *ubuntu_vm_image
    environment:
      GO_VERSION: *go_version

  darwin:
    resource_class: medium
    macos:
      xcode: "12.5.1"
    environment:
      GO_VERSION: *go_version

jobs:
  dev:
    executor: << parameters.executor >>
    parameters:
      executor:
        description: The env in which we execute.
        type: string
        default: linux
    environment:
      CLANG_FORMAT_PATH: clang-format-13
    steps:
    - checkout
    - install_build_tools:
        go_os: << parameters.executor >>
    - run:
        name: "Install all development tools"
        command: |
          make dev/tools
    - unless:
        # Do NOT install `clang-format` on Mac since it takes unreasonable amount of time
        condition: {equal: [ darwin, << parameters.executor >>]}
        steps:
        - run:
            name: "Install check tools (clang-format, ...)"
            command: sudo apt update && sudo apt install -y clang-format
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: |
          make check BUILD_INFO_VERSION=latest
    - run:
        name: "Build all binaries"
        command: |
          make build
    - run:
        name: "Run unit tests"
        command: |
          make test

  go_cache:
    executor: << parameters.executor >>
    parameters:
      executor:
        description: the executor to run on
        type: string
        default: golang
    steps:
    - when:
        condition: {equal: [vm-amd64, << parameters.executor >>]}
        steps:
          - install_build_tools:
              go_arch: amd64
    - when:
        condition: {equal: [vm-arm64, << parameters.executor >>]}
        steps:
          - install_build_tools:
              go_arch: arm64
    - checkout
    - run:
        name: "Download Go modules"
        command: |
          go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: << parameters.executor >>-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
        - "/go/pkg/mod"
        - "/root/.go-kuma-go"

  check:
    executor: golang
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - golang-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Install check tools (clang-format, ...)"
        command: sudo apt update && sudo apt install -y clang-format
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: make check

  test:
    parameters:
      target:
        description: The test make target.
        type: string
        default: test
      arch:
        description: The golang arch.
        type: string
        default: amd64
    executor:
      name: vm-<< parameters.arch >>
    steps:
    - install_build_tools:
        go_arch: << parameters.arch >>
        go_os: linux
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - vm-<< parameters.arch >>-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: "Install all development tools"
        command: |
          make dev/tools
    - run:
        name: "Run tests"
        command: |
          export GINKGO_TEST_RESULTS_DIR=/tmp/ginkgo-test-results
          make << parameters.target >>
    - run:
        # Ref https://docs.codecov.com/docs/about-the-codecov-bash-uploader
        name: "Push coverage to Codecov"
        when: always
        command: |
          set -o errexit
          curl --fail --location --silent --output codecov https://codecov.io/bash
          readonly VERSION=$(grep -o 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2)
          readonly URL="https://raw.githubusercontent.com/codecov/codecov-bash"
          for i in 1 256 512 ; do
            echo checking SHA${i}SUM for version ${VERSION}
            shasum --algorithm $i --check --ignore-missing <(
              curl --location --silent "${URL}/${VERSION}/SHA${i}SUM"
            )
          done
          bash ./codecov -f "build/coverage/*.out"
    - store_artifacts:
        path: build/coverage
        destination: /coverage
    - store_test_results:
        path: /tmp/ginkgo-test-results

  e2e:
    parameters:
      ipv6:
        description: use IPv6
        type: boolean
        default: false
      k8sVersion:
        description: version of k3s to use or "kind" to use kind or "none" if no kubernetes needed
        type: string
        default: v1.21.7-k3s1
      parallelism:
        description: level of parallelisation
        type: integer
        default: 8
      target:
        description: makefile target
        type: string
        default: "test/e2e"
      arch:
        description: The golang arch
        type: string
        default: amd64
    executor:
      name: vm-<< parameters.arch >>
    parallelism: << parameters.parallelism >>
    steps:
      - run:
          name: dump params
          command: |
            echo "Running with: \
              ipv6:<< parameters.ipv6>> \
              k8s:<< parameters.k8sVersion >> \
              target:<< parameters.target >> \
              parallelism:<< parameters.parallelism >> \
              arch:<< parameters.arch >> \
            "

            echo "some combinations may run nothing"
      - unless:
          # This works around circleci limitation by skipping tests for combinations that don't make sense
          # See: https://discuss.circleci.com/t/matrix-exclude-entire-subset/43879
          condition:
            or:
              - and:
                  # On PRs only run some base tests (only 1 k8s version, no ipv6, no arm64)
                  - or:
                      - not: {matches: {pattern: "^release-.*", value: << pipeline.git.branch >>}}
                      - not: {equal: [master, << pipeline.git.branch >>]}
                  - or:
                      - << parameters.ipv6 >>
                      - equal: ["v1.19.16-k3s1", << parameters.k8sVersion >>]
                      - equal: ["arm64", << parameters.arch >>]
              - and:
                # Ipv6 only works with kind
                - << parameters.ipv6 >>
                - not: {equal: [kind, << parameters.k8sVersion >>]}
              - and:
                # disallow running tests on kind except if it's ipv6 or it's universal
                - equal: [kind, << parameters.k8sVersion >> ]
                - not:
                    or:
                      - << parameters.ipv6 >>
                      - equal: [test/e2e-universal, << parameters.target >>]
          steps:
            - install_build_tools:
                go_arch: << parameters.arch >>
            - checkout
            - restore_cache:
                keys:
                  # prefer the exact match
                  - vm-<< parameters.arch >>-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
            # Mount files from the upstream jobs
            - attach_workspace:
                at: build
            - run:
                name: "Install all development tools"
                command: |
                  make dev/tools
            - run:
                name: "Setup Helm"
                command: |
                  helm repo add kuma https://kumahq.github.io/charts
            - when: # CircleCI's DNS on IPV6 prevents resolving inside Kind. When change to 8.8.8.8 and remove "search" section (. removes it), resolving works again
                condition: << parameters.ipv6 >>
                steps:
                  - run:
                      name: Enable IPV6 and change DNS
                      command: |
                        cat \<<'EOF' | sudo tee /etc/docker/daemon.json
                        {
                          "ipv6": true,
                          "fixed-cidr-v6": "2001:db8:1::/64",
                          "dns": ["8.8.8.8"],
                          "dns-search": ["."]
                        }
                        EOF
                        sudo service docker restart
            - run:
                name: "Run E2E tests"
                command: |
                  export GINKGO_TEST_RESULTS_DIR=/tmp/ginkgo-test-results
                  if [[ "<< parameters.ipv6 >>" == "true" ]]; then
                    export IPV6=true
                    export KUMA_DEFAULT_RETRIES=60
                    export KUMA_DEFAULT_TIMEOUT="6s"
                  fi
                  if [[ "<< parameters.k8sVersion >>" != "kind" ]] && [[ "<< parameters.k8sVersion >>" != "none" ]]; then
                    export CI_K3S_VERSION=<< parameters.k8sVersion >>
                    export K3D=true
                  fi
                  if [[ "<< parameters.arch >>" == "arm64" ]]; then
                    export GINKGO_E2E_FLAGS="${GINKGO_FLAGS} --label-filter=\"!arm-not-supported\""
                    export MAKE_PARAMETERS="-j1"
                  else
                    export MAKE_PARAMETERS="-j2"
                  fi

                  if [[ "<< parameters.target >>" == "test/e2e" ]]; then
                    export E2E_PKG_LIST=${E2E_PKG_LIST:-$(circleci tests glob ./test/e2e/* | circleci tests split | xargs printf "./%s/... ")}
                  fi
                  env
                  make ${MAKE_PARAMETERS} << parameters.target >>
            - store_test_results:
                path: /tmp/ginkgo-test-results

  build:
    parameters:
      arch:
        description: The golang arch
        type: string
        default: amd64
    executor: golang
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - golang-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: Build all Kuma binaries (such as, kumactl, kuma-cp, kuma-dp, kuma-prometheus-sd)
        command: make build
    - setup_remote_docker:
        version: *docker_version
    - run:
        name: Build Docker images
        command: |
          GOARCH=<<parameters.arch>> make images
    - run:
        name: Save Docker images into TAR archives
        command: |
          GOARCH=<<parameters.arch>> make docker/save
    # Persist the specified paths into the workspace for use in downstream jobs
    - persist_to_workspace:
        root: build
        paths:
        - docker-images-<<parameters.arch>>
        - artifacts-linux-<<parameters.arch>>

  release:
    executor: vm-amd64
    steps:
    - install_build_tools
    - checkout
    - run:
        name: "Download Go modules"
        command: go mod download
    - run:
        name: Build Packages
        command: |
          ./tools/releases/distros.sh --package
    - run:
        name: Push Packages
        command: |
          ./tools/releases/distros.sh --release
    - run:
        name: Build Docker
        command: |
          ./tools/releases/docker.sh --build
    - run:
        name: Push Docker
        command: |
          ./tools/releases/docker.sh --push
    - run:
        name: Create and Push multi arch manifest for Docker images
        command: |
          ./tools/releases/docker.sh --manifest

workflows:
  version: 2

  kuma-commit:
    jobs:
      - dev:
          # Avoids running expensive workflow on PRs
          <<: *work_branch_workflow_filter
          name: dev-<< matrix.executor >>
          matrix:
            alias: dev
            parameters:
              executor: [linux, darwin]
      - go_cache:
          name: go_cache-<< matrix.executor >>
          matrix:
            alias: go_cache
            parameters:
              executor: [golang, vm-amd64, vm-arm64 ]
      - check:
          requires: [go_cache]
      - build:
          name: build-<< matrix.arch >>
          matrix:
            alias: build
            parameters:
              arch: [amd64, arm64]
          requires: [go_cache-golang]
      - test:
          name: test-<< matrix.arch >>
          matrix:
            alias: test
            parameters:
              arch: [amd64, arm64]
          requires: [check]
      - e2e:
          name: test/e2e-legacy-k8s:<< matrix.k8sVersion >>-<< matrix.arch >>-v6:<< matrix.ipv6 >>
          matrix:
            alias: test/e2e-legacy
            parameters:
              k8sVersion: [v1.19.16-k3s1, v1.21.7-k3s1, kind]
              ipv6: [true, false]
              arch: [amd64, arm64]
          parallelism: 8
          target: test/e2e
          requires: [build-<< matrix.arch >>, check]
      - e2e:
          name: << matrix.target >>:<< matrix.k8sVersion >>-<< matrix.arch >>-v6:<< matrix.ipv6 >>
          matrix:
            alias: test/e2e
            parameters:
              k8sVersion: [v1.19.16-k3s1, v1.21.7-k3s1, kind]
              ipv6: [true, false]
              target: [test/e2e-kubernetes, test/e2e-universal, test/e2e-multizone]
              arch: [amd64, arm64]
          parallelism: 1
          requires: [build-<< matrix.arch >>, check]
      - release:
          # publish artifacts speculatively for normal commits
          <<: *work_branch_workflow_filter
          requires: [build]
      - release:
          # only publish tagged artifacts if everything passes
          <<: *tags_workflow_filter
          requires: [dev, test, test/e2e, test/e2e-legacy]
