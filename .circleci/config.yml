version: 2

go-defaults: &go-defaults
  working_directory: /go/src/github.com/Kong/kuma
  docker:
  - image: golang:1.12.5
  environment:
    GO111MODULE: "on"

remote-docker-defaults: &remote-docker-defaults
  docker:
  - image: circleci/golang:1.12

vm-executor-defaults: &vm-executor-defaults
  machine:
    image: ubuntu-1604:201903-01

mac-executor-defaults: &mac-executor-defaults
  macos:
    xcode: "9.0"

jobs:
  dev/golang:
    docker:
    - image: golang:1.12.5
    environment:
      GO111MODULE: "on"
    steps:
    - checkout
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Build all binaries"
        command: make build
    - run:
        name: "Run unit tests"
        command: GO_TEST_OPTS='-p 2' make test

  dev/ubuntu:
    docker:
    - image: ubuntu:16.04
    environment:
      GO_VERSION: 1.12.5
      GO111MODULE: "on"
      CLANG_FORMAT_PATH: clang-format-6.0
    steps:
    - checkout
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        # `gcc`   is necessary to run `go test -race`
        command: apt update && apt install -y unzip gcc
    - run:
        name: "Install Go"
        command: |
          apt update && apt install -y curl git make
          # see https://golang.org/doc/install#tarball
          curl -L https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar -xz -C $HOME
    - run:
        name: "Install all development tools"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make dev/tools
    - run:
        name: "Install check tools (clang-format, ...)"
        # `clang-format` is used to format `*.proto` files
        command: |
          apt update && apt install -y clang-format-6.0
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make check BUILD_INFO_VERSION=latest
    - run:
        name: "Build all binaries"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make build
    - run:
        name: "Run unit tests"
        command: |
          export PATH=$HOME/go/bin:$PATH
          GO_TEST_OPTS='-p 2' make test

  dev/mac:
    <<: *mac-executor-defaults
    environment:
      GO_VERSION: 1.12.5
      GO111MODULE: "on"
    steps:
    - checkout
    - run:
        name: "Install Go"
        command: |
          # see https://golang.org/doc/install#tarball
          curl -L https://dl.google.com/go/go${GO_VERSION}.darwin-amd64.tar.gz | tar -xz -C $HOME
    - run:
        name: "Install all development tools"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make dev/tools
    - run:
        name: "Install check tools (clang-format, ...)"
        # `clang-format` is used to format `*.proto` files
        command: |
          brew install clang-format
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make check BUILD_INFO_VERSION=latest
    - run:
        name: "Build all binaries"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make build
    - run:
        name: "Run unit tests"
        command: |
          export PATH=$HOME/go/bin:$PATH
          GO_TEST_OPTS='-p 2' make test

  check:
    <<: *go-defaults
    environment:
      GO111MODULE: "on"
      CLANG_FORMAT_PATH: clang-format-10
    steps:
    - checkout
    - restore_cache:
        keys:
        - go.mod/{{ checksum "go.sum" }}
    - run:
        name: "Download Go modules"
        command: |
          go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: go.mod/{{ checksum "go.sum" }}
        paths:
          - "/go/pkg/mod"
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Install check tools (clang-format, ...)"
        command: |
          # see https://apt.llvm.org/

          cat  >>/etc/apt/sources.list <<EOF

          deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch main
          deb-src http://apt.llvm.org/stretch/ llvm-toolchain-stretch main
          # 7
          deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch-7 main
          deb-src http://apt.llvm.org/stretch/ llvm-toolchain-stretch-7 main
          # 8
          deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch-8 main
          deb-src http://apt.llvm.org/stretch/ llvm-toolchain-stretch-8 main
          EOF

          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -

          apt update && apt install -y clang-format-10
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: make check BUILD_INFO_VERSION=latest

  api/check:
    <<: *go-defaults
    steps:
    - checkout
    - restore_cache:
        keys:
        - api/go.mod/{{ checksum "api/go.sum" }}
    - run:
        name: "Download Go modules"
        command: |
          cd api && go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: api/go.mod/{{ checksum "api/go.sum" }}
        paths:
          - "/go/pkg/mod"
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools -C api
    - run:
        name: "Verify that auto-generated code is up-to-date"
        command: make check -C api

  test:
    <<: *go-defaults
    resource_class: large
    steps:
    - checkout
    - restore_cache:
        keys:
        - go.mod/{{ checksum "go.sum" }}
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Run unit tests"
        command: GO_TEST_OPTS='-p 2' make test
    - store_artifacts:
        path: build/coverage
        destination: /coverage

  integration:
    <<: *vm-executor-defaults
    environment:
      GO_VERSION: 1.12.5
      GO111MODULE: "on"
      GOPATH: /home/circleci/.go
    steps:
    - checkout
    - run:
        name: "Install Go"
        command: |
          apt update && apt install -y curl git make
          # see https://golang.org/doc/install#tarball
          curl -L https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar -xz -C $HOME
    - restore_cache:
        keys:
        - vm-executor/go.mod/{{ checksum "go.sum" }}
    - run:
        name: "Download Go modules"
        command: |
          export PATH=$HOME/go/bin:$PATH
          go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: vm-executor/go.mod/{{ checksum "go.sum" }}
        paths:
          - "/home/circleci/.go"
    - run:
        name: "Install all development tools"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make dev/tools
    - run:
        name: "Run integration tests"
        command: | 
          export PATH=$HOME/go/bin:$PATH
          make integration
    - store_artifacts:
        path: build/coverage
        destination: /coverage

  build:
    <<: *go-defaults
    steps:
    - checkout
    - restore_cache:
        keys:
        - go.mod/{{ checksum "go.sum" }}
    - run: make build

  images:
    <<: *remote-docker-defaults
    steps:
    - checkout
    - setup_remote_docker
    - run: make images

  example/docker-compose:
    <<: *vm-executor-defaults
    steps:
    - checkout
    - run:
        name: Start Docker Compose setup
        command: make run/example/docker-compose DOCKER_COMPOSE_OPTIONS=--detach
    - run:
        name: Wait until Envoy listener gets configured
        command: make wait/example/docker-compose
    - run:
        name: Make test requests via Envoy
        command: make curl/example/docker-compose
    - run:
        name: Verify Envoy stats
        command: make verify/example/docker-compose

  example/minikube:
    <<: *vm-executor-defaults
    steps:
    - checkout
    - run:
        name: Install Minikube
        command: make dev/install/minikube
    - run:
        name: Install Kubectl
        command: make dev/install/kubectl
    - run:
        name: Start Minikube
        command: sudo CHANGE_MINIKUBE_NONE_USER=true $HOME/bin/minikube start --vm-driver=none
    - run:
        name: Build Control Plane
        command: make build/example/minikube
    - run:
        name: Deploy Kuma demo
        command: make deploy/example/minikube
    - run:
        name: Wait until Envoy listener gets configured
        command: make wait/example/minikube
    - run:
        name: Make test requests via Envoy
        command: make curl/example/minikube
    - run:
        name: Verify Envoy stats
        command: make verify/example/minikube
    - run:
        name: Verify kumactl workflow
        command: make kumactl/example/minikube
  images/push:
    <<: *vm-executor-defaults
    steps:
    - checkout
    - run:
        name: Push Docker images
        command: make images/push BINTRAY_USERNAME=$BINTRAY_USERNAME BINTRAY_API_KEY=$BINTRAY_API_KEY KUMA_VERSION=$CIRCLE_TAG

#
# Below, the tag filter needs to be in all jobs
# transitively required by the push job; otherwise,
# the build isn't triggered.
# TODO investigate whether it's possible to DRY it,
# perhaps by creating a separate workflow for deploy,
# which depends on the first workflow (check/test/build)
#
workflows:
  version: 2
  kuma:
    jobs:
    - api/check:
        filters:
          tags:
            only: /.*/
    - dev/golang
    - dev/mac
    - dev/ubuntu
    - check:
        filters:
          tags:
            only: /.*/
    - test:
        requires:
        - check
        - api/check
        filters:
          tags:
            only:
              /.*/
    - integration:
        requires:
        - check
    - build:
        requires:
        - test
        filters:
          tags:
            only: /.*/
    - images:
        requires:
        - build
        filters:
          tags:
            only: /.*/
#    TODO(yskopets): Bring back support for Docker Compose
#    - example/docker-compose:
#        requires:
#        - build
    - example/minikube:
        requires:
        - build
    - images/push:
        requires:
        - images
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /.*/
