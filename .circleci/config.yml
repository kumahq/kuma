version: 2.1 # Adds support for executors, parameterized jobs, etc

orbs:
  aws-cli: circleci/aws-cli@1.4.0
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2

reusable:

  constants:
  - &go_version "1.15.6"

  docker_images:
  - &golang_image "golang:1.15.6"
  - &circleci_golang_image "circleci/golang:1.15.6"

  vm_images:
  - &ubuntu_vm_image "ubuntu-1604:202007-01"

  snippets:

    # apparently, a job can run on a tag only if it has an explicit configuration for tag filters
    release_workflow_filters: &release_workflow_filters
      filters:
        branches:
          ignore: /.*/
        tags:
          only: /.*/

    # release the charts only on tagged releases
    helm_release_workflow_filters: &helm_release_workflow_filters
      filters:
        branches:
          ignore: /.*/
        tags:
          only: /^(\d+)\.(\d+)\.(\d+)$/

    # filters for the kuma-commit workflow
    master_workflow_filters: &master_workflow_filters
      filters:
        branches:
          only: master, /^release-.*/
        tags:
          ignore: /.*/ # we don't want to run master workflow on commits with tag because use_local_kuma_images has to be false for all the jobs to pass

    # filters for the kuma-commit workflow
    commit_workflow_filters: &commit_workflow_filters
      filters:
        branches:
          ignore: master, /^release-.*/, gh-pages

executors:
  golang:
    docker:
    - image: *golang_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"
    working_directory: /go/src/github.com/kumahq/kuma

  remote-docker:
    docker:
    - image: *circleci_golang_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

  vm:
    resource_class: large
    machine:
      image: *ubuntu_vm_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

  mac:
    resource_class: large
    macos:
      xcode: "11.6.0"
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

commands:
  push-image-to-ecr:
    parameters:
      repository:
        description: "Name of the ECR repository to push"
        type: string
    steps:
    - aws-ecr/push-image:
        account-url: ECR_REGISTRY
        tag: "${CIRCLE_TAG}"
        repo: "<< parameters.repository >>"

  eks-ecr-setup:
    steps:
    - run:
        name: "Configure AWS Access Key ID"
        command: aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
    - run:
        name: "Configure AWS Secret Access Key"
        command: aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
    - run:
        name: "Configure AWS default region"
        command: aws configure set default.region ${AWS_DEFAULT_REGION}
    - run:
        name: "Log into Amazon ECR"
        command: |
          # get-login-password returns a password that we pipe to the docker
          #  login command
          aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
            docker login --username AWS --password-stdin ${ECR_REGISTRY}

jobs:
  eks-create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster_name:
        description: "Name of the EKS cluster to create"
        type: string
      nodes:
        description: "Amount of nodes to be created in a cluster"
        type: integer
        default: 1
    steps:
    - aws-eks/create-cluster:
        cluster-name: "<< parameters.cluster_name >>"
        nodes: << parameters.nodes >>

  eks-ecr-clean-repository:
    executor: aws-cli/default
    parameters:
      repository_name:
        description: "Name of the ECR repository to clean"
        type: string
    steps:
    - aws-cli/install

    - run:
        name: "Remove test image from registry"
        command: |
          aws ecr batch-delete-image \
            --repository-name "<< parameters.repository_name >>" \
            --image-ids imageTag="${CIRCLE_TAG}"

  eks-ecr-clean-registry:
    executor: aws-cli/default
    steps:
    - aws-cli/install

    - run:
        name: "Remove all test images from repository"
        command: |
          for image in kumactl kuma-cp kuma-dp kuma-init kuma-universal; do
            images="$(aws ecr list-images --repository-name ${image})"

            aws ecr batch-delete-image \
              --repository-name "${image}" \
              --cli-input-json "${images}" || true
          done

  eks-e2e:
    executor: golang
    parameters:
      cluster_1_name:
        description: "Name of the 1st. EKS cluster"
        type: string
        default: kuma-cicd-e2e-test-1
      cluster_2_name:
        description: "Name of the 2st. EKS cluster"
        type: string
        default: kuma-cicd-e2e-test-2
    steps:
    - checkout

    - run:
        name: "Setup Environment"
        command: |
          echo "export PATH=$HOME/.local/bin:$PATH" >> $BASH_ENV
          echo "export PATH=$HOME/go/bin:$PATH" >> $BASH_ENV
          echo "export PATH=$HOME/bin:$PATH" >> $BASH_ENV

          # we have to install `unzip` to be able to install aws-cli
          apt update
          apt install -y unzip

    - aws-cli/install

    - aws-eks/install-aws-iam-authenticator

    - kubernetes/install

    - aws-eks/update-kubeconfig-with-authenticator:
        cluster-name: "<< parameters.cluster_1_name >>"
        kubeconfig-file-path: ~/.kube/kind-kuma-1-config

    - aws-eks/update-kubeconfig-with-authenticator:
        cluster-name: "<< parameters.cluster_2_name >>"
        kubeconfig-file-path: ~/.kube/kind-kuma-2-config

    - restore_cache:
        keys:
        # prefer the exact match
        - vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}

    - run:
        name: "Download Go modules"
        command: go mod download

    # since execution of go commands might change contents of "go.sum",
    #  we have to save cache immediately
    - save_cache:
        key: vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
        - "/home/circleci/.go-kuma-go"

    - run:
        name: "Install all development tools"
        command: make dev/tools

    - run:
        name: "Setup Helm"
        command: helm repo add kuma https://kumahq.github.io/charts

    # We need kumactl to be built to run tests, and to not build it again,
    #  we can use the one already build by earlier jobs
    - attach_workspace:
        at: build

    - run:
        name: "Run E2E tests"
        command: |
          export KUMA_UNIVERSAL_IMAGE="${ECR_REGISTRY}/kuma-universal:${CIRCLE_TAG}";
          export E2E_PKG_LIST="./test/e2e/helm";
          export API_VERSION="v2";

          make test/e2e/test \
            KUMA_GLOBAL_IMAGE_REGISTRY="${ECR_REGISTRY}" \
            KUMA_GLOBAL_IMAGE_TAG="${CIRCLE_TAG}" \
            KUMA_CNI_CONF_NAME="10-aws.conflist" \
            KUMA_USE_LOAD_BALANCER=true \
            KUMA_IN_EKS=true \
            KUMA_UNIVERSAL_IMAGE="${KUMA_UNIVERSAL_IMAGE}"

    - run:
        name: "Delete cluster 1"
        when: always
        command: |
          eksctl delete cluster "<< parameters.cluster_1_name >>" || true

    - run:
        name: "Delete cluster 2"
        when: always
        command: |
          eksctl delete cluster "<< parameters.cluster_2_name >>" || true

  eks-delete-cluster:
    executor: aws-eks/python3
    parameters:
      cluster_name:
        description: "Name of the EKS cluster to delete"
        type: string
    steps:
    - aws-cli/install

    - run:
        name: "Delete cluster 1"
        command: |
          eksctl delete cluster "<< parameters.cluster_name >>" || true

  eks-ecr-push-images:
    executor: remote-docker
    steps:
    - checkout

    - setup_remote_docker:
        version: 19.03.12

    - aws-cli/install

    # Mount files from the upstream jobs
    - attach_workspace:
        at: build

    - run:
        name: "Load Docker images from TAR archives"
        command: make docker/load

    - eks-ecr-setup

    - push-image-to-ecr:
        repository: kuma-cp

    - push-image-to-ecr:
        repository: kuma-dp

    - push-image-to-ecr:
        repository: kuma-init

    - push-image-to-ecr:
        repository: kumactl

    - push-image-to-ecr:
        repository: kuma-universal

  dev_golang:
    docker:
    - image: *golang_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"
    steps:
    - checkout
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Build all binaries"
        command: make build
    - run:
        name: "Run unit tests"
        command: GO_TEST_OPTS='-p 2' make test

  dev_ubuntu:
    docker:
    - image: ubuntu:18.04
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"
      CLANG_FORMAT_PATH: clang-format-13
      # if GOPATH is not set, `golang-ci` fails with an obscure message
      # "ERRO Running error: context loading failed: failed to load program with go/packages: could not determine GOARCH and Go compiler"
      GOPATH: /root/.go-kuma-go
    steps:
    - run:
        name: "Install prerequisites"
        # make sure to deploy `git` befor checking out the code, otherwise Circle uses its own version, which behaves differently
        # `unzip` is necessary to install `protoc`
        # `gcc`   is necessary to run `go test -race`
        command: |
          apt update && apt install -y curl git make unzip gcc
    - checkout
    - run:
        name: "Install Go"
        command: |
          # see https://golang.org/doc/install#tarball
          curl -L https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar -xz -C $HOME
    - run:
        name: "Install all development tools"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make dev/tools
    # - run:
    #     name: "Install check tools (clang-format, ...)"
    #     command: |
    #       apt update && apt install -y wget

    #       # see https://apt.llvm.org/

    #       cat  >>/etc/apt/sources.list \<<EOF

    #       deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial main
    #       deb-src http://apt.llvm.org/xenial/ llvm-toolchain-xenial main

    #       EOF

    #       wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -

    #       apt update && apt install -y clang-format-11
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make check BUILD_INFO_VERSION=latest
    - run:
        name: "Build all binaries"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make build
    - run:
        name: "Run unit tests"
        command: |
          export PATH=$HOME/go/bin:$PATH
          GO_TEST_OPTS='-p 2' make test

  dev_mac:
    executor: mac
    environment:
      # if GOPATH is not set, `golang-ci` fails with an obscure message
      # "ERRO Running error: context loading failed: failed to load program with go/packages: could not determine GOARCH and Go compiler"
      GOPATH: /Users/distiller/.go-kuma-go
    steps:
    - checkout
    - run:
        name: "Install Go"
        command: |
          # see https://golang.org/doc/install#tarball
          curl -L https://dl.google.com/go/go${GO_VERSION}.darwin-amd64.tar.gz | tar -xz -C $HOME
    - run:
        name: "Install all development tools"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make dev/tools
    # Do NOT install `clang-format` on Mac since it takes unreasonable amount of time
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make check BUILD_INFO_VERSION=latest
    - run:
        name: "Build all binaries"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make build
    - run:
        name: "Run unit tests"
        command: |
          export PATH=$HOME/go/bin:$PATH
          GO_TEST_OPTS='-p 2' make test

  go_cache:
    executor: golang
    steps:
    - checkout
    - run:
        name: "Download Go modules"
        command: |
          make vet
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
        - "/go/pkg/mod"

  check:
    executor: golang
    # we need a large resource class to satisfy the needs of golangci-lint run under `make check`
    resource_class: large
    environment:
      CLANG_FORMAT_PATH: clang-format-13
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Install check tools (clang-format, ...)"
        command: |
         # see https://apt.llvm.org/

         cat  >>/etc/apt/sources.list \<<EOF

         deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch main
         deb-src http://apt.llvm.org/stretch/ llvm-toolchain-stretch main

         EOF

         wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -

         apt update && apt install -y clang-format-13
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: make check

  api_check:
    executor: golang
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - api-go.mod-{{ .Branch }}-{{ checksum "api/go.sum" }}
    - run:
        name: "Download Go modules"
        command: |
          cd api && go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: api-go.mod-{{ .Branch }}-{{ checksum "api/go.sum" }}
        paths:
          - "/go/pkg/mod"
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools -C api
    - run:
        name: "Verify that auto-generated code is up-to-date"
        command: make check -C api

  test:
    executor: golang
    resource_class: medium
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Run unit tests"
        command: GO_TEST_OPTS='-p 2' make test
    - store_artifacts:
        path: build/coverage
        destination: /coverage

  integration:
    executor: vm
    parameters:
      target:
        description: The integration make target.
        type: string
        default: integration
    environment:
      GOPATH: /home/circleci/.go-kuma-go
    steps:
    - checkout
    - run:
        name: "Install Go"
        command: |
          apt update && apt install -y curl git make
          # see https://golang.org/doc/install#tarball
          curl -L https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar -xz -C $HOME
    - restore_cache:
        keys:
        # prefer the exact match
        - vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: "Download Go modules"
        command: |
          export PATH=$HOME/go/bin:$PATH
          go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
          - "/home/circleci/.go-kuma-go"
    - run:
        name: "Install all development tools"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make dev/tools
    - run:
        name: "Run integration tests"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make << parameters.target >>
    - store_artifacts:
        path: build/coverage
        destination: /coverage

  e2e:
    executor: vm
    parameters:
      api:
        description: XDS API version
        type: string
        default: v3
    parallelism: 2
    environment:
      GOPATH: /home/circleci/.go-kuma-go
    steps:
      - checkout
      - run:
          name: "Install Go"
          command: |
            apt update && apt install -y curl git make
            # see https://golang.org/doc/install#tarball
            curl -L https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar -xz -C $HOME
      - restore_cache:
          keys:
            # prefer the exact match
            - vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
      - run:
          name: "Download Go modules"
          command: |
            export PATH=$HOME/go/bin:$PATH
            go mod download
      # since execution of go commands might change contents of "go.sum", we have to save cache immediately
      - save_cache:
          key: vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/.go-kuma-go"
      - run:
          name: "Install all development tools"
          command: |
            export PATH=$HOME/go/bin:$PATH
            make dev/tools
      - run:
          name: "Setup Helm"
          command: |
            export PATH=$HOME/go/bin:$PATH
            helm repo add kuma https://kumahq.github.io/charts
      - run:
          name: "Run E2E tests"
          command: |
            export PATH=$HOME/go/bin:$PATH
            export E2E_PKG_LIST=$(circleci tests glob ./test/e2e/* | circleci tests split | xargs printf "./%s/... ")
            export API_VERSION=<< parameters.api >>
            make test/e2e

  build:
    executor: golang
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: Build all Kuma binaries (such as, kumactl, kuma-cp, kuma-dp, kuma-prometheus-sd)
        command: make build

    # Persist the specified paths into the workspace for use in downstream jobs
    - persist_to_workspace:
        root: build
        paths:
        - artifacts-linux-amd64

  images:
    executor: remote-docker
    steps:
    - checkout
    # Mount files from the upstream jobs
    - attach_workspace:
        at: build
    - setup_remote_docker:
        version: 19.03.12
    - run:
        name: Build Docker images
        command: make docker/build
    - run:
        name: Save Docker images into TAR archives
        command: make docker/save
    # Persist the specified paths into the workspace for use in downstream jobs
    - persist_to_workspace:
        root: build
        paths:
        - docker-images

  example_docker-compose:
    executor: vm
    parameters:
      use_local_kuma_images:
        description: Use local Docker images from CircleCI workspace instead of downloading ones from bintray.io.
        type: boolean
        default: true
    environment:
      KUMACTL_INSTALL_USE_LOCAL_IMAGES: << parameters.use_local_kuma_images >>
    steps:
    - checkout
    # Mount files from the upstream jobs
    - attach_workspace:
        at: build
    - when:
        condition: << parameters.use_local_kuma_images >>
        steps:
        - run:
            name: Load Docker images
            command: make load/example/docker-compose
    - run:
        name: Start Docker Compose setup
        command: make deploy/example/docker-compose DOCKER_COMPOSE_OPTIONS=--detach
    - run:
        name: Wait until Envoy listener gets configured
        command: make wait/example/docker-compose
    - run:
        name: Make test requests via Envoy
        command: make curl/example/docker-compose
    - run:
        name: Verify Envoy stats
        command: make verify/example/docker-compose
    - run:
        name: Verify traffic routing without mTLS
        command: make verify/traffic-routing/docker-compose/without-mtls
    - run:
        name: Verify traffic routing with mTLS
        command: make verify/traffic-routing/docker-compose/with-mtls

  example_minikube:
    executor: vm
    parameters:
      kubernetes_version:
        description: The version of Kubernetes to test on.
        type: string
        default: "v1.15.0"
      use_local_kuma_images:
        description: Use local Docker images from CircleCI workspace instead of downloading ones from bintray.io.
        type: boolean
        default: true
    environment:
      KUMACTL_INSTALL_USE_LOCAL_IMAGES: << parameters.use_local_kuma_images >>
    steps:
    - checkout
    # Mount files from the upstream jobs
    - attach_workspace:
        at: build
    - run:
        name: Install Minikube
        command: make dev/install/minikube
    - run:
        name: Install Kubectl
        command: make dev/install/kubectl
    - run:
        name: Install Conntrack # need for minikube on Ubuntu with --vm-driver=non
        command: |
          sudo apt-get update
          sudo apt-get install -y conntrack
    - run:
        name: Start Minikube
        command: sudo CHANGE_MINIKUBE_NONE_USER=true $HOME/bin/minikube start --vm-driver=none --kubernetes-version=<< parameters.kubernetes_version >>
    - when:
        condition: << parameters.use_local_kuma_images >>
        steps:
        - run:
            name: Load Docker images into Minikube
            command: make load/example/minikube
    - run:
        name: Deploy example setup
        command: make deploy/example/minikube
    - run:
        name: Wait until Envoy listener gets configured
        command: make wait/example/minikube
    - run:
        name: Make test requests via Envoy
        command: make curl/example/minikube
    - run:
        name: Verify Envoy stats
        command: make verify/example/minikube
    - run:
        name: Enable mTLS
        command: make apply/example/minikube/mtls
    - run:
        name: Wait until Envoy is configured for mTLS
        command: make wait/example/minikube/mtls
    - run:
        name: Make test requests via Envoy with mTLS
        command: make curl/example/minikube
    - run:
        name: Verify Envoy mTLS stats
        command: make verify/example/minikube/mtls
    - run:
        name: Verify kumactl workflow
        command: make kumactl/example/minikube
    - run:
        name: Undeploy example setup
        command: make undeploy/example/minikube
    - run:
        name: Deploy example setup for traffic routing
        command: make deploy/traffic-routing/minikube
    - run:
        name: Verify traffic routing without mTLS
        command: make verify/traffic-routing/minikube/without-mtls
    - run:
        name: Verify traffic routing with mTLS
        command: make verify/traffic-routing/minikube/with-mtls

  release:
    executor: golang
    steps:
    - checkout
    - setup_remote_docker:
        version: 19.03.12
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: "Install Docker client"
        command: |
          VER="19.03.12"
          curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
          tar -xz -C /tmp -f /tmp/docker-$VER.tgz
          mv /tmp/docker/docker /usr/bin
    - run:
        name: Build Packages
        command: ./tools/releases/distros.sh --package --version $CIRCLE_TAG --sha $CIRCLE_SHA1
    - run:
        name: Push Packages
        command: ./tools/releases/distros.sh --release --version $CIRCLE_TAG
    - run:
        name: Build Docker
        command: ./tools/releases/docker.sh --build --version $CIRCLE_TAG
    - run:
        name: Push Docker
        command: ./tools/releases/docker.sh --push --version $CIRCLE_TAG

  helm-release:
    executor: golang
    steps:
    - checkout
    - run:
        name: "Install Helm Chart Releaser"
        command: |
          VER="1.1.1"
          curl -L -o /tmp/cr-$VER.tgz https://github.com/helm/chart-releaser/releases/download/v$VER/chart-releaser_${VER}_linux_amd64.tar.gz
          mkdir -p /tmp/cr
          tar -xz -C /tmp/cr -f /tmp/cr-$VER.tgz
          mv /tmp/cr/cr /usr/bin
    - run:
        name: "Package Helm Charts"
        command: |
          ./tools/releases/helm.sh --package
    - run:
        name: "Release Helm Charts"
        command: |
          ./tools/releases/helm.sh --release


#
# Below, the tag filter needs to be in all jobs
# transitively required by the push job; otherwise,
# the build isn't triggered.
# TODO investigate whether it's possible to DRY it,
# perhaps by creating a separate workflow for deploy,
# which depends on the first workflow (check/test/build)
#
workflows:
  version: 2
  kuma-commit:
    jobs:
    - go_cache: *commit_workflow_filters
    - check:
        <<: *commit_workflow_filters
        requires:
        - go_cache
    - build:
        <<: *commit_workflow_filters
        requires:
        - go_cache
    - integration:
        <<: *commit_workflow_filters
        requires:
        - check
        # custom parameters
        target: -j1 integration test
    - images:
        <<: *commit_workflow_filters
        requires:
        - build
    - example_docker-compose:
        <<: *commit_workflow_filters
        name: docker-compose
        requires:
        - images
        # custom parameters
        use_local_kuma_images: true
    - example_minikube:
        <<: *commit_workflow_filters
        name: minikube_v1_16
        requires:
          - images
        # custom parameters
        kubernetes_version: v1.16.15
        use_local_kuma_images: true
    - example_minikube:
        <<: *commit_workflow_filters
        name: minikube_v1_18
        requires:
          - images
        # custom parameters
        kubernetes_version: v1.18.16
        use_local_kuma_images: true
    - example_minikube:
        <<: *commit_workflow_filters
        name: minikube_v1_20
        requires:
          - images
        # custom parameters
        kubernetes_version: v1.20.4
        use_local_kuma_images: true
    - e2e:
        <<: *commit_workflow_filters
        name: test/e2e
        requires:
          - images
    - eks-ecr-push-images:
        <<: *commit_workflow_filters
        requires:
        - images
    - eks-create-cluster:
        <<: *commit_workflow_filters
        name: eks-create-cluster-1
        # custom parameters
        cluster_name: kuma-cicd-e2e-test-1
    - eks-create-cluster:
        <<: *commit_workflow_filters
        name: eks-create-cluster-2
        # custom parameters
        cluster_name: kuma-cicd-e2e-test-2
    - eks-e2e:
        <<: *commit_workflow_filters
        requires:
        - eks-ecr-push-images
        - eks-create-cluster-1
        - eks-create-cluster-2
    - eks-ecr-clean-repository:
        <<: *commit_workflow_filters
        name: ecr-clean-kuma-cp
        requires:
        - eks-e2e
        repository_name: kuma-cp
    - eks-ecr-clean-repository:
        <<: *commit_workflow_filters
        name: ecr-clean-kuma-dp
        requires:
        - eks-e2e
        repository_name: kuma-dp
    - eks-ecr-clean-repository:
        <<: *commit_workflow_filters
        name: ecr-clean-kuma-init
        requires:
        - eks-e2e
        repository_name: kuma-init
    - eks-ecr-clean-repository:
        <<: *commit_workflow_filters
        name: ecr-clean-kumactl
        requires:
        - eks-e2e
        repository_name: kumactl
    - eks-ecr-clean-repository:
        <<: *commit_workflow_filters
        name: ecr-clean-kumactl
        requires:
        - eks-e2e
        repository_name: kumactl

  clean-eks:
    triggers:
    - schedule:
        cron: "0 0 * * *"
        <<: *commit_workflow_filters
    jobs:
    - eks-ecr-clean-registry
    - eks-delete-cluster:
        cluster_name: kuma-cicd-e2e-test-1
    - eks-delete-cluster:
        cluster_name: kuma-cicd-e2e-test-2

  kuma-master:
    jobs:
      - dev_golang: *master_workflow_filters
      - dev_mac: *master_workflow_filters
      - dev_ubuntu: *master_workflow_filters
      - go_cache: *master_workflow_filters
      - api_check:
          <<: *master_workflow_filters
          requires:
            - go_cache
      - check:
          <<: *master_workflow_filters
          requires:
            - go_cache
      - build:
          <<: *master_workflow_filters
          requires:
            - go_cache
      - test:
          <<: *master_workflow_filters
          requires:
            - api_check
            - check
      - integration:
          <<: *master_workflow_filters
          requires:
            - api_check
            - check
      - images:
          <<: *master_workflow_filters
          requires:
            - build
      - example_docker-compose:
          <<: *master_workflow_filters
          name: docker-compose
          requires:
            - images
          # custom parameters
          use_local_kuma_images: true
      - example_minikube:
          <<: *master_workflow_filters
          name: minikube_v1_14
          requires:
            - images
          # custom parameters
          kubernetes_version: v1.14.10
          use_local_kuma_images: true
      - example_minikube:
          <<: *master_workflow_filters
          name: minikube_v1_15
          requires:
            - images
          # custom parameters
          kubernetes_version: v1.15.12
          use_local_kuma_images: true
      - example_minikube:
          <<: *master_workflow_filters
          name: minikube_v1_16
          requires:
            - images
          # custom parameters
          kubernetes_version: v1.16.15
          use_local_kuma_images: true
      - example_minikube:
          <<: *master_workflow_filters
          name: minikube_v1_17
          requires:
            - images
          # custom parameters
          kubernetes_version: v1.17.17
          use_local_kuma_images: true
      - example_minikube:
          <<: *master_workflow_filters
          name: minikube_v1_18
          requires:
            - images
          # custom parameters
          kubernetes_version: v1.18.16
          use_local_kuma_images: true
      - example_minikube:
          <<: *master_workflow_filters
          name: minikube_v1_19
          requires:
            - images
          # custom parameters
          kubernetes_version: v1.19.8
          use_local_kuma_images: true
      - example_minikube:
          <<: *master_workflow_filters
          name: minikube_v1_20
          requires:
            - images
          # custom parameters
          kubernetes_version: v1.20.4
          use_local_kuma_images: true
      - e2e:
          <<: *master_workflow_filters
          name: test/e2e
          requires:
            - images
      - e2e:
          <<: *commit_workflow_filters
          name: test/e2e V2
          requires:
            - images
          # custom parameters
          api: v2

  kuma-release:
    jobs:
    - go_cache: *release_workflow_filters
    - api_check:
        <<: *release_workflow_filters
        requires:
        - go_cache
    - check:
        <<: *release_workflow_filters
        requires:
        - go_cache
    - test:
        <<: *release_workflow_filters
        requires:
        - go_cache
    - integration:
        <<: *release_workflow_filters
        requires:
        - go_cache
    - release:
        <<: *release_workflow_filters
        requires:
        - api_check
        - check
        - test
        - integration
    - helm-release:
        <<: *helm_release_workflow_filters
        requires:
        - release
    - example_docker-compose:
        <<: *release_workflow_filters
        name: docker-compose
        requires:
        - release
        # custom parameters
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_14
        requires:
        - release
        # custom parameters
        kubernetes_version: v1.14.10
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_15
        requires:
        - release
        # custom parameters
        kubernetes_version: v1.15.12
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_16
        requires:
        - release
        # custom parameters
        kubernetes_version: v1.16.15
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_17
        requires:
        - release
        # custom parameters
        kubernetes_version: v1.17.17
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_18
        requires:
          - release
        # custom parameters
        kubernetes_version: v1.18.16
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_19
        requires:
          - release
        # custom parameters
        kubernetes_version: v1.19.8
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_20
        requires:
          - release
        # custom parameters
        kubernetes_version: v1.20.4
        use_local_kuma_images: false
