version: 2.1 # Adds support for executors, parameterized jobs, etc

reusable:

  constants:
    - &go_version "1.18"

  docker_images:
    - &golang_image "cimg/go:1.18.0"

  vm_images:
    - &ubuntu_vm_image "ubuntu-2004:202111-01"

  snippets:
    work_branch_or_tags_workflow_filter: &work_branch_or_tags_workflow_filter
      filters:
        branches:
          only:
           - master
           - /^release-.*/
        tags:
          only: /.*/
    # on branches master or release-*
    work_branch_workflow_filter: &work_branch_workflow_filter
      filters:
        branches:
          only:
           - master
           - /^release-.*/
        tags:
          ignore: /.*/
    # on tags
    tags_workflow_filter: &tags_workflow_filter
      filters:
        branches:
          ignore: /.*/
        tags:
          only: /.*/

# See https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version-21.
commands:
  install_build_tools:
    description: "Install an upstream Go release to $HOME/go"
    parameters:
      go_os:
        type: string
        default: linux
      go_arch:
        type: string
        default: amd64
      go_version:
        type: string
        default: *go_version
    steps:
    - run:
        # `unzip`    is necessary to install `protoc`
        # `gcc`      is necessary to run `go test -race`
        # `git`      is necessary because the CircleCI version is different somehow ¯\_(ツ)_/¯
        # `xz-utils` is necessary to decompress xz files
        name: "Install basic tools"
        command: |
          if [ -r /etc/os-release ]; then source /etc/os-release; fi
          case "$ID" in
          ubuntu)
            if ! command -v sudo 2>&1 >/dev/null; then
              apt update
              apt install -y sudo
            fi

            sudo apt update
            sudo env DEBIAN_FRONTEND=noninteractive apt install -y curl git make unzip gcc xz-utils
            ;;
          esac
    - run:
        name: "Install Go"
        # See https://golang.org/doc/install#tarball
        command: |
          curl -s --fail --location https://dl.google.com/go/go<<parameters.go_version>>.<<parameters.go_os>>-<<parameters.go_arch>>.tar.gz | tar -xz -C $HOME
          echo 'export PATH=$HOME/go/bin:$PATH' >> $BASH_ENV
    - run:
        name: "Update runc"
        # See https://github.com/rancher/k3d/issues/807 (runc's default version on the instance fails k3d)
        command: |
          if [[ `uname -s` == "Linux" ]]; then
            sudo sh -c 'curl -s --fail --location https://github.com/opencontainers/runc/releases/download/v1.0.3/runc.amd64 > /usr/bin/runc'
            sudo chown root:root /usr/bin/runc ; sudo chmod o+x /usr/bin/runc
          fi

executors:
  golang:
    resource_class: large
    docker:
    - image: *golang_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

  vm:
    resource_class: large
    machine:
      image: *ubuntu_vm_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

  mac:
    resource_class: medium
    macos:
      xcode: "12.5.1"
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

jobs:
  dev_ubuntu:
    docker:
    - image: ubuntu:20.04
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"
      CLANG_FORMAT_PATH: clang-format-13
      # if GOPATH is not set, `golang-ci` fails with an obscure message
      # "ERRO Running error: context loading failed: failed to load program with go/packages: could not determine GOARCH and Go compiler"
      GOPATH: /root/.go-kuma-go
    steps:
    - install_build_tools
    - checkout
    - run:
        name: "Install all development tools"
        command: |
          make dev/tools
    - run:
        name: "Build all binaries"
        command: |
          make build
    - run:
        name: "Run unit tests"
        command: |
          GO_TEST_OPTS='-p 2' make test

  dev_mac:
    executor: mac
    environment:
      # if GOPATH is not set, `golang-ci` fails with an obscure message
      # "ERRO Running error: context loading failed: failed to load program with go/packages: could not determine GOARCH and Go compiler"
      GOPATH: /Users/distiller/.go-kuma-go
    steps:
    - checkout
    - install_build_tools:
        go_os: darwin
    - run:
        name: "Install all development tools"
        command: |
          make dev/tools
    # Do NOT install `clang-format` on Mac since it takes unreasonable amount of time
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: |
          make check BUILD_INFO_VERSION=latest
    - run:
        name: "Build all binaries"
        command: |
          make build
    - run:
        name: "Run unit tests"
        command: |
          make test

  go_cache:
    executor: golang
    steps:
    - checkout
    - run:
        name: "Download Go modules"
        command: |
          go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
        - "/go/pkg/mod"

  check:
    executor: golang
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Install check tools (clang-format, ...)"
        command: sudo apt update && sudo apt install -y clang-format
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: make check

  test:
    executor: vm
    parameters:
      target:
        description: The test make target.
        type: string
        default: test
    environment:
      GOPATH: /home/circleci/.go-kuma-go
    steps:
    - install_build_tools
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: "Download Go modules"
        command: |
          go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
          - "/home/circleci/.go-kuma-go"
    - run:
        name: "Install all development tools"
        command: |
          make dev/tools
    - run:
        name: "Run tests"
        command: |
          export GINKGO_TEST_RESULTS_DIR=/tmp/ginkgo-test-results
          make << parameters.target >>
    - run:
        # Ref https://docs.codecov.com/docs/about-the-codecov-bash-uploader
        name: "Push coverage to Codecov"
        when: always
        command: |
          set -o errexit
          curl --fail --location --silent --output codecov https://codecov.io/bash
          readonly VERSION=$(grep -o 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2)
          readonly URL="https://raw.githubusercontent.com/codecov/codecov-bash"
          for i in 1 256 512 ; do
            echo checking SHA${i}SUM for version ${VERSION}
            shasum --algorithm $i --check --ignore-missing <(
              curl --location --silent "${URL}/${VERSION}/SHA${i}SUM"
            )
          done
          bash ./codecov -f "build/coverage/*.out"
    - store_artifacts:
        path: build/coverage
        destination: /coverage
    - store_test_results:
        path: /tmp/ginkgo-test-results

  e2e:
    executor: vm
    parameters:
      api:
        description: XDS API version
        type: string
        default: v3
      ipv6:
        description: use IPv6
        type: boolean
        default: false
      k3sVersion:
        description: version of k3s to use
        type: string
        default: v1.21.7-k3s1
      parallelism:
        description: level of parallelisation
        type: integer
        default: 8
      target:
        description: makefile target
        type: string
        default: "test/e2e"
    parallelism: << parameters.parallelism >>
    environment:
      GOPATH: /home/circleci/.go-kuma-go
    steps:
      - install_build_tools
      - checkout
      - restore_cache:
          keys:
            # prefer the exact match
            - vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
      - run:
          name: "Download Go modules"
          command: |
            go mod download
      # since execution of go commands might change contents of "go.sum", we have to save cache immediately
      - save_cache:
          key: vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/.go-kuma-go"
      # Mount files from the upstream jobs
      - attach_workspace:
          at: build
      - run:
          name: "Install all development tools"
          command: |
            make dev/tools
      - run:
          name: "Setup Helm"
          command: |
            helm repo add kuma https://kumahq.github.io/charts
      - when:
          condition: << parameters.ipv6 >>
          steps:
            - run:
                name: Enable IPV6 and change DNS # CircleCI's DNS on IPV6 prevents resolving inside Kind. When change to 8.8.8.8 and remove "search" section (. removes it), resolving works again
                command: |
                  cat \<<'EOF' | sudo tee /etc/docker/daemon.json
                  {
                    "ipv6": true,
                    "fixed-cidr-v6": "2001:db8:1::/64",
                    "dns": ["8.8.8.8"],
                    "dns-search": ["."]
                  }
                  EOF
                  sudo service docker restart
            - run:
                name: "Run IPv6 E2E tests"
                command: |
                  export E2E_PKG_LIST=${E2E_PKG_LIST:-$(circleci tests glob ./test/e2e/* | circleci tests split | xargs printf "./%s/... ")}
                  export API_VERSION=<< parameters.api >>
                  export IPV6=true
                  export KUMA_DEFAULT_RETRIES=60
                  export KUMA_DEFAULT_TIMEOUT="6s"
                  export GINKGO_TEST_RESULTS_DIR=/tmp/ginkgo-test-results
                  make -j2 << parameters.target >>
            - store_test_results:
                path: /tmp/ginkgo-test-results
      - unless:
          condition: << parameters.ipv6 >>
          steps:
            - run:
                name: "Run IPv4 E2E tests"
                command: |
                  echo "DEBUGING VAR $E2E_PKG_LIST"
                  echo "DEBUGING VAR GINKGO_E2E_FLAGS"
                  export CI_K3S_VERSION=<< parameters.k3sVersion >>
                  export E2E_PKG_LIST=${E2E_PKG_LIST:-$(circleci tests glob ./test/e2e/* | circleci tests split | xargs printf "./%s/... ")}
                  export API_VERSION=<< parameters.api >>
                  export GINKGO_TEST_RESULTS_DIR=/tmp/ginkgo-test-results
                  export K3D=true
                  make -j2 << parameters.target >>
            - store_test_results:
                path: /tmp/ginkgo-test-results

  build:
    executor: golang
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
    - run:
        name: Build all Kuma binaries (such as, kumactl, kuma-cp, kuma-dp, kuma-prometheus-sd)
        command: make build
    - setup_remote_docker:
        version: 20.10.7
    - run:
        name: Build Docker images
        command: |
          make images
    - run:
        name: Save Docker images into TAR archives
        command: |
          make docker/save
    # Persist the specified paths into the workspace for use in downstream jobs
    - persist_to_workspace:
        root: build
        paths:
        - docker-images
        - artifacts-linux-amd64

  release:
    executor: vm
    steps:
    - install_build_tools
    - checkout
    - run:
        name: "Download Go modules"
        command: go mod download
    - run:
        name: Build Packages
        command: |
          ./tools/releases/distros.sh --package
    - run:
        name: Push Packages
        command: |
          ./tools/releases/distros.sh --release
    - run:
        name: Build Docker
        command: |
          ./tools/releases/docker.sh --build
    - run:
        name: Push Docker
        command: |
          ./tools/releases/docker.sh --push

workflows:
  version: 2

  kuma-commit:
    jobs:
      - dev_mac:
          # Avoids running expensive workflow on PRs
          <<: *work_branch_or_tags_workflow_filter
      - dev_ubuntu:
          # Avoids running expensive workflow on PRs
          <<: *work_branch_or_tags_workflow_filter
      - go_cache
      - check:
          requires:
            - go_cache
      - build:
          requires:
            - go_cache
      - test:
          requires:
            - check
      - e2e:
          name: test/e2e-ipv4
          requires:
            - build
            - check
      - e2e:
          name: e2e-kubernetes
          target: test/e2e-kubernetes
          requires:
            - build
            - check
          parallelism: 1
      - e2e:
          name: e2e-universal
          target: test/e2e-universal
          requires:
            - build
            - check
          parallelism: 1
      - e2e:
          name: e2e-multizone
          target: test/e2e-multizone
          requires:
            - build
            - check
          parallelism: 1
      - e2e:
          <<: *work_branch_or_tags_workflow_filter
          name: e2e-universal-ipv6
          target: test/e2e-universal
          ipv6: true
          requires:
            - build
            - check
          parallelism: 1
      - e2e:
          # Avoids running expensive workflow on PRs
          <<: *work_branch_or_tags_workflow_filter
          name: e2e-env
          matrix:
            parameters:
              k3sVersion: [v1.19.16-k3s1, v1.21.7-k3s1]
              ipv6: [true, false]
              target: [test/e2e-kubernetes, test/e2e-multizone]
          requires:
            - build
            - check
          parallelism: 1
      - e2e:
          # Avoids running expensive workflow on PRs
          <<: *work_branch_or_tags_workflow_filter
          name: test/e2e-ipv6
          requires:
            - build
            - check
          # custom parameters
          ipv6: true
      - e2e:
          # Avoids running expensive workflow on PRs
          <<: *work_branch_or_tags_workflow_filter
          name: test/e2e-ipv4-oldk8s
          k3sVersion: v1.19.16-k3s1
          requires:
            - build
            - check
      - release:
          # publish artifacts speculatively for normal commits
          <<: *work_branch_workflow_filter
          requires:
            - build
      - release:
          # only publish tagged artifacts if everything passes
          <<: *tags_workflow_filter
          requires:
            - dev_mac
            - dev_ubuntu
            - test
            - test/e2e-ipv4
            - test/e2e-ipv6
            - test/e2e-ipv4-oldk8s
