version: 2.1 # Adds support for executors, parameterized jobs, etc

reusable:

  constants:
  - &go_version "1.14.2"

  docker_images:
  - &golang_image "golang:1.14.2"
  - &circleci_golang_image "circleci/golang:1.14.2"

  vm_images:
  - &ubuntu_vm_image "ubuntu-1604:202004-01"

  snippets:

    # apparently, a job can run on a tag only if it has an explicit configuration for tag filters
    release_workflow_filters: &release_workflow_filters
      filters:
        branches:
          ignore: /.*/
        tags:
          only: /.*/

executors:
  golang:
    docker:
    - image: *golang_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"
    working_directory: /go/src/github.com/Kong/kuma

  remote-docker:
    docker:
    - image: *circleci_golang_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

  vm:
    resource_class: large
    machine:
      image: *ubuntu_vm_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

  mac:
    resource_class: large
    macos:
      xcode: "11.5.0"
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"

jobs:
  dev_golang:
    docker:
    - image: *golang_image
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"
    steps:
    - checkout
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Build all binaries"
        command: make build
    - run:
        name: "Run unit tests"
        command: GO_TEST_OPTS='-p 2' make test

  dev_ubuntu:
    docker:
    - image: ubuntu:18.04
    environment:
      GO_VERSION: *go_version
      GO111MODULE: "on"
      CLANG_FORMAT_PATH: clang-format-11
      # if GOPATH is not set, `golang-ci` fails with an obscure message
      # "ERRO Running error: context loading failed: failed to load program with go/packages: could not determine GOARCH and Go compiler"
      GOPATH: /root/.go-kuma-go
    steps:
    - run:
        name: "Install prerequisites"
        # make sure to deploy `git` befor checking out the code, otherwise Circle uses its own version, which behaves differently
        # `unzip` is necessary to install `protoc`
        # `gcc`   is necessary to run `go test -race`
        command: |
          apt update && apt install -y curl git make unzip gcc
    - checkout
    - run:
        name: "Install Go"
        command: |
          # see https://golang.org/doc/install#tarball
          curl -L https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar -xz -C $HOME
    - run:
        name: "Install all development tools"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make dev/tools
    # - run:
    #     name: "Install check tools (clang-format, ...)"
    #     command: |
    #       apt update && apt install -y wget

    #       # see https://apt.llvm.org/

    #       cat  >>/etc/apt/sources.list \<<EOF

    #       deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial main
    #       deb-src http://apt.llvm.org/xenial/ llvm-toolchain-xenial main

    #       EOF

    #       wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -

    #       apt update && apt install -y clang-format-11
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make check BUILD_INFO_VERSION=latest
    - run:
        name: "Build all binaries"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make build
    - run:
        name: "Run unit tests"
        command: |
          export PATH=$HOME/go/bin:$PATH
          GO_TEST_OPTS='-p 2' make test

  dev_mac:
    executor: mac
    environment:
      # if GOPATH is not set, `golang-ci` fails with an obscure message
      # "ERRO Running error: context loading failed: failed to load program with go/packages: could not determine GOARCH and Go compiler"
      GOPATH: /Users/distiller/.go-kuma-go
    steps:
    - checkout
    - run:
        name: "Install Go"
        command: |
          # see https://golang.org/doc/install#tarball
          curl -L https://dl.google.com/go/go${GO_VERSION}.darwin-amd64.tar.gz | tar -xz -C $HOME
    - run:
        name: "Install all development tools"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make dev/tools
    # Do NOT install `clang-format` on Mac since it takes unreasonable amount of time
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make check BUILD_INFO_VERSION=latest
    - run:
        name: "Build all binaries"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make build
    - run:
        name: "Run unit tests"
        command: |
          export PATH=$HOME/go/bin:$PATH
          GO_TEST_OPTS='-p 2' make test

  go_cache:
    executor: golang
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        # otherwise, fallback to the most recently generated cache on that branch
        - go.mod-{{ .Branch }}-
        # otherwise, fallback to the most recently generated cache on any branch
        - go.mod-
    - run:
        name: "Download Go modules"
        command: |
          go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
        - "/go/pkg/mod"

  check:
    executor: golang
    environment:
      CLANG_FORMAT_PATH: clang-format-11
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        # otherwise, fallback to the most recently generated cache on that branch
        - go.mod-{{ .Branch }}-
        # otherwise, fallback to the most recently generated cache on any branch
        - go.mod-
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Install check tools (clang-format, ...)"
        command: |
         # see https://apt.llvm.org/

         cat  >>/etc/apt/sources.list \<<EOF

         deb http://apt.llvm.org/stretch/ llvm-toolchain-stretch main
         deb-src http://apt.llvm.org/stretch/ llvm-toolchain-stretch main

         EOF

         wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add -

         apt update && apt install -y clang-format-11
    - run:
        name: "Run code generators (go generate, protoc, ...) and code checks (go fmt, go vet, ...)"
        command: make check

  api_check:
    executor: golang
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - api-go.mod-{{ .Branch }}-{{ checksum "api/go.sum" }}
        # otherwise, fallback to the most recently generated cache on that branch
        - api-go.mod-{{ .Branch }}-
        # otherwise, fallback to the most recently generated cache on any branch
        - api-go.mod-
    - run:
        name: "Download Go modules"
        command: |
          cd api && go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: api-go.mod-{{ .Branch }}-{{ checksum "api/go.sum" }}
        paths:
          - "/go/pkg/mod"
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools -C api
    - run:
        name: "Verify that auto-generated code is up-to-date"
        command: make check -C api

  test:
    executor: golang
    resource_class: large
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        # otherwise, fallback to the most recently generated cache on that branch
        - go.mod-{{ .Branch }}-
        # otherwise, fallback to the most recently generated cache on any branch
        - go.mod-
    - run:
        name: "Install pre-requirements"
        # `unzip` is necessary to install `protoc`
        command: apt update && apt install -y unzip
    - run:
        name: "Install all development tools"
        command: make dev/tools
    - run:
        name: "Run unit tests"
        command: GO_TEST_OPTS='-p 2' make test
    - store_artifacts:
        path: build/coverage
        destination: /coverage

  integration:
    executor: vm
    parameters:
      target:
        description: The integration make target.
        type: string
        default: integration
    environment:
      GOPATH: /home/circleci/.go-kuma-go
    steps:
    - checkout
    - run:
        name: "Install Go"
        command: |
          apt update && apt install -y curl git make
          # see https://golang.org/doc/install#tarball
          curl -L https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar -xz -C $HOME
    - restore_cache:
        keys:
        # prefer the exact match
        - vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        # otherwise, fallback to the most recently generated cache on that branch
        - vm-executor-go.mod-{{ .Branch }}-
        # otherwise, fallback to the most recently generated cache on any branch
        - vm-executor-go.mod-
    - run:
        name: "Download Go modules"
        command: |
          export PATH=$HOME/go/bin:$PATH
          go mod download
    # since execution of go commands might change contents of "go.sum", we have to save cache immediately
    - save_cache:
        key: vm-executor-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
          - "/home/circleci/.go-kuma-go"
    - run:
        name: "Install all development tools"
        command: |
          export PATH=$HOME/go/bin:$PATH
          make dev/tools
    - run:
        name: "Run integration tests"
        command: | 
          export PATH=$HOME/go/bin:$PATH
          make << parameters.target >>
    - store_artifacts:
        path: build/coverage
        destination: /coverage

  build:
    executor: golang
    steps:
    - checkout
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        # otherwise, fallback to the most recently generated cache on that branch
        - go.mod-{{ .Branch }}-
        # otherwise, fallback to the most recently generated cache on any branch
        - go.mod-
    - run:
        name: Build all Kuma binaries (such as, kumactl, kuma-cp, kuma-dp, kuma-prometheus-sd)
        command: make build

    # Persist the specified paths into the workspace for use in downstream jobs
    - persist_to_workspace:
        root: build
        paths:
        - artifacts-linux-amd64

  images:
    executor: remote-docker
    steps:
    - checkout
    # Mount files from the upstream jobs
    - attach_workspace:
        at: build
    - setup_remote_docker:
        version: 19.03.8
    - run:
        name: Build Docker images
        command: make docker/build
    - run:
        name: Save Docker images into TAR archives
        command: make docker/save
    # Persist the specified paths into the workspace for use in downstream jobs
    - persist_to_workspace:
        root: build
        paths:
        - docker-images

  example_docker-compose:
    executor: vm
    parameters:
      use_local_kuma_images:
        description: Use local Docker images from CircleCI workspace instead of downloading ones from bintray.io.
        type: boolean
        default: true
    environment:
      KUMACTL_INSTALL_USE_LOCAL_IMAGES: << parameters.use_local_kuma_images >>
    steps:
    - checkout
    # Mount files from the upstream jobs
    - attach_workspace:
        at: build
    - when:
        condition: << parameters.use_local_kuma_images >>
        steps:
        - run:
            name: Load Docker images
            command: make load/example/docker-compose
    - run:
        name: Start Docker Compose setup
        command: make deploy/example/docker-compose DOCKER_COMPOSE_OPTIONS=--detach
    - run:
        name: Wait until Envoy listener gets configured
        command: make wait/example/docker-compose
    - run:
        name: Make test requests via Envoy
        command: make curl/example/docker-compose
    - run:
        name: Verify Envoy stats
        command: make verify/example/docker-compose
    - run:
        name: Verify traffic routing without mTLS
        command: make verify/traffic-routing/docker-compose/without-mtls
    - run:
        name: Verify traffic routing with mTLS
        command: make verify/traffic-routing/docker-compose/with-mtls

  example_minikube:
    executor: vm
    parameters:
      kubernetes_version:
        description: The version of Kubernetes to test on.
        type: string
        default: "v1.15.0"
      use_local_kuma_images:
        description: Use local Docker images from CircleCI workspace instead of downloading ones from bintray.io.
        type: boolean
        default: true
    environment:
      KUMACTL_INSTALL_USE_LOCAL_IMAGES: << parameters.use_local_kuma_images >>
    steps:
    - checkout
    # Mount files from the upstream jobs
    - attach_workspace:
        at: build
    - run:
        name: Install Minikube
        command: make dev/install/minikube
    - run:
        name: Install Kubectl
        command: make dev/install/kubectl
    - run:
        name: Install Conntrack # need for minikube on Ubuntu with --vm-driver=non
        command: |
          sudo apt-get update
          sudo apt-get install -y conntrack
    - run:
        name: Start Minikube
        command: sudo CHANGE_MINIKUBE_NONE_USER=true $HOME/bin/minikube start --vm-driver=none --kubernetes-version=<< parameters.kubernetes_version >>
    - when:
        condition: << parameters.use_local_kuma_images >>
        steps:
        - run:
            name: Load Docker images into Minikube
            command: make load/example/minikube
    - run:
        name: Deploy example setup
        command: make deploy/example/minikube
    - run:
        name: Wait until Envoy listener gets configured
        command: make wait/example/minikube
    - run:
        name: Make test requests via Envoy
        command: make curl/example/minikube
    - run:
        name: Verify Envoy stats
        command: make verify/example/minikube
    - run:
        name: Enable mTLS
        command: make apply/example/minikube/mtls
    - run:
        name: Wait until Envoy is configured for mTLS
        command: make wait/example/minikube/mtls
    - run:
        name: Make test requests via Envoy with mTLS
        command: make curl/example/minikube
    - run:
        name: Verify Envoy mTLS stats
        command: make verify/example/minikube/mtls
    - run:
        name: Verify kumactl workflow
        command: make kumactl/example/minikube
    - run:
        name: Undeploy example setup
        command: make undeploy/example/minikube
    - run:
        name: Deploy example setup for traffic routing
        command: make deploy/traffic-routing/minikube
    - run:
        name: Verify traffic routing without mTLS
        command: make verify/traffic-routing/minikube/without-mtls
    - run:
        name: Verify traffic routing with mTLS
        command: make verify/traffic-routing/minikube/with-mtls

  release:
    executor: golang
    steps:
    - checkout
    - setup_remote_docker:
        version: 19.03.8
    - restore_cache:
        keys:
        # prefer the exact match
        - go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        # otherwise, fallback to the most recently generated cache on that branch
        - go.mod-{{ .Branch }}-
        # otherwise, fallback to the most recently generated cache on any branch
        - go.mod-
    - run:
        name: "Install Docker client"
        command: |
          VER="19.03.8"
          curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
          tar -xz -C /tmp -f /tmp/docker-$VER.tgz
          mv /tmp/docker/docker /usr/bin
    - run:
        name: Build Packages
        command: ./tools/releases/distros.sh --package --version $CIRCLE_TAG --sha $CIRCLE_SHA1
    - run:
        name: Push Packages
        command: ./tools/releases/distros.sh --release --version $CIRCLE_TAG
    - run:
        name: Build Docker
        command: ./tools/releases/docker.sh --build --version $CIRCLE_TAG
    - run:
        name: Push Docker
        command: ./tools/releases/docker.sh --push --version $CIRCLE_TAG

#
# Below, the tag filter needs to be in all jobs
# transitively required by the push job; otherwise,
# the build isn't triggered.
# TODO investigate whether it's possible to DRY it,
# perhaps by creating a separate workflow for deploy,
# which depends on the first workflow (check/test/build)
#
workflows:
  version: 2
  kuma-commit:
    jobs:
    - dev_golang
    - dev_mac
    - dev_ubuntu
    - go_cache
    - api_check:
        requires:
        - go_cache
    - check:
        requires:
        - go_cache
    - build:
        requires:
        - go_cache
    - test:
        requires:
        - api_check
        - check
    - integration:
        requires:
        - api_check
        - check
    - images:
        requires:
        - build
    - example_docker-compose:
        name: docker-compose
        requires:
        - images
        # custom parameters
        use_local_kuma_images: true
    - example_minikube:
        name: minikube_v1_13_0
        requires:
        - images
        # custom parameters
        kubernetes_version: v1.13.0
        use_local_kuma_images: true
    - example_minikube:
        name: minikube_v1_14_0
        requires:
        - images
        # custom parameters
        kubernetes_version: v1.14.0
        use_local_kuma_images: true
    - example_minikube:
        name: minikube_v1_15_0
        requires:
        - images
        # custom parameters
        kubernetes_version: v1.15.0
        use_local_kuma_images: true
    - example_minikube:
        name: minikube_v1_16_0
        requires:
        - images
        # custom parameters
        kubernetes_version: v1.16.0
        use_local_kuma_images: true
    - example_minikube:
        name: minikube_v1_17_0
        requires:
        - images
        # custom parameters
        kubernetes_version: v1.17.0
        use_local_kuma_images: true
    - example_minikube:
        name: minikube_v1_18_2
        requires:
          - images
        # custom parameters
        kubernetes_version: v1.18.2
        use_local_kuma_images: true
    - integration:
        name: test/e2e
        requires:
          - images
        # custom parameters
        target: test/e2e

  kuma-release:
    jobs:
    - go_cache: *release_workflow_filters
    - api_check:
        <<: *release_workflow_filters
        requires:
        - go_cache
    - check:
        <<: *release_workflow_filters
        requires:
        - go_cache
    - test:
        <<: *release_workflow_filters
        requires:
        - go_cache
    - integration:
        <<: *release_workflow_filters
        requires:
        - go_cache
    - release:
        <<: *release_workflow_filters
        requires:
        - api_check
        - check
        - test
        - integration
    - example_docker-compose:
        <<: *release_workflow_filters
        name: docker-compose
        requires:
        - release
        # custom parameters
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_13_0
        requires:
        - release
        # custom parameters
        kubernetes_version: v1.13.0
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_14_0
        requires:
        - release
        # custom parameters
        kubernetes_version: v1.14.0
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_15_0
        requires:
        - release
        # custom parameters
        kubernetes_version: v1.15.0
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_16_0
        requires:
        - release
        # custom parameters
        kubernetes_version: v1.16.0
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_17_0
        requires:
        - release
        # custom parameters
        kubernetes_version: v1.17.0
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
    - example_minikube:
        <<: *release_workflow_filters
        name: minikube_v1_18_2
        requires:
          - release
        # custom parameters
        kubernetes_version: v1.18.2
        # docker images for a release build must be downloaded from a public Docker registry
        use_local_kuma_images: false
