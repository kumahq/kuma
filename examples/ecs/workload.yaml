AWSTemplateFormatVersion: "2010-09-09"
Description: Kuma enabled workload on ECS
Parameters:
  VPCStackName:
    Type: String
    Default: kuma-vpc
    Description: The name of the parent Fargate networking stack that you created. Necessary
      to locate and reference resources created by that stack.
  Image:
    Type: String
    Default: "kong-docker-kuma-docker.bintray.io/kuma-dp:1.0.8"
    Description: The name of the kuma-dp docker image
  WorkloadName:
    Type: String
    Default: "httpbin"
    Description: The name of the workload image
  WorkloadImage:
    Type: String
    Default: "kennethreitz/httpbin"
    Description: The name of the workload image
  WorkloadProtocol:
    Type: String
    Default: "http"
    Description: The protocol for the workload [tcp|http|http2|grpc]
  WorkloadPort:
    Type: String
    Default: 80
    Description: The port of the workload service
  WorkloadManagementPort:
    Type: String
    Default: 22
    Description: The workload management port (e.g. SSH)
  DesiredCount:
    Type: String
    Default: 1
    Description: The desired replica count of the workload
  CPAddress:
    Type: String
    Default: "https://controlplane.kuma.io:5678"
    Description: The kuma-cp address
  DPTemplate:
    Type: String
    Default: |
      ---
      type: Dataplane
      name: "{{ dpname }}"
      mesh: "{{ mesh }}"
      networking:
        address: "{{ address }}"
        inbound:
        - port: {{ port }}
          tags:
            kuma.io/service: "{{ service }}"
            kuma.io/protocol: "{{ protocol }}"
        transparentProxying:
          redirectPortOutbound: 15001
          redirectPortInbound: 15006
  DPMesh:
    Type: String
    Default: "default"
    Description: The Mesh of the dataplane
  DPToken:
    Type: String
    Default: ""
    Description: The dataplane token generated from kuma-cp
  AllowedCidr:
    Type: String
    Default: '10.0.0.0/8'
    Description: The CIDR used to restrict the kuma-cp ports access
Resources:

  ###################################
  # Service Discovery configuration #
  ###################################

  WorkloadTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  WorkloadTaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/AWSAppMeshEnvoyAccess

  DiscoveryServiceApp:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Discovery Service for App
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Ref WorkloadName
      NamespaceId:
        Fn::ImportValue:
          !Join [ ':', [ !Ref 'VPCStackName', 'PrivateNamespace' ] ]

  #########################
  #       Log Group       #
  #########################

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 7 # days

  #########################
  #     Security Group    #
  #########################

  WorkloadSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: kuma-cp security group
      SecurityGroupIngress:
        - CidrIp: '10.0.0.0/8'
          IpProtocol: tcp
          ToPort: !Ref WorkloadPort
          FromPort: !Ref WorkloadPort
        - CidrIp: !Ref AllowedCidr
          IpProtocol: tcp
          ToPort: !Ref WorkloadManagementPort
          FromPort: !Ref WorkloadManagementPort
      VpcId:
        Fn::ImportValue:
          !Join [ ':', [ !Ref 'VPCStackName', 'VPCId' ] ]

  ##########################
  # Workload configuration #
  ##########################

  ServiceWorkload:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      Cluster:
        Fn::ImportValue:
          !Join [ ':', [ !Ref 'VPCStackName', 'ClusterName' ] ]
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref 'TaskDefinitionWorkload'
      ServiceRegistries:
        - RegistryArn: !GetAtt DiscoveryServiceApp.Arn
          Port: !Ref WorkloadPort
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue:
                !Join [ ':', [ !Ref 'VPCStackName', 'PublicSubnet' ] ]
          SecurityGroups: [ !Ref 'WorkloadSecurityGroup' ]

  TaskDefinitionWorkload:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${WorkloadName}-family"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref WorkloadTaskIamRole
      ExecutionRoleArn: !Ref 'WorkloadTaskExecutionRole'
      Cpu: 256
      Memory: 512
      ProxyConfiguration:
        Type: APPMESH
        ContainerName: kuma-dp
        ProxyConfigurationProperties:
          - Name: IgnoredUID
            Value: '5678'
          - Name: ProxyIngressPort
            Value: '15006'
          - Name: ProxyEgressPort
            Value: '15001'
          - Name: AppPorts
            Value: !Ref WorkloadPort
      ContainerDefinitions:
        - Name: workload
          Essential: true
          Image: !Ref WorkloadImage
          PortMappings:
            - ContainerPort: !Ref WorkloadPort
              Protocol: tcp
            - ContainerPort: !Ref WorkloadManagementPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: workload
        - Name: kuma-dp
          Image: !Ref Image
          PortMappings:
            - ContainerPort: 30001
          Essential: true
          User: '5678'
          Environment:
            - Name: KUMA_DATAPLANE_RUNTIME_TOKEN
              Value: !Ref DPToken
            - Name: KUMA_DATAPLANE_RUNTIME_RESOURCE
              Value: !Ref DPTemplate
          EntryPoint: [ "sh", "-c" ]
          Command:
            - !Join
              - " "
              - - "kuma-dp"
                - "run"
                - "--cp-address"
                - !Ref CPAddress
                - "--dataplane-var"
                - "dpname=`hostname -s`"
                - "--dataplane-var"
                - "address=`hostname -i`"
                - "--dataplane-var"
                - !Join [ "=", [ "mesh", !Ref DPMesh ] ]
                - "--dataplane-var"
                - !Join [ "=", [ "port", !Ref WorkloadPort ] ]
                - "--dataplane-var"
                - !Join [ "=", [ "service", !Ref WorkloadName ] ]
                - "--dataplane-var"
                - !Join [ "=", [ "protocol", !Ref WorkloadProtocol ] ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: kuma-dp
