global:
  image:
    # -- Default registry for all Kuma Images
    registry: "kong-docker-kuma-docker.bintray.io"
    # Defaults to .Chart.AppVersion
    # tag: ""

# -- Whether or not to patch the target namespace with the system label
patchSystemNamespace: true

controlPlane:
  # -- Kuma CP log level: one of off,info,debug
  logLevel: "info"
  # -- Kuma CP modes: one of standalone,remote,global
  mode: "standalone"
  # zone: ""

  kdsGlobalAddress: ""
  # -- Number of replicas of the Kuma CP
  replicas: 1
  # -- Node selector for the Kuma Control Plane pods
  nodeSelector:
    kubernetes.io/os: linux
    kubernetes.io/arch: amd64
  # -- Failure policy of the mutating webhook implemented by the Kuma Injector component
  injectorFailurePolicy: Ignore

  service:
    # -- Service type of the Kuma Control Plane
    type:
      ClusterIP
      # -- Additional annotations to put on the Kuma Control Plane
    annotations: {}
  # -- URL of Global Kuma CP
  globalRemoteSyncService:
    # -- Service type of the Global-Remote sync
    type: LoadBalancer
    # -- Additional annotations to put on the Global Remote Sync Service
    annotations: {}
    # -- Port on which Global Remote Sync Service is exposed
    port: 5685

  defaults:
    # -- Whether or not to skip creating the default Mesh
    skipMeshCreation: false

  #  resources:
  #     requests:
  #       cpu: 100m
  #       memory: 256Mi

  # TLS for various servers
  tls:
    general:
      # -- Secret that contains tls.crt, key.crt and ca.crt for protecting Kuma in-cluster communication
      secretName: ""
      # -- Base64 encoded CA certificate (the same as in controlPlane.tls.general.secret#ca.crt)
      caBundle: ""
    apiServer:
      # -- Secret that contains tls.crt, key.crt for protecting Kuma API on HTTPS
      secretName: ""
      # -- Secret that contains list of .pem certificates that can access admin endpoints of Kuma API on HTTPS
      clientCertsSecretName: ""
    kdsGlobalServer:
      # -- Secret that contains tls.crt, key.crt for protecting cross cluster communication
      secretName: ""
    kdsRemoteClient:
      # -- Secret that contains ca.crt which was used to sign KDS Global server. Used for CP verification
      secretName: ""

  image:
    # -- Kuma CP ImagePullPolicy
    pullPolicy: IfNotPresent
    # -- Kuma CP image repository
    repository: "kuma-cp"
  # secrets: {}

  # -- Additional environment variables that will be passed to the control plane
  envVars: {}

cni:
  # -- Install Kuma with CNI instead of proxy init container
  enabled: false
  # -- Install CNI in chained mode
  chained: false
  # -- Set the CNI install directory
  netDir: /etc/cni/multus/net.d
  # -- Set the CNI bin directory
  binDir: /var/lib/cni/bin
  # -- Set the CNI configuration name
  confName: kuma-cni.conf
  # -- CNI log level: one of off,info,debug
  logLevel: info
  # -- Node Selector for the CNI pods
  nodeSelector:
    kubernetes.io/os: linux
    kubernetes.io/arch: amd64

  image:
    # -- CNI image registry
    registry:
      "docker.io"
      # -- CNI image repository
    repository: "lobkovilya/install-cni"
    # -- CNI image tag
    tag: "0.0.2"

dataPlane:
  image:
    # -- The Kuma DP image repository
    repository: "kuma-dp"
    # -- Kuma DP ImagePullPolicy
    pullPolicy: IfNotPresent

  initImage:
    # -- The Kuma DP init image repository
    repository: "kuma-init"

ingress:
  # -- If true, it deploys Ingress for cross cluster communication
  enabled: false
  # -- Mesh to which Dataplane Ingress belongs to
  mesh: default
  # -- Time for which old listener will still be active as draining
  drainTime: 30s
  # -- Number of replicas of the Ingress
  replicas: 1
  service:
    # -- Service type of the Ingress
    type: LoadBalancer
    # -- Additional annotations to put on the Ingress service
    annotations: {}
    # -- Port on which Ingress is exposed
    port: 10001
