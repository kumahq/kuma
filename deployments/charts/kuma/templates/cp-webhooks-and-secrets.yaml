{{- $caBundle := .Values.controlPlane.tls.general.caBundle -}}
{{- if (and (empty $caBundle) (ne .Values.controlPlane.tls.general.caSecretName "")) -}}
  {{- if .Values.testOnly -}}
  {{- $caBundle = "FakeReadFromK8S" -}}
  {{- else -}}
  {{- $caSecret := (lookup "v1" "Secret" .Release.Namespace .Values.controlPlane.tls.general.caSecretName) -}}
  {{- $caBundle = index $caSecret.data "ca.crt" -}}
  {{- end -}}
{{- end -}}
{{- $secretName := print (include "kuma.name" .) "-tls-cert" -}}
{{- if (ne .Values.controlPlane.tls.general.secretName "") -}}
  {{- $secretName = .Values.controlPlane.tls.general.secretName -}}
{{- end -}}
{{/*
Generate certificates
see: https://masterminds.github.io/sprig/crypto.html
see: https://medium.com/nuvo-group-tech/move-your-certs-to-helm-4f5f61338aca
see: https://github.com/networkservicemesh/networkservicemesh/blob/804ad5026bb5dbd285c220f15395fe25e46f5edb/deployments/helm/nsm/charts/admission-webhook/templates/admission-webhook-secret.tpl

We only autogenerate certs if user did not chose their own secret.
We only autogenerate certs if the cert is not yet generated. This way we keep the secrets between HELM upgrades.
*/}}
{{- $secret := (lookup "v1" "Secret" .Release.Namespace $secretName) -}}
{{- if $secret -}} {{/* If the secret already exists read and check the ca is coherent */}}
  {{- $caSecretBundle := index $secret.data "ca.crt" -}}
  {{- if (ne $caSecretBundle "") -}}
    {{- if (and (ne $caBundle "") (ne $caSecretBundle $caBundle)) -}}
      {{- fail (print "caBundle read in secret '" $secretName "' doesn't match the one set in .Values.controlPlane.tls.general.caSecretName or .Values.controlPlane.tls.general.caBundle") -}}
    {{- end -}}
    {{- $caBundle = $caSecretBundle -}}
  {{- end -}}
{{- else -}}
{{- if (empty .Values.controlPlane.tls.general.secretName) -}}
  {{- if (or (ne .Values.controlPlane.tls.general.caBundle "") (ne .Values.controlPlane.tls.general.caSecretName "")) -}}
    {{- fail "You can't set controlPlane.tls.general.caBundle or .Values.controlPlane.tls.general.caSecretName if you are using auto-generated certs automatically use your own secret instead" -}}
  {{- end -}}
  {{- $commonName := (include "kuma.controlPlane.serviceName" .) -}}
  {{- $altNames := list (printf "%s.%s" $commonName .Release.Namespace) (printf "%s.%s.svc" $commonName .Release.Namespace) -}}
  {{- $certTTL := 3650 -}}
  {{- $ca := genCA "kuma-ca" $certTTL -}}

  {{- $genCert := genSignedCert $commonName nil $altNames $certTTL $ca -}}
  {{- $cert := $genCert.Cert | b64enc -}}
  {{- $key := $genCert.Key | b64enc -}}
  {{- $caBundle = $ca.Cert | b64enc -}}
  {{- if .Values.testOnly -}}
    {{- $cert = "RedactedGeneratedCertForTests" -}}
    {{- $key = "RedactedGeneratedCertKeyForTests" -}}
    {{- $caBundle = "RedactedGeneratedCAForTests" -}}
  {{- end -}}
---
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: {{ $secretName }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "kuma.cpLabels" . | nindent 4 }}
data:
  tls.crt: {{ $cert }}
  tls.key: {{ $key }}
  ca.crt: {{ $caBundle }}
{{- end -}}
{{- end -}}
{{- if (empty $caBundle) -}}
  {{- fail "Couldn't extract CA bundle, you are either not using generated cert or we couldn't extract it from values or secrets" -}}
{{- end -}}
{{- if (eq .Values.controlPlane.environment "kubernetes") }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: {{ include "kuma.name" . }}-admission-mutating-webhook-configuration
  namespace: {{ .Release.Namespace }}
  labels: {{ include "kuma.cpLabels" . | nindent 4 }}
webhooks:
  - name: mesh.defaulter.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
    clientConfig:
      caBundle: {{ $caBundle }}
      service:
        namespace: {{ .Release.Namespace }}
        name: {{ include "kuma.controlPlane.serviceName" . }}
        path: /default-kuma-io-v1alpha1-mesh
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - meshes
        {{- range $policy, $v := .Values.plugins.policies }}
        {{- if $v }}
          - {{ $policy }}
        {{- end}}
        {{- end}}
    sideEffects: None
  - name: owner-reference.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
    clientConfig:
      caBundle: {{ $caBundle }}
      service:
        namespace: {{ .Release.Namespace }}
        name: {{ include "kuma.controlPlane.serviceName" . }}
        path: /owner-reference-kuma-io-v1alpha1
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
        resources:
          - circuitbreakers
          - externalservices
          - faultinjections
          - healthchecks
          - meshgateways
          - meshgatewayroutes
          - proxytemplates
          - ratelimits
          - retries
          - timeouts
          - trafficlogs
          - trafficpermissions
          - trafficroutes
          - traffictraces
          - virtualoutbounds
        {{- range $policy, $v := .Values.plugins.policies }}
        {{- if $v }}
          - {{ $policy }}
        {{- end}}
        {{- end}}
  {{ .Values.controlPlane.webhooks.ownerReference.additionalRules | nindent 6 }}
    sideEffects: None
  {{- if ne .Values.controlPlane.mode "global" }}
  - name: namespace-kuma-injector.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: {{ .Values.controlPlane.injectorFailurePolicy }}
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
        - key: kuma.io/sidecar-injection
          operator: In
          values: ["enabled", "true"]
    clientConfig:
      caBundle: {{ $caBundle }}
      service:
        namespace: {{ .Release.Namespace }}
        name: {{ include "kuma.controlPlane.serviceName" . }}
        path: /inject-sidecar
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
        resources:
          - pods
    sideEffects: None
  - name: pods-kuma-injector.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: {{ .Values.controlPlane.injectorFailurePolicy }}
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
    objectSelector:
      matchLabels:
        kuma.io/sidecar-injection: enabled
    clientConfig:
      caBundle: {{ $caBundle }}
      service:
        namespace: {{ .Release.Namespace }}
        name: {{ include "kuma.controlPlane.serviceName" . }}
        path: /inject-sidecar
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
        resources:
          - pods
    sideEffects: None
  {{- end }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: {{ include "kuma.name" . }}-validating-webhook-configuration
  namespace: {{ .Release.Namespace }}
  labels: {{ include "kuma.cpLabels" . | nindent 4 }}
webhooks:
  - name: validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
    clientConfig:
      caBundle: {{ $caBundle }}
      service:
        namespace: {{ .Release.Namespace }}
        name: {{ include "kuma.controlPlane.serviceName" . }}
        path: /validate-kuma-io-v1alpha1
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - circuitbreakers
          - dataplanes
          - externalservices
          - faultinjections
          - gatewayinstances
          - healthchecks
          - meshes
          - meshgateways
          - meshgatewayroutes
          - proxytemplates
          - ratelimits
          - retries
          - trafficlogs
          - trafficpermissions
          - trafficroutes
          - traffictraces
          - virtualoutbounds
          - zones
          - containerpatches
        {{- range $policy, $v := .Values.plugins.policies }}
        {{- if $v }}
          - {{ $policy }}
        {{- end}}
        {{- end}}
    {{ .Values.controlPlane.webhooks.validator.additionalRules | nindent 6 }}
    sideEffects: None
  {{- if ne .Values.controlPlane.mode "global" }}
  - name: service.validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Ignore
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
    clientConfig:
      caBundle: {{ $caBundle }}
      service:
        namespace: {{ .Release.Namespace }}
        name: {{ include "kuma.controlPlane.serviceName" . }}
        path: /validate-v1-service
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - services
    sideEffects: None
  {{- end }}
  - name: secret.validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    namespaceSelector:
      matchLabels:
        kuma.io/system-namespace: "true"
    failurePolicy: Ignore
    clientConfig:
      caBundle: {{ $caBundle }}
      service:
        namespace: {{ .Release.Namespace }}
        name: {{ include "kuma.controlPlane.serviceName" .  }}
        path: /validate-v1-secret
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - secrets
    sideEffects: None
  - name: gateway.validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Ignore
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
    clientConfig:
      caBundle: {{ $caBundle }}
      service:
        namespace: {{ .Release.Namespace }}
        name: {{ include "kuma.controlPlane.serviceName" .  }}
        path: /validate-gatewayclass
    rules:
      - apiGroups:
          - "gateway.networking.k8s.io"
        apiVersions:
          - v1beta1
        operations:
          - CREATE
        resources:
          - gatewayclasses
    sideEffects: None
{{- end }}
