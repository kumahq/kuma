---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-control-plane
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/egress-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-egress
  namespace: default
  labels: 
    app: kuma-egress
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/ingress-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-ingress
  namespace: default
  labels: 
    app: kuma-ingress
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: kuma-tls-cert
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZakNDQWtxZ0F3SUJBZ0lRWUV1V20vVW5pOEphZlUrVTZ2alg0VEFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSTFNREl4TkRFMk1qWTFOMW9YRFRNMU1ESXhNakUyTWpZMQpOMW93SFRFYk1Ca0dBMVVFQXhNU2EzVnRZUzFqYjI1MGNtOXNMWEJzWVc1bE1JSUJJakFOQmdrcWhraUc5dzBCCkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXNvWkJQWUR1Qm02cnVNdW84eHJQclJKRy9icGhtUUNrUU5HWmhmSFMKMk01MEVjbDVZaElPMTdweGV0RGJKNXpsbXlsOWZrdFpleUpUZFBCOG16dkllbEVhcFkzQTk2MTRlSzllcE5HRAo1VmJHNkZpby9YVGFpYTU4RWtKeEg2bEV4eWJHbzVzTk1TdWZ3QUdzQ3Bua1djV0pJcm83bW5iQ3lKMmNWVmZ2CldHdE1KMThYQTA4WFViTmtjTGRBeXBpbHNCcEMzdVJxYnRRRW5xY1VrdFBndU5aSC9zMjV3Wng1Uk1JM1YwZTEKRm5mN3ZORlU1WStucFFaK1owclRFTmVEak4vVUJicDgxU3Z4b0pXYWJESHlVYmRFTlRMQUZBdkltSVdqQUhkTQozazlwYjlIcS9UZjcvc1dwNDl0UDVZSEd0MTJQek5ZSnlIdE1xcG4yMWkrTHp3SURBUUFCbzRHb01JR2xNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUWVNNXMyVW9GVmlPUHBIeklscTNWMUV6TkVOakJGQmdOVgpIUkVFUGpBOGdocHJkVzFoTFdOdmJuUnliMnd0Y0d4aGJtVXVaR1ZtWVhWc2RJSWVhM1Z0WVMxamIyNTBjbTlzCkxYQnNZVzVsTG1SbFptRjFiSFF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQjk3L3RRYXkyUEExTlgKZzQ3SUs5UmZtNmV1OXdZaDgxUDZBdHNkeEJ4UUN5YWd0QVJwd0FrUzI5ZHgrVmpRQTBaRmRzNUZyYTVJUXFkTgpwSS9DZUVJUzBSUnR3ajhNU0JrK0ZneVZmUkFQTmdPMHE4eEhqaU4vWGVTaU81TzYwUWpjcjlEWXNmd2U3ajc2CmVnelVXQXJpU3VjUmF3QjJIdTVVNTdQeDBKTWhEQmprUXhKVFRHZ29ZMHlIOVA5NFJsdlZ1NlBHL1hqU3FUUFAKODBKdm50c05UcEZwWTRrM3dHeUZvRGtFbFd2OXpTWVlmaXI2RU15YlNrSVdNSXhDNDRjdVNQZXRjc0krS2xSUApRTlpleUpVL09PWU5ERUdFbmg4Y1UyMGNpR3F4KzZmV2pBZyswamNKRG84MGw0OXR1c3o4VG1LR1pidEhlMktqCjhQVktNQm5GCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc29aQlBZRHVCbTZydU11bzh4clByUkpHL2JwaG1RQ2tRTkdaaGZIUzJNNTBFY2w1ClloSU8xN3B4ZXREYko1emxteWw5Zmt0WmV5SlRkUEI4bXp2SWVsRWFwWTNBOTYxNGVLOWVwTkdENVZiRzZGaW8KL1hUYWlhNThFa0p4SDZsRXh5YkdvNXNOTVN1ZndBR3NDcG5rV2NXSklybzdtbmJDeUoyY1ZWZnZXR3RNSjE4WApBMDhYVWJOa2NMZEF5cGlsc0JwQzN1UnFidFFFbnFjVWt0UGd1TlpIL3MyNXdaeDVSTUkzVjBlMUZuZjd2TkZVCjVZK25wUVorWjByVEVOZURqTi9VQmJwODFTdnhvSldhYkRIeVViZEVOVExBRkF2SW1JV2pBSGRNM2s5cGI5SHEKL1RmNy9zV3A0OXRQNVlIR3QxMlB6TllKeUh0TXFwbjIxaStMendJREFRQUJBb0lCQVFDRzVqQVNPNFNoVTZ0cgpIbW55R1lab2IzRTVkVWNlaUgrVmcweVJER1NZODVoOWdGSzZxbzZRc1EvakVFTXFNY0xHZHBtZmYyeUVRVEh6CklXM25GMHVzTWZFQ3ZKVGVFelQvYlBVRmNsUktUa0pMZkFObVVwQjRqV0t2b1lrOXRYaUZUR1c1WndhVzZ6SHgKc3RHL3lQM21YLy82UCtPZUdyT2hTSWZEYllrc3M5UmxTeVNaMVNJUUVNNG5PQkJya1NRNi9hNUU4ZnEvdFppSgpVaDBNeDVBU3FmUzg0c2poS04xYmQzZm1janc5eU83UVk5aGJHb2M4TDRySXNmT3VpUXZNbk9lVVVNcUZzMEhTCjNkeU5SYlMwczhham5ZZU5iTm0zRjUwaXFDcng4bm0xQmtHMTNiU3g5UHgrN0xNSVpPdWZDWGx0QkYvOG1WM2kKUCswVmRqVkJBb0dCQU5RU2tmazF0WDVKUVMvaXN4TitES1l4ZG4xSnBNVmFsVExGN2pvdHFxdWlwSzJZNkdrSQpEdzRxdTNsQk9LVi9EZDF0Vm56WlhYODVUSXBTTG1xVzM4a3NmUkRnMVhRenhDdmVIL2hxY2g5T0FvVGFZaUlrCmttazI5bmllbDJNdW83U0xDTisxUW5aZjVFZmhpVVBZMnQxY0g1OUZJc2xxa2JuTy8yZjRmSHYvQW9HQkFOZUEKd0Y2Q1JjZ0c4K3p5cEtNNXlMMWdpemlNTTJwakdSSkRYU1ZMb1phaDZhWGNCUHdDTnhEU09xcmQ0SHNhM2VaawpKTStEWUtPNmU4L2Y1MHVvMmI1aElHVnlmdjdRL3dXWFNVQlBMUERFZmV5TWlKU0lVa2t2RkFJVWcwSWFkcTQxCkFTdDV3UUlTSzZKUkxkSHJOMmcyMVU3aE9hbFhwb0RNUUdXQTVEQXhBb0dBVEw4UHJwVStRaDUyaGNMUHRaMG4KTExtM3ZLMTdBS1RBVzZoL2h2UmgwRTFDdFVRaHoyaklNZ05LNXgyd1Iwd01rM1p2RnkxK2hYMFI4dmk4clh3KwpMa3A0VkRSWmF2MFU0Qjg1aUtmVTl2ay9OaDdsNXA4L2tPNEFFalNxYW8xRlZ4LzlyUittbHJvckhjeEQ1WmJECjFkbng0NnljWXpHNjNQaEpPN0lVTXJjQ2dZQSs4YVkrZElKNVNENmE2TXhadUpqL1oyR0NwTUNueEVZZ1pYaWgKV2hQYWNYUlRNNDVwSlNSOFQwcy9lUXNHS2ZUQ1JHSFVFcVY1YlJDWXlPYy8zQk90WGFVZXZIQ0hjUGZyNUNKTApIRlVlQmVaWjN6cE5WL3ZnMEZWaHZpZ1FlTFpOYjhIbHR1dys5SnUyRDB2NDBtRWVtVlY0Y3FScTUrVUVIYVI1CmdVb2xJUUtCZ0YvRUhTcXVNTk9lZmNTQ1pEWXFyeXd0VUZOckhkOW5WZDlBbkpFamZyYUVTbEtYR3pjVkhQSGoKVFhUcXgvOGpaN0RNTnNIakJoNzFFNDlXMzJyY0VNejhoUFpCTHd1RTdOcjVQaHk4c0FaWHZianB3RmVZUkxSNgp0QWFlQkJuNHNoSTNXTFBFVG5qMkxqTDY5ai90WFhBYmlZNEZjd2xqU2VTSU0wVnFFa0tiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRRXpVN2t2aEZtVDF1dDVWY2dqZWFrakFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSTFNREl4TkRFMk1qWTFOMW9YRFRNMU1ESXhNakUyTWpZMQpOMW93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQU1IUTEzNjd3aThRbmVWbVkvQ1RtY3UxNno5R3Nla2ttWEw2OXBPSXNTUlJ1Y3lLQzJhNHRtT0wKTzZiU3BSWFRVWWFwQjV5OWJ0bHA1RGVmYzZ3SktyQ0VjUzY3VFZxQWJ0RlNlZ3MxTmVrT3JnOHpCWFJETmZvVApoLzVwbXVWZEhBSFMxdmpOc1RIeFVtV1U5T2JtM0k2amU5R1U5cGJNZi9ZMDM5bEtZVGpkTjB2Q3B6SzRLV2FlCmdjRkEvL2xvbEd6a0FGWHZRYjN3d2s0L1RLOW5Ld3NWMTVYVDRRa1pYT210dmpwTVdBYndGcmsza01hcUZ2SngKbWh1UmRoRGdpUUl3cndQNnZvRTZnbTBqWTkwOXB1OEdjWWNEbnVpZ3p4RTVSOGdCZEwrVTFCVnVQVGZSYTE4VQpyVzE0VVlyR2FkVG5HME1LVUY0T2xQRk5oQ3dVa0o4Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZU01czJVb0ZWaU9QcEh6SWxxM1YxRXpORU5qQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBdXZYazJoRmJscjJEYzNJalg5V1hpYzQ0eXJhNURMQ3lvNFI0RTVaYzFCRWRDMXZDTU9mMFFQQUM1SHlRCmlVM2toTzFiYTZ5cXpPbVNJeEJNa1VDWWtiek1IQW84QVRtWnhkb2tXZW4vTmJMVWxiL2pBNEhBZFMzQjl0ZTgKWklJa0U4VEtYcWRIcU8vUlZrb05zQlRDVDZVOFljNE9pVGk4UFErSEMxYlpjWnFlK2w4RWx5Z2NLYVQ4YnJxWQoyTWlmRjd4SjFPRjg4RGJ0Y3VxT2hlcVF6UDFkSlJEdmhPRFFkU25PN2xMRUxWdUNseUJkbDdIdk53NyswYVpiClNiaTNubEtzOVhJczkyM0gyRmNkMnAyOTBTdkFJU3VyeWg0TUJHLzhFTHlyb2dyYnVWSkZQTDdaNXBia2owTzAKajg3WFV2cWRFSDdwMW8rTzhMbGRveExsVHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: kuma/templates/cp-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuma-control-plane-config
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    # use this file to override default configuration of `kuma-cp`
    #
    # see conf/kuma-cp.conf.yml for available settings
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-control-plane
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - list
      - watch
  # it's cluster scope resource
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gatewayclasses
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gatewayclasses/status
    verbs:
      - get
      - patch
      - update
  # resources are cluster scope  
  - apiGroups:
      - kuma.io
    resources:
      - meshes
      - zones
      - zoneinsights
      - meshinsights
      - serviceinsights
      - proxytemplates
      - ratelimits
      - trafficpermissions
      - trafficroutes
      - timeouts
      - retries
      - circuitbreakers
      - virtualoutbounds
      - containerpatches
      - externalservices
      - faultinjections
      - healthchecks
      - trafficlogs
      - traffictraces
      - meshgateways
      - meshgatewayroutes
      - meshgatewayconfigs
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  # mesh is a cluster scope resource
  - apiGroups:
      - kuma.io
    resources:
      - meshes/finalizers
    verbs:
      - get
      - patch
      - update
  # validate k8s token before issuing mTLS cert, it's cluster scope
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - create
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-control-plane
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: default
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kuma-control-plane
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - ""
    resources:
      - secrets
    verbs:
    - list
    - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways
      - referencegrants
      - httproutes
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways/status
      - httproutes/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - delete
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - kuma.io
    resources:
      - zoneingresses
      - zoneingressinsights
      - zoneegresses
      - zoneegressinsights
      - meshaccesslogs
      - meshcircuitbreakers
      - meshfaultinjections
      - meshhealthchecks
      - meshhttproutes
      - meshloadbalancingstrategies
      - meshmetrics
      - meshpassthroughs
      - meshproxypatches
      - meshratelimits
      - meshretries
      - meshtcproutes
      - meshtimeouts
      - meshtlses
      - meshtraces
      - meshtrafficpermissions
      - hostnamegenerators
      - meshexternalservices
      - meshmultizoneservices
      - meshservices
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  # leader-for-life election deletes Pods in some circumstances
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kuma-control-plane
  namespace: kuma-demo
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - ""
    resources:
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways
      - referencegrants
      - httproutes
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways/status
      - httproutes/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
    - "discovery.k8s.io"
    resources:
      - endpointslices
    verbs:
    - get
    - list
    - watch
  - apiGroups:
      - "apps"
    resources:
      - deployments
      - replicasets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - "batch"
    resources:
      - jobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - kuma.io
    resources:
      - meshgatewayinstances
      - meshaccesslogs
      - meshcircuitbreakers
      - meshfaultinjections
      - meshhealthchecks
      - meshhttproutes
      - meshloadbalancingstrategies
      - meshmetrics
      - meshpassthroughs
      - meshproxypatches
      - meshratelimits
      - meshretries
      - meshtcproutes
      - meshtimeouts
      - meshtlses
      - meshtraces
      - meshtrafficpermissions
      - hostnamegenerators
      - meshexternalservices
      - meshmultizoneservices
      - meshservices
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - delete
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - kuma.io
    resources:
      - meshgatewayinstances/status
      - meshgatewayinstances/finalizers
      - dataplanes/finalizers
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - pods/finalizers
    verbs:
      - get
      - patch
      - update
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kuma-control-plane
  namespace: kuma-test
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - ""
    resources:
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways
      - referencegrants
      - httproutes
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways/status
      - httproutes/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
    - "discovery.k8s.io"
    resources:
      - endpointslices
    verbs:
    - get
    - list
    - watch
  - apiGroups:
      - "apps"
    resources:
      - deployments
      - replicasets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - "batch"
    resources:
      - jobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - kuma.io
    resources:
      - meshgatewayinstances
      - meshaccesslogs
      - meshcircuitbreakers
      - meshfaultinjections
      - meshhealthchecks
      - meshhttproutes
      - meshloadbalancingstrategies
      - meshmetrics
      - meshpassthroughs
      - meshproxypatches
      - meshratelimits
      - meshretries
      - meshtcproutes
      - meshtimeouts
      - meshtlses
      - meshtraces
      - meshtrafficpermissions
      - hostnamegenerators
      - meshexternalservices
      - meshmultizoneservices
      - meshservices
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - delete
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - kuma.io
    resources:
      - meshgatewayinstances/status
      - meshgatewayinstances/finalizers
      - dataplanes/finalizers
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - pods/finalizers
    verbs:
      - get
      - patch
      - update
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kuma-control-plane
  namespace: 
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: default
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kuma-control-plane
  namespace: kuma-demo
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: default
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kuma-control-plane
  namespace: kuma-test
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: default
---
# Source: kuma/templates/cp-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kuma-control-plane
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations:
    prometheus.io/port: "5680"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - port: 5680
      name: diagnostics
      appProtocol: http
    - port: 5681
      name: http-api-server
      appProtocol: http
    - port: 5682
      name: https-api-server
      appProtocol: https
    - port: 443
      name: https-admission-server
      targetPort: 5443
      appProtocol: https
    - port: 5676
      name: mads-server
      appProtocol: https
    - port: 5678
      name: dp-server
      appProtocol: https
  selector:
    app: kuma-control-plane
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
---
# Source: kuma/templates/egress-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kuma-egress
  namespace: default
  labels: 
    app: kuma-egress
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 10002
      protocol: TCP
      targetPort: 10002
  selector:
    app: kuma-egress
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
---
# Source: kuma/templates/ingress-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kuma-ingress
  namespace: default
  labels: 
    app: kuma-ingress
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: LoadBalancer
  ports:
    - port: 10001
      protocol: TCP
      targetPort: 10001
  selector:
    app: kuma-ingress
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
---
# Source: kuma/templates/cp-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-control-plane
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations: 
    
spec:
  replicas: 1
  minReadySeconds: 0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: kuma
      app.kubernetes.io/instance: release-name
      app: kuma-control-plane
  template:
    metadata:
      annotations:
        checksum/config: fd749e732870fe6b453ba0ad044167d9a4613fbc3de621a0d4487d09b01baf4a
        checksum/tls-secrets: c84e08ce3652b505c86cf6881c960145548b0006d6a354656349552229b6c083
      labels: 
        app: kuma-control-plane
        helm.sh/chart: kuma-0.0.0-preview.vlocal-build
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
        app.kubernetes.io/managed-by: Helm
    spec:
      affinity: 
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - 'kuma'
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - 'release-name'
                - key: app
                  operator: In
                  values:
                  - 'kuma-control-plane'
              topologyKey: kubernetes.io/hostname
            weight: 100
      securityContext:
        runAsNonRoot: true
      serviceAccountName: kuma-control-plane
      automountServiceAccountToken: true
      nodeSelector:
        
        kubernetes.io/os: linux
      hostNetwork: false
      terminationGracePeriodSeconds: 30
      
      containers:
        - name: control-plane
          image: "docker.io/kumahq/kuma-cp:0.0.0-preview.vlocal-build"
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: KUMA_API_SERVER_AUTHN_LOCALHOST_IS_ADMIN
              value: "false"
            - name: KUMA_API_SERVER_READ_ONLY
              value: "true"
            - name: KUMA_DEFAULTS_SKIP_MESH_CREATION
              value: "false"
            - name: KUMA_DP_SERVER_HDS_ENABLED
              value: "false"
            - name: KUMA_ENVIRONMENT
              value: "kubernetes"
            - name: KUMA_GENERAL_TLS_CERT_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/tls.crt"
            - name: KUMA_GENERAL_TLS_KEY_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/tls.key"
            - name: KUMA_INJECTOR_INIT_CONTAINER_IMAGE
              value: "docker.io/kumahq/kuma-init:0.0.0-preview.vlocal-build"
            - name: KUMA_MODE
              value: "zone"
            - name: KUMA_PLUGIN_POLICIES_ENABLED
              value: "meshaccesslogs,meshcircuitbreakers,meshfaultinjections,meshhealthchecks,meshhttproutes,meshloadbalancingstrategies,meshmetrics,meshpassthroughs,meshproxypatches,meshratelimits,meshretries,meshtcproutes,meshtimeouts,meshtlses,meshtraces,meshtrafficpermissions"
            - name: KUMA_RUNTIME_KUBERNETES_ADMISSION_SERVER_CERT_DIR
              value: "/var/run/secrets/kuma.io/tls-cert"
            - name: KUMA_RUNTIME_KUBERNETES_ADMISSION_SERVER_PORT
              value: "5443"
            - name: KUMA_RUNTIME_KUBERNETES_ALLOWED_USERS
              value: "system:serviceaccount:default:kuma-control-plane"
            - name: KUMA_RUNTIME_KUBERNETES_CONTROL_PLANE_SERVICE_NAME
              value: "kuma-control-plane"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_CA_CERT_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/ca.crt"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_CNI_ENABLED
              value: "false"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_SIDECAR_CONTAINER_IMAGE
              value: "docker.io/kumahq/kuma-dp:0.0.0-preview.vlocal-build"
            - name: KUMA_RUNTIME_KUBERNETES_WATCH_NAMESPACES
              value: "kuma-demo,kuma-test"
            - name: KUMA_STORE_KUBERNETES_SYSTEM_NAMESPACE
              value: "default"
            - name: KUMA_STORE_TYPE
              value: "kubernetes"
            - name: KUMA_INTER_CP_CATALOG_INSTANCE_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: control-plane
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  containerName: control-plane
                  resource: limits.cpu
          args:
            - run
            - --log-level=info
            - --log-output-path=
            - --config-file=/etc/kuma.io/kuma-control-plane/config.yaml
          ports:
            - containerPort: 5680
              name: diagnostics
              protocol: TCP
            - containerPort: 5681
            - containerPort: 5682
            - containerPort: 5443
            - containerPort: 5678
          livenessProbe:
            timeoutSeconds: 10
            httpGet:
              path: /healthy
              port: 5680
          readinessProbe:
            timeoutSeconds: 10
            httpGet:
              path: /ready
              port: 5680
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 500m
              memory: 256Mi
          
          volumeMounts:
            - name: general-tls-cert
              mountPath: /var/run/secrets/kuma.io/tls-cert/tls.crt
              subPath: tls.crt
              readOnly: true
            - name: general-tls-cert
              mountPath: /var/run/secrets/kuma.io/tls-cert/tls.key
              subPath: tls.key
              readOnly: true
            - name: general-tls-cert
              mountPath: /var/run/secrets/kuma.io/tls-cert/ca.crt
              subPath: ca.crt
              readOnly: true
            - name: kuma-control-plane-config
              mountPath: /etc/kuma.io/kuma-control-plane
              readOnly: true
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: general-tls-cert
          secret:
            secretName: kuma-tls-cert
        - name: kuma-control-plane-config
          configMap:
            name: kuma-control-plane-config
        - name: tmp
          emptyDir: {}
---
# Source: kuma/templates/egress-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-egress
  namespace: default
  labels: 
    app: kuma-egress
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kuma
      app.kubernetes.io/instance: release-name
      app: kuma-egress
  template:
    metadata:
      annotations:
        kuma.io/egress: enabled
      labels:
        app: kuma-egress
        helm.sh/chart: kuma-0.0.0-preview.vlocal-build
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
        app.kubernetes.io/managed-by: Helm
    spec:
      affinity: 
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - 'kuma'
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - 'release-name'
                - key: app
                  operator: In
                  values:
                  - kuma-egress
              topologyKey: kubernetes.io/hostname
            weight: 100
      securityContext:
        runAsGroup: 5678
        runAsNonRoot: true
        runAsUser: 5678
      serviceAccountName: kuma-egress
      automountServiceAccountToken: true
      nodeSelector:
      
        kubernetes.io/os: linux
      
      containers:
        - name: egress
          image: "docker.io/kumahq/kuma-dp:0.0.0-preview.vlocal-build"
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUMA_CONTROL_PLANE_URL
              value: "https://kuma-control-plane.default:5678"
            - name: KUMA_CONTROL_PLANE_CA_CERT_FILE
              value: /var/run/secrets/kuma.io/cp-ca/ca.crt
            - name: KUMA_DATAPLANE_DRAIN_TIME
              value: 30s
            - name: KUMA_DATAPLANE_RUNTIME_TOKEN_PATH
              value: /var/run/secrets/kubernetes.io/serviceaccount/token
            - name: KUMA_DATAPLANE_PROXY_TYPE
              value: "egress"
          args:
            - run
            - --log-level=info
          ports:
            - containerPort: 10002
          livenessProbe:
            httpGet:
              path: "/ready"
              port: 9901
            failureThreshold: 12
            initialDelaySeconds: 60
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: "/ready"
              port: 9901
            failureThreshold: 12
            initialDelaySeconds: 1
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources: 
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - name: control-plane-ca
              mountPath: /var/run/secrets/kuma.io/cp-ca
              readOnly: true
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: control-plane-ca
          secret:
            secretName: "kuma-tls-cert"
            items:
              - key: ca.crt
                path: ca.crt
        - name: tmp
          emptyDir: {}
---
# Source: kuma/templates/ingress-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-ingress
  namespace: default
  labels: 
    app: kuma-ingress
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kuma
      app.kubernetes.io/instance: release-name
      app: kuma-ingress
  template:
    metadata:
      annotations:
        kuma.io/ingress: enabled
      labels:
        app: kuma-ingress
        helm.sh/chart: kuma-0.0.0-preview.vlocal-build
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
        app.kubernetes.io/managed-by: Helm
    spec:
      affinity: 
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - 'kuma'
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - 'release-name'
                - key: app
                  operator: In
                  values:
                  - kuma-ingress
              topologyKey: kubernetes.io/hostname
            weight: 100
      securityContext:
        runAsGroup: 5678
        runAsNonRoot: true
        runAsUser: 5678
      serviceAccountName: kuma-ingress
      automountServiceAccountToken: true
      nodeSelector:
      
        kubernetes.io/os: linux
      terminationGracePeriodSeconds: 40
      
      containers:
        - name: ingress
          image: "docker.io/kumahq/kuma-dp:0.0.0-preview.vlocal-build"
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUMA_CONTROL_PLANE_URL
              value: "https://kuma-control-plane.default:5678"
            - name: KUMA_CONTROL_PLANE_CA_CERT_FILE
              value: /var/run/secrets/kuma.io/cp-ca/ca.crt
            - name: KUMA_DATAPLANE_DRAIN_TIME
              value: 30s
            - name: KUMA_DATAPLANE_RUNTIME_TOKEN_PATH
              value: /var/run/secrets/kubernetes.io/serviceaccount/token
            - name: KUMA_DATAPLANE_PROXY_TYPE
              value: "ingress"
          args:
            - run
            - --log-level=info
          ports:
            - containerPort: 10001
          livenessProbe:
            httpGet:
              path: "/ready"
              port: 9901
            failureThreshold: 12
            initialDelaySeconds: 60
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: "/ready"
              port: 9901
            failureThreshold: 12
            initialDelaySeconds: 1
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          resources: 
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 64Mi
          
          volumeMounts:
            - name: control-plane-ca
              mountPath: /var/run/secrets/kuma.io/cp-ca
              readOnly: true
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: control-plane-ca
          secret:
            secretName: "kuma-tls-cert"
            items:
              - key: ca.crt
                path: ca.crt
        - name: tmp
          emptyDir: {}
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: kuma-admission-mutating-webhook-configuration
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: mesh.defaulter.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - "kuma-demo"
            - "kuma-test"
            - "default"
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRRXpVN2t2aEZtVDF1dDVWY2dqZWFrakFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSTFNREl4TkRFMk1qWTFOMW9YRFRNMU1ESXhNakUyTWpZMQpOMW93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQU1IUTEzNjd3aThRbmVWbVkvQ1RtY3UxNno5R3Nla2ttWEw2OXBPSXNTUlJ1Y3lLQzJhNHRtT0wKTzZiU3BSWFRVWWFwQjV5OWJ0bHA1RGVmYzZ3SktyQ0VjUzY3VFZxQWJ0RlNlZ3MxTmVrT3JnOHpCWFJETmZvVApoLzVwbXVWZEhBSFMxdmpOc1RIeFVtV1U5T2JtM0k2amU5R1U5cGJNZi9ZMDM5bEtZVGpkTjB2Q3B6SzRLV2FlCmdjRkEvL2xvbEd6a0FGWHZRYjN3d2s0L1RLOW5Ld3NWMTVYVDRRa1pYT210dmpwTVdBYndGcmsza01hcUZ2SngKbWh1UmRoRGdpUUl3cndQNnZvRTZnbTBqWTkwOXB1OEdjWWNEbnVpZ3p4RTVSOGdCZEwrVTFCVnVQVGZSYTE4VQpyVzE0VVlyR2FkVG5HME1LVUY0T2xQRk5oQ3dVa0o4Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZU01czJVb0ZWaU9QcEh6SWxxM1YxRXpORU5qQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBdXZYazJoRmJscjJEYzNJalg5V1hpYzQ0eXJhNURMQ3lvNFI0RTVaYzFCRWRDMXZDTU9mMFFQQUM1SHlRCmlVM2toTzFiYTZ5cXpPbVNJeEJNa1VDWWtiek1IQW84QVRtWnhkb2tXZW4vTmJMVWxiL2pBNEhBZFMzQjl0ZTgKWklJa0U4VEtYcWRIcU8vUlZrb05zQlRDVDZVOFljNE9pVGk4UFErSEMxYlpjWnFlK2w4RWx5Z2NLYVQ4YnJxWQoyTWlmRjd4SjFPRjg4RGJ0Y3VxT2hlcVF6UDFkSlJEdmhPRFFkU25PN2xMRUxWdUNseUJkbDdIdk53NyswYVpiClNiaTNubEtzOVhJczkyM0gyRmNkMnAyOTBTdkFJU3VyeWg0TUJHLzhFTHlyb2dyYnVWSkZQTDdaNXBia2owTzAKajg3WFV2cWRFSDdwMW8rTzhMbGRveExsVHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /default-kuma-io-v1alpha1-mesh
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - meshes
          - dataplanes
          - dataplaneinsights
          - meshgateways
          - zoneingresses
          - zoneingressinsights
          - zoneegresses
          - zoneegressinsights
          - serviceinsights
          - zone
          - zoneinsights
          - meshaccesslogs
          - meshcircuitbreakers
          - meshfaultinjections
          - meshhealthchecks
          - meshhttproutes
          - meshloadbalancingstrategies
          - meshmetrics
          - meshpassthroughs
          - meshproxypatches
          - meshratelimits
          - meshretries
          - meshtcproutes
          - meshtimeouts
          - meshtlses
          - meshtraces
          - meshtrafficpermissions
          - hostnamegenerators
          - meshexternalservices
          - meshmultizoneservices
          - meshservices
    sideEffects: None
  - name: owner-reference.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - "kuma-demo"
            - "kuma-test"
            - "default"
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRRXpVN2t2aEZtVDF1dDVWY2dqZWFrakFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSTFNREl4TkRFMk1qWTFOMW9YRFRNMU1ESXhNakUyTWpZMQpOMW93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQU1IUTEzNjd3aThRbmVWbVkvQ1RtY3UxNno5R3Nla2ttWEw2OXBPSXNTUlJ1Y3lLQzJhNHRtT0wKTzZiU3BSWFRVWWFwQjV5OWJ0bHA1RGVmYzZ3SktyQ0VjUzY3VFZxQWJ0RlNlZ3MxTmVrT3JnOHpCWFJETmZvVApoLzVwbXVWZEhBSFMxdmpOc1RIeFVtV1U5T2JtM0k2amU5R1U5cGJNZi9ZMDM5bEtZVGpkTjB2Q3B6SzRLV2FlCmdjRkEvL2xvbEd6a0FGWHZRYjN3d2s0L1RLOW5Ld3NWMTVYVDRRa1pYT210dmpwTVdBYndGcmsza01hcUZ2SngKbWh1UmRoRGdpUUl3cndQNnZvRTZnbTBqWTkwOXB1OEdjWWNEbnVpZ3p4RTVSOGdCZEwrVTFCVnVQVGZSYTE4VQpyVzE0VVlyR2FkVG5HME1LVUY0T2xQRk5oQ3dVa0o4Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZU01czJVb0ZWaU9QcEh6SWxxM1YxRXpORU5qQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBdXZYazJoRmJscjJEYzNJalg5V1hpYzQ0eXJhNURMQ3lvNFI0RTVaYzFCRWRDMXZDTU9mMFFQQUM1SHlRCmlVM2toTzFiYTZ5cXpPbVNJeEJNa1VDWWtiek1IQW84QVRtWnhkb2tXZW4vTmJMVWxiL2pBNEhBZFMzQjl0ZTgKWklJa0U4VEtYcWRIcU8vUlZrb05zQlRDVDZVOFljNE9pVGk4UFErSEMxYlpjWnFlK2w4RWx5Z2NLYVQ4YnJxWQoyTWlmRjd4SjFPRjg4RGJ0Y3VxT2hlcVF6UDFkSlJEdmhPRFFkU25PN2xMRUxWdUNseUJkbDdIdk53NyswYVpiClNiaTNubEtzOVhJczkyM0gyRmNkMnAyOTBTdkFJU3VyeWg0TUJHLzhFTHlyb2dyYnVWSkZQTDdaNXBia2owTzAKajg3WFV2cWRFSDdwMW8rTzhMbGRveExsVHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /owner-reference-kuma-io-v1alpha1
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
        resources:
          - circuitbreakers
          - externalservices
          - faultinjections
          - healthchecks
          - meshgateways
          - meshgatewayroutes
          - proxytemplates
          - ratelimits
          - retries
          - timeouts
          - trafficlogs
          - trafficpermissions
          - trafficroutes
          - traffictraces
          - virtualoutbounds
          - meshaccesslogs
          - meshcircuitbreakers
          - meshfaultinjections
          - meshhealthchecks
          - meshhttproutes
          - meshloadbalancingstrategies
          - meshmetrics
          - meshpassthroughs
          - meshproxypatches
          - meshratelimits
          - meshretries
          - meshtcproutes
          - meshtimeouts
          - meshtlses
          - meshtraces
          - meshtrafficpermissions
          - hostnamegenerators
          - meshexternalservices
          - meshmultizoneservices
          - meshservices
  
      
    sideEffects: None
  - name: namespace-kuma-injector.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - "kuma-demo"
            - "kuma-test"
            - "default"
        - key: kuma.io/sidecar-injection
          operator: In
          values: ["enabled", "true"]
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRRXpVN2t2aEZtVDF1dDVWY2dqZWFrakFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSTFNREl4TkRFMk1qWTFOMW9YRFRNMU1ESXhNakUyTWpZMQpOMW93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQU1IUTEzNjd3aThRbmVWbVkvQ1RtY3UxNno5R3Nla2ttWEw2OXBPSXNTUlJ1Y3lLQzJhNHRtT0wKTzZiU3BSWFRVWWFwQjV5OWJ0bHA1RGVmYzZ3SktyQ0VjUzY3VFZxQWJ0RlNlZ3MxTmVrT3JnOHpCWFJETmZvVApoLzVwbXVWZEhBSFMxdmpOc1RIeFVtV1U5T2JtM0k2amU5R1U5cGJNZi9ZMDM5bEtZVGpkTjB2Q3B6SzRLV2FlCmdjRkEvL2xvbEd6a0FGWHZRYjN3d2s0L1RLOW5Ld3NWMTVYVDRRa1pYT210dmpwTVdBYndGcmsza01hcUZ2SngKbWh1UmRoRGdpUUl3cndQNnZvRTZnbTBqWTkwOXB1OEdjWWNEbnVpZ3p4RTVSOGdCZEwrVTFCVnVQVGZSYTE4VQpyVzE0VVlyR2FkVG5HME1LVUY0T2xQRk5oQ3dVa0o4Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZU01czJVb0ZWaU9QcEh6SWxxM1YxRXpORU5qQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBdXZYazJoRmJscjJEYzNJalg5V1hpYzQ0eXJhNURMQ3lvNFI0RTVaYzFCRWRDMXZDTU9mMFFQQUM1SHlRCmlVM2toTzFiYTZ5cXpPbVNJeEJNa1VDWWtiek1IQW84QVRtWnhkb2tXZW4vTmJMVWxiL2pBNEhBZFMzQjl0ZTgKWklJa0U4VEtYcWRIcU8vUlZrb05zQlRDVDZVOFljNE9pVGk4UFErSEMxYlpjWnFlK2w4RWx5Z2NLYVQ4YnJxWQoyTWlmRjd4SjFPRjg4RGJ0Y3VxT2hlcVF6UDFkSlJEdmhPRFFkU25PN2xMRUxWdUNseUJkbDdIdk53NyswYVpiClNiaTNubEtzOVhJczkyM0gyRmNkMnAyOTBTdkFJU3VyeWg0TUJHLzhFTHlyb2dyYnVWSkZQTDdaNXBia2owTzAKajg3WFV2cWRFSDdwMW8rTzhMbGRveExsVHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /inject-sidecar
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
        resources:
          - pods
    sideEffects: None
  - name: pods-kuma-injector.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - "kuma-demo"
            - "kuma-test"
            - "default"
    objectSelector:
      matchLabels:
        kuma.io/sidecar-injection: enabled
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRRXpVN2t2aEZtVDF1dDVWY2dqZWFrakFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSTFNREl4TkRFMk1qWTFOMW9YRFRNMU1ESXhNakUyTWpZMQpOMW93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQU1IUTEzNjd3aThRbmVWbVkvQ1RtY3UxNno5R3Nla2ttWEw2OXBPSXNTUlJ1Y3lLQzJhNHRtT0wKTzZiU3BSWFRVWWFwQjV5OWJ0bHA1RGVmYzZ3SktyQ0VjUzY3VFZxQWJ0RlNlZ3MxTmVrT3JnOHpCWFJETmZvVApoLzVwbXVWZEhBSFMxdmpOc1RIeFVtV1U5T2JtM0k2amU5R1U5cGJNZi9ZMDM5bEtZVGpkTjB2Q3B6SzRLV2FlCmdjRkEvL2xvbEd6a0FGWHZRYjN3d2s0L1RLOW5Ld3NWMTVYVDRRa1pYT210dmpwTVdBYndGcmsza01hcUZ2SngKbWh1UmRoRGdpUUl3cndQNnZvRTZnbTBqWTkwOXB1OEdjWWNEbnVpZ3p4RTVSOGdCZEwrVTFCVnVQVGZSYTE4VQpyVzE0VVlyR2FkVG5HME1LVUY0T2xQRk5oQ3dVa0o4Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZU01czJVb0ZWaU9QcEh6SWxxM1YxRXpORU5qQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBdXZYazJoRmJscjJEYzNJalg5V1hpYzQ0eXJhNURMQ3lvNFI0RTVaYzFCRWRDMXZDTU9mMFFQQUM1SHlRCmlVM2toTzFiYTZ5cXpPbVNJeEJNa1VDWWtiek1IQW84QVRtWnhkb2tXZW4vTmJMVWxiL2pBNEhBZFMzQjl0ZTgKWklJa0U4VEtYcWRIcU8vUlZrb05zQlRDVDZVOFljNE9pVGk4UFErSEMxYlpjWnFlK2w4RWx5Z2NLYVQ4YnJxWQoyTWlmRjd4SjFPRjg4RGJ0Y3VxT2hlcVF6UDFkSlJEdmhPRFFkU25PN2xMRUxWdUNseUJkbDdIdk53NyswYVpiClNiaTNubEtzOVhJczkyM0gyRmNkMnAyOTBTdkFJU3VyeWg0TUJHLzhFTHlyb2dyYnVWSkZQTDdaNXBia2owTzAKajg3WFV2cWRFSDdwMW8rTzhMbGRveExsVHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /inject-sidecar
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
        resources:
          - pods
    sideEffects: None
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: kuma-validating-webhook-configuration
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - "kuma-demo"
            - "kuma-test"
            - "default"
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRRXpVN2t2aEZtVDF1dDVWY2dqZWFrakFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSTFNREl4TkRFMk1qWTFOMW9YRFRNMU1ESXhNakUyTWpZMQpOMW93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQU1IUTEzNjd3aThRbmVWbVkvQ1RtY3UxNno5R3Nla2ttWEw2OXBPSXNTUlJ1Y3lLQzJhNHRtT0wKTzZiU3BSWFRVWWFwQjV5OWJ0bHA1RGVmYzZ3SktyQ0VjUzY3VFZxQWJ0RlNlZ3MxTmVrT3JnOHpCWFJETmZvVApoLzVwbXVWZEhBSFMxdmpOc1RIeFVtV1U5T2JtM0k2amU5R1U5cGJNZi9ZMDM5bEtZVGpkTjB2Q3B6SzRLV2FlCmdjRkEvL2xvbEd6a0FGWHZRYjN3d2s0L1RLOW5Ld3NWMTVYVDRRa1pYT210dmpwTVdBYndGcmsza01hcUZ2SngKbWh1UmRoRGdpUUl3cndQNnZvRTZnbTBqWTkwOXB1OEdjWWNEbnVpZ3p4RTVSOGdCZEwrVTFCVnVQVGZSYTE4VQpyVzE0VVlyR2FkVG5HME1LVUY0T2xQRk5oQ3dVa0o4Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZU01czJVb0ZWaU9QcEh6SWxxM1YxRXpORU5qQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBdXZYazJoRmJscjJEYzNJalg5V1hpYzQ0eXJhNURMQ3lvNFI0RTVaYzFCRWRDMXZDTU9mMFFQQUM1SHlRCmlVM2toTzFiYTZ5cXpPbVNJeEJNa1VDWWtiek1IQW84QVRtWnhkb2tXZW4vTmJMVWxiL2pBNEhBZFMzQjl0ZTgKWklJa0U4VEtYcWRIcU8vUlZrb05zQlRDVDZVOFljNE9pVGk4UFErSEMxYlpjWnFlK2w4RWx5Z2NLYVQ4YnJxWQoyTWlmRjd4SjFPRjg4RGJ0Y3VxT2hlcVF6UDFkSlJEdmhPRFFkU25PN2xMRUxWdUNseUJkbDdIdk53NyswYVpiClNiaTNubEtzOVhJczkyM0gyRmNkMnAyOTBTdkFJU3VyeWg0TUJHLzhFTHlyb2dyYnVWSkZQTDdaNXBia2owTzAKajg3WFV2cWRFSDdwMW8rTzhMbGRveExsVHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /validate-kuma-io-v1alpha1
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - circuitbreakers
          - dataplanes
          - externalservices
          - faultinjections
          - meshgatewayinstances
          - healthchecks
          - meshes
          - meshgateways
          - meshgatewayroutes
          - proxytemplates
          - ratelimits
          - retries
          - trafficlogs
          - trafficpermissions
          - trafficroutes
          - traffictraces
          - virtualoutbounds
          - zones
          - containerpatches
          - meshaccesslogs
          - meshcircuitbreakers
          - meshfaultinjections
          - meshhealthchecks
          - meshhttproutes
          - meshloadbalancingstrategies
          - meshmetrics
          - meshpassthroughs
          - meshproxypatches
          - meshratelimits
          - meshretries
          - meshtcproutes
          - meshtimeouts
          - meshtlses
          - meshtraces
          - meshtrafficpermissions
          - hostnamegenerators
          - meshexternalservices
          - meshmultizoneservices
          - meshservices
    
      
    sideEffects: None
  - name: secret.validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    namespaceSelector:
      matchLabels:
        kuma.io/system-namespace: "true"
    failurePolicy: Ignore
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRRXpVN2t2aEZtVDF1dDVWY2dqZWFrakFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSTFNREl4TkRFMk1qWTFOMW9YRFRNMU1ESXhNakUyTWpZMQpOMW93RWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQU1IUTEzNjd3aThRbmVWbVkvQ1RtY3UxNno5R3Nla2ttWEw2OXBPSXNTUlJ1Y3lLQzJhNHRtT0wKTzZiU3BSWFRVWWFwQjV5OWJ0bHA1RGVmYzZ3SktyQ0VjUzY3VFZxQWJ0RlNlZ3MxTmVrT3JnOHpCWFJETmZvVApoLzVwbXVWZEhBSFMxdmpOc1RIeFVtV1U5T2JtM0k2amU5R1U5cGJNZi9ZMDM5bEtZVGpkTjB2Q3B6SzRLV2FlCmdjRkEvL2xvbEd6a0FGWHZRYjN3d2s0L1RLOW5Ld3NWMTVYVDRRa1pYT210dmpwTVdBYndGcmsza01hcUZ2SngKbWh1UmRoRGdpUUl3cndQNnZvRTZnbTBqWTkwOXB1OEdjWWNEbnVpZ3p4RTVSOGdCZEwrVTFCVnVQVGZSYTE4VQpyVzE0VVlyR2FkVG5HME1LVUY0T2xQRk5oQ3dVa0o4Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJRZU01czJVb0ZWaU9QcEh6SWxxM1YxRXpORU5qQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBdXZYazJoRmJscjJEYzNJalg5V1hpYzQ0eXJhNURMQ3lvNFI0RTVaYzFCRWRDMXZDTU9mMFFQQUM1SHlRCmlVM2toTzFiYTZ5cXpPbVNJeEJNa1VDWWtiek1IQW84QVRtWnhkb2tXZW4vTmJMVWxiL2pBNEhBZFMzQjl0ZTgKWklJa0U4VEtYcWRIcU8vUlZrb05zQlRDVDZVOFljNE9pVGk4UFErSEMxYlpjWnFlK2w4RWx5Z2NLYVQ4YnJxWQoyTWlmRjd4SjFPRjg4RGJ0Y3VxT2hlcVF6UDFkSlJEdmhPRFFkU25PN2xMRUxWdUNseUJkbDdIdk53NyswYVpiClNiaTNubEtzOVhJczkyM0gyRmNkMnAyOTBTdkFJU3VyeWg0TUJHLzhFTHlyb2dyYnVWSkZQTDdaNXBia2owTzAKajg3WFV2cWRFSDdwMW8rTzhMbGRveExsVHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /validate-v1-secret
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - secrets
    sideEffects: None
---
# Source: kuma/templates/pre-delete-webhooks.yaml
# HELM first deletes RBAC of Kuma, then it tries to delete Secrets. We've got validating webhook on Secrets.
# But even that the policy of this webhook is Ignore, it fails because Kuma does not have permission to access Secrets anymore.
# Therefore we first need to delete webhook so we can delete the rest of the deployment
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-pre-delete-job
  namespace: default
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-patch-ns-job
  namespace: default
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-upgrade-install-crds-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-install-crds
  namespace: default
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-upgrade-install-crds-job.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuma-install-crds-scripts
  namespace: default
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
data:
  install_crds.sh: |
    #!/usr/bin/env sh
    set -e

    if [ -s /kuma/crds/crds.yaml ]; then
      echo "/kuma/crds/crds.yaml found and is not empty, adding crds"
      kubectl apply -f /kuma/crds/crds.yaml
    else
      echo "/kuma/crds/crds.yaml not found or empty, it looks like there is no crds to install"
    fi
  save_crds.sh: |
    set -e

    crds="$(kumactl install crds --no-config)"

    if [ -n "${crds}" ]; then
      echo "found crds - saving to /kuma/crds/crds.yaml"
      echo "${crds}" > /kuma/crds/crds.yaml
    fi
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-pre-delete-job
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    resourceNames:
      - kuma-validating-webhook-configuration
    verbs:
      - delete
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-patch-ns-job
  namespace: default
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    resourceNames:
      - default
    verbs:
      - get
      - patch
---
# Source: kuma/templates/pre-upgrade-install-crds-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-install-crds
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - "apiextensions.k8s.io"
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - patch
      - update
      - list
      - get
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-pre-delete-job
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-pre-delete-job
subjects:
  - kind: ServiceAccount
    name: kuma-pre-delete-job
    namespace: default
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-patch-ns-job
  namespace: default
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-patch-ns-job
subjects:
  - kind: ServiceAccount
    name: kuma-patch-ns-job
    namespace: default
---
# Source: kuma/templates/pre-upgrade-install-crds-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-install-crds
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-install-crds
subjects:
  - kind: ServiceAccount
    name: kuma-install-crds
    namespace: default
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-delete-webhook
  namespace: default
  labels:
  
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-delete"
    
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
spec:
  template:
    metadata:
      name: kuma-delete-webhook
      labels:
    
        helm.sh/chart: kuma-0.0.0-preview.vlocal-build
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-pre-delete-job
      nodeSelector:
      
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
      containers:
        - name: pre-delete-job
          image: "docker.io/bitnami/kubectl:1.32.0"
          command:
            - 'kubectl'
            - 'delete'
            - 'ValidatingWebhookConfiguration'
            - '--ignore-not-found'
            - kuma-validating-webhook-configuration
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 65534
          resources:
             requests:
               cpu: "100m"
               memory: "256Mi"
             limits:
               cpu: "100m"
               memory: "256Mi"
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-patch-ns
  namespace: default
  labels:
  
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-install"
    
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
spec:
  template:
    metadata:
      name: kuma-patch-ns-script
      labels:
    
        helm.sh/chart: kuma-0.0.0-preview.vlocal-build
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-patch-ns-job
      nodeSelector:
      
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
      containers:
        - name: pre-install-job
          image: "docker.io/bitnami/kubectl:1.32.0"
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 65534
          resources:
             requests:
               cpu: "100m"
               memory: "256Mi"
             limits:
               cpu: "100m"
               memory: "256Mi"
          command:
            - 'kubectl'
            - 'patch'
            - 'namespace'
            - "default"
            - '--type'
            - 'merge'
            - '--patch'
            - '{ "metadata": { "labels": { "kuma.io/system-namespace": "true" } } }'
---
# Source: kuma/templates/pre-upgrade-install-crds-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-install-crds
  namespace: default
  labels:
  
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  template:
    metadata:
      name: kuma-install-crds-job
      labels:
    
        helm.sh/chart: kuma-0.0.0-preview.vlocal-build
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-install-crds
      nodeSelector:
      
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
      containers:
        - name: pre-upgrade-job
          image: "docker.io/bitnami/kubectl:1.32.0"
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 65534
          resources:
             requests:
               cpu: "100m"
               memory: "256Mi"
             limits:
               cpu: "100m"
               memory: "256Mi"
          command: ["/kuma/scripts/install_crds.sh"]
          volumeMounts:
            - mountPath: /kuma/crds
              name: crds
              readOnly: true
            - mountPath: /kuma/scripts
              name: scripts
              readOnly: true
      initContainers:
        - name: pre-upgrade-job-init
          image: "docker.io/kumahq/kumactl:0.0.0-preview.vlocal-build"
          securityContext:
            readOnlyRootFilesystem: true
          resources:
             requests:
               cpu: "100m"
               memory: "256Mi"
             limits:
               cpu: "100m"
               memory: "256Mi"
          volumeMounts:
          - mountPath: /kuma/crds
            name: crds
          - mountPath: /kuma/scripts
            name: scripts
            readOnly: true
          command: ["sh", "-c"]
          args: ["/kuma/scripts/save_crds.sh"]
      volumes:
        - name: scripts
          configMap:
            name: kuma-install-crds-scripts
            defaultMode: 0755
        - name: crds
          emptyDir: {}
