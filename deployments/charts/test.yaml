---
# Source: kuma/templates/cni-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-cni
  namespace: kube-system
  labels: 
    app: kuma-cni
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-control-plane
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: kuma-tls-cert
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZakNDQWtxZ0F3SUJBZ0lRTGhpR2s0SlNyK1l0WElKcTdSbDVOREFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkcmRXMWhMV05oTUI0WERUSTFNREl4TXpFNU5ESTFNVm9YRFRNMU1ESXhNVEU1TkRJMQpNVm93SFRFYk1Ca0dBMVVFQXhNU2EzVnRZUzFqYjI1MGNtOXNMWEJzWVc1bE1JSUJJakFOQmdrcWhraUc5dzBCCkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXE2OWtIZk15OC9YR2VwdVBtdUwzS3o0YjJ0enFOYnF6djhpKzNtREkKTmo0YU1tWU9JYVpCbzZXL0s5QnBFbVppNmhMYk9LTWMvU3V4Y1NoL0E5bm9TUW9QQUwzeWk1ZFdrTXlIYjhsZQovZlVBMlBlbTVEdE9aT3RCREZTNjZVdGdlejd5Tkd4bUVnNi9zbUtEeTE0ak9ML0FVMldvNFd2Z0FsWnkzZFd4ClViOE45dFdhZDkwMFo1dFlBSkZGbmV3VmlOYUVtQVlCRmZ0WkdyTktpdDUrT3RybVZ4VUQ4V0swalQwejJzaGcKcTFPS2dtVVNGRTk3UzZxUFlySndXZWEyL3pmcTNlT241Mkh5VEJKRkJUQWpyajRWakdmc25vL3ZwTjg4cTFvZwpjcXZIMStZaWUwUnA2NXc2NU5ZMGx0elcrOHovY3V5MnV3WWxITVc5R2EyeU5RSURBUUFCbzRHb01JR2xNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUlVjN0RmamVMbXJTZkF3L0U4eTRzUjdkbFI2akJGQmdOVgpIUkVFUGpBOGdocHJkVzFoTFdOdmJuUnliMnd0Y0d4aGJtVXVaR1ZtWVhWc2RJSWVhM1Z0WVMxamIyNTBjbTlzCkxYQnNZVzVsTG1SbFptRjFiSFF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRRFN6eE5QT2JzMXdoc1kKL2NOZ1FDVHVFdCtwSkk2TDZ4N20xZytCTzloTFl4b1ZCNWFFaHJtcUw4RVdsYjRUTlN0UzZ2RUhSOTJYVFM0ZgpSUDVZMkJDdkdPRlFCQWdGZzlCcnFjNVZPVE45M2NwQXE3c2ZpN1I5V1hmUU1hYWsrUFhFT2RmRHRjMld1eXAxCjIzSVFjL1ZtYVc3Q3Y2UTlEOFRCYU02QVZEeU9lNThJL3grYXBuc2dSSkNVejR5YzJ3YzBKWUtLd2NsOXZjYUgKZk9NZWg2TjVDejU5WktEbTd1eFl0K29TbVJBVFhUUG5ZN09nSFVWTENmYm9DNHBmR3BxV1VzbVVPU0JtbVZscQpScW9PTzhpYnd1di9BdUZWWjArSEhuWXlBR0JucmJUa3IybjJrVk1yNm1uWnZVdnlxU0xQK2hQa2hzNUtuNHNCCnM2WjRMZTArCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcTY5a0hmTXk4L1hHZXB1UG11TDNLejRiMnR6cU5icXp2OGkrM21ESU5qNGFNbVlPCklhWkJvNlcvSzlCcEVtWmk2aExiT0tNYy9TdXhjU2gvQTlub1NRb1BBTDN5aTVkV2tNeUhiOGxlL2ZVQTJQZW0KNUR0T1pPdEJERlM2NlV0Z2V6N3lOR3htRWc2L3NtS0R5MTRqT0wvQVUyV280V3ZnQWxaeTNkV3hVYjhOOXRXYQpkOTAwWjV0WUFKRkZuZXdWaU5hRW1BWUJGZnRaR3JOS2l0NStPdHJtVnhVRDhXSzBqVDB6MnNoZ3ExT0tnbVVTCkZFOTdTNnFQWXJKd1dlYTIvemZxM2VPbjUySHlUQkpGQlRBanJqNFZqR2Zzbm8vdnBOODhxMW9nY3F2SDErWWkKZTBScDY1dzY1TlkwbHR6Vys4ei9jdXkydXdZbEhNVzlHYTJ5TlFJREFRQUJBb0lCQUIvNXhKM0hZK0FJRUhWWgpiNytiTWdtOXdaWmJ1c3RUQUpOaG9ocnN6NTA2cDhwbk00NlUxbmpTTCs3TEhDYXZKeEVOZmdMb2JrZkEwWVdQCjAwZzJWNHJ5OHFSaXZEKy9hZ0lCOWQrZUU3RWM1cEdDWG5UM2pyeEJESlp0V1hxRjdXeEc1dmxZanhJaDZSWWkKUHdXcmZNZmUvc1VKbEJDWDlOcTZteDR4NUpxaXVxcUlraCtzemw3MC9NK3E5TzlmajJ0bDhQNlNPTzBPbTdoSwphelRVUWdnanl4KytEdHpNZ05MQ3VwUFlPUWE1cG5Ka0NhNE14UDN6ZjUyZ0FOVGM5bTV3NnhtZnh3ajBGaHBnCnFZVDIra3NZbGtYRXRGdnNMZXlOdkh4QUxVb3JUd1hDdHpOTE5NMHhHd2RKdDBYTkpVZVppS2svMVNzRGhQaUQKMkkvTjl3RUNnWUVBekRyOUtZUU4rQUtMMmw2Q01vRWhLblZKWGRvZVdoaHVQWTd2djBCU2pVU3p1UzQxN1o4aApYd0VtOGlhV2kxOVFXeG8wVy9LejhDY1FwK1dZRVpBTGVuOU1PcE5nb1YzTEx4cmZCSHc5bElJZEk5VHN3ZG9oCnhHTktxWkoyR1J3bjk4cHBDblJoeXlNZjJKakNERG5DcTYwSW9Mc3JRQ1BHTnpzclpxeTZmQlVDZ1lFQTF6UjEKT1VpN1dpNkxITGtDTHpXeTB3VllTbGY5dWd5ZXFydVVmWmNtLysyWmZ3eVRHL2RVRE42RmVJN1liVC9nTFZuSwozUmtLZ3loek1sYjdSejBCQzRUQ0ZsWHg0R1NHelBTOU4zQzc0R0VoZGZlRFdBNTBiQmNZZVkxU0VHN2ZrUnhDClkvTTBLWk4zbzY4RDN1SWw1RHdLdFgwbFh3cUJLQTk1cmpva1JhRUNnWUF4ZHVRVUp4Qy9EZGJUbCtwTzB5bTIKUDl2NktEY0x1VGtTSGNtQmQ5SEd0Mm9VSXRZYTdGekh4dDZvN2FHdXRmSWZicFJaNU1taUU4UWI5aWJEc2pDbApoYWx2MG53bitUQ2FBeGNhM2dDSU5JOWNPMWp3aHFXQkRFOXNETFlmMU1yMVlBZmE2Vjg2TlJLa2dqTVZoUFBhCllybGhQSlA0SC9JRk5JYUpnckpVRlFLQmdRQ1FrTXZDZklwbTdXZEVGMEJSYUhoRmE0ekEvRlVVdTArSEQ5V1QKZkl1VlZ3NUxHNjVqRmdXZlU0aEQwV213RWozTkdVbSt0d2lwek8xOXZwSzBhMVdkWUVSbGJyeTZhYTFvVjJ3WQpweUYrZktGV3RydkQxb244NXBMcGJMYlpGVElZTCt5bGFnWDdlL1hkdmo4U1pjYmdpRGtGYkJsRHZESEJNSXdrCkx5aVlvUUtCZ0MrTS9VdkdZSW45TVVHUXFHNU5jZzlsb0JJY1JnYTFLbWo3RDFNNEZMQndhUmJYMjk4TlVpNmkKYnZZQllqaFNYdE1SVC9Veml3NmdoL2I5cE9IK3pBTUgwZmVWWVhPVjJvKzZyYXZ4SlU5aUlFTVVRKzZBcEJQRwpBVThmMEJUd2FxQkYxbWtzRDlFVTBQY3RzTnFpTzBVMjgvMlkwcDJzSkpXSndrWVd0REUzCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUtJY1JGZlR4cVJIREFjTXVGTGdaV1F3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlOVEF5TVRNeE9UUXlOVEZhRncwek5UQXlNVEV4T1RReQpOVEZhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEcXhqM05YQ0pUQjhNSWhUVU1PV2VBRnFnVnh6V0hYc3V1ekRpYkd0aStSUmxlOVVENDgyYzYKRXd6d2lPejBqYm9UdTRlRHBPTjF0YlMxSnlGR0xBcXdxc0hZaEIyc3dreUZPMFVBanFWSTJ5VVRnZFA2c1RDRgpPL0piVnc4RWtZTHcwWFljUVVCNVRoeWJ3bTFWU21wVmdCcEw5SWFBMjBPSnlibVVnVWNVeE5LKzZOb3RlT1NzCk43bFBHcm4xVEZqWDc4UGlGV1lYeUdXUGozRDg4VU1tamdveEIyMGxwanZMaFJLaUlMZ3BaeE5iQVRvMzFhWHMKYlZGaHFsNXFsU3NzYUhHalZxZUhDS055aHdzZ3NsWkJ0TXdrSi9mV1FjTjQ0cDlwc01Ca3JhTFNBU1BIcW1kaApJclFMOThLQmdIMUYyZTA4c21mWjJONTIwaGxTc21xakFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVVZIT3czNDNpNXEwbndNUHhQTXVMRWUzWlVlb3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUVhU2ppcWRLcWVHalE0ZUFENDhTM1R5QTZnYnU3SStTaUtmeUMzRm5EZkIyVGcyT3RUdktwWCtKaHhzCnVGMzJ0RWVmUWQ1Sit3WW42Vk55UDVwSnpsWVVmcWUxSm0vODBHSXMxUkhhbDBNUER4VjVzVVIxbE1CMFREWWUKeS9LUHBheGoyMkU5NU1Wa3E4UWIzR1NPZnU5VlY0Qm5LeGFNUE9Pa2xPVVNmRTM0eFQ3NExsY1lHMGVSbGU2dwp3dkRFVGtzT3NGbGF3SmtQQUI3TXNzajVkUXZTN25wK2NTakFWbWZqWHFJM0FmdlYxVzdCN3NuUDQ0MGE4Q2N0CnRwamIzSUY1bURhL2pIdHVXcFp2QWFCa09McUo2VmhWcHFSZmxwV3ZIMDY5S2NndGRwTWdCS3BuODJ3dncxY0kKaXRTaldsSVhVMFh3NzFHVlI3WE9UbHRtTjljPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: kuma/templates/cni-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: kuma-cni-config
  namespace: kube-system
  labels: 
    app: kuma-cni
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
data:
  # The CNI network configuration to add to the plugin chain on each node.
  cni_network_config: |-
    {
      "cniVersion": "0.3.1",
      "name": "kuma-cni",
      "type": "kuma-cni",
      "log_level": "info",
      "kubernetes": {
          "kubeconfig": "__KUBECONFIG_FILEPATH__",
          "cni_bin_dir": "/var/lib/cni/bin",
          "exclude_namespaces": [ "kube-system" ]
      }
    }
---
# Source: kuma/templates/cp-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuma-control-plane-config
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    # use this file to override default configuration of `kuma-cp`
    #
    # see conf/kuma-cp.conf.yml for available settings
---
# Source: kuma/templates/cni-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-cni
  labels:
  
    app: kuma-cni
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources:
      - nodes
    verbs:
      - get
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-control-plane
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - list
      - watch
  # it's cluster scope resource
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gatewayclasses
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gatewayclasses/status
    verbs:
      - get
      - patch
      - update
  # resources are cluster scope  
  - apiGroups:
      - kuma.io
    resources:
      - meshes
      - zones
      - zoneinsights
      - meshinsights
      - serviceinsights
      - proxytemplates
      - ratelimits
      - trafficpermissions
      - trafficroutes
      - timeouts
      - retries
      - circuitbreakers
      - virtualoutbounds
      - containerpatches
      - externalservices
      - faultinjections
      - healthchecks
      - trafficlogs
      - traffictraces
      - meshgateways
      - meshgatewayroutes
      - meshgatewayconfigs
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  # mesh is a cluster scope resource
  - apiGroups:
      - kuma.io
    resources:
      - meshes/finalizers
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - update
  # validate k8s token before issuing mTLS cert, it's cluster scope
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - create
---
# Source: kuma/templates/cni-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-cni
  labels:
  
    app: kuma-cni
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-cni
subjects:
  - kind: ServiceAccount
    name: kuma-cni
    namespace: kube-system
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-control-plane
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: default
---
# Source: kuma/templates/cni-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kuma-cni
  namespace: kuma-demo
  labels:
  
    app: kuma-cni
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources:
      - pods
    verbs:
      - get
---
# Source: kuma/templates/cni-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kuma-cni
  namespace: kuma-test
  labels:
  
    app: kuma-cni
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources:
      - pods
    verbs:
      - get
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kuma-control-plane
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - ""
    resources:
      - secrets
    verbs:
    - list
    - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways
      - referencegrants
      - httproutes
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways/status
      - httproutes/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - delete
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - kuma.io
    resources:
      - zoneingresses
      - zoneingressinsights
      - zoneegresses
      - zoneegressinsights
      - meshaccesslogs
      - meshcircuitbreakers
      - meshfaultinjections
      - meshhealthchecks
      - meshhttproutes
      - meshloadbalancingstrategies
      - meshmetrics
      - meshpassthroughs
      - meshproxypatches
      - meshratelimits
      - meshretries
      - meshtcproutes
      - meshtimeouts
      - meshtlses
      - meshtraces
      - meshtrafficpermissions
      - hostnamegenerators
      - meshexternalservices
      - meshmultizoneservices
      - meshservices
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  # leader-for-life election deletes Pods in some circumstances
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kuma-control-plane
  namespace: kuma-demo
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - ""
    resources:
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways
      - referencegrants
      - httproutes
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways/status
      - httproutes/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
    - "discovery.k8s.io"
    resources:
      - endpointslices
    verbs:
    - get
    - list
    - watch
  - apiGroups:
      - "apps"
    resources:
      - deployments
      - replicasets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - "batch"
    resources:
      - jobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - kuma.io
    resources:
      - meshgatewayinstances
      - meshaccesslogs
      - meshcircuitbreakers
      - meshfaultinjections
      - meshhealthchecks
      - meshhttproutes
      - meshloadbalancingstrategies
      - meshmetrics
      - meshpassthroughs
      - meshproxypatches
      - meshratelimits
      - meshretries
      - meshtcproutes
      - meshtimeouts
      - meshtlses
      - meshtraces
      - meshtrafficpermissions
      - hostnamegenerators
      - meshexternalservices
      - meshmultizoneservices
      - meshservices
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - delete
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - kuma.io
    resources:
      - meshgatewayinstances/status
      - meshgatewayinstances/finalizers
      - dataplanes/finalizers
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - pods/finalizers
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - k8s.cni.cncf.io
    resources:
      - network-attachment-definitions
    verbs:
      - get
      - list
      - watch
      - create
      - delete
  - apiGroups:
      - "pods"
    resources:
      - pods
    verbs:
      - list
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kuma-control-plane
  namespace: kuma-test
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - ""
    resources:
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways
      - referencegrants
      - httproutes
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - gateways/status
      - httproutes/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
    - "discovery.k8s.io"
    resources:
      - endpointslices
    verbs:
    - get
    - list
    - watch
  - apiGroups:
      - "apps"
    resources:
      - deployments
      - replicasets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - "batch"
    resources:
      - jobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - kuma.io
    resources:
      - meshgatewayinstances
      - meshaccesslogs
      - meshcircuitbreakers
      - meshfaultinjections
      - meshhealthchecks
      - meshhttproutes
      - meshloadbalancingstrategies
      - meshmetrics
      - meshpassthroughs
      - meshproxypatches
      - meshratelimits
      - meshretries
      - meshtcproutes
      - meshtimeouts
      - meshtlses
      - meshtraces
      - meshtrafficpermissions
      - hostnamegenerators
      - meshexternalservices
      - meshmultizoneservices
      - meshservices
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - delete
      - list
      - watch
      - create
      - update
      - patch
  - apiGroups:
      - kuma.io
    resources:
      - meshgatewayinstances/status
      - meshgatewayinstances/finalizers
      - dataplanes/finalizers
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - pods/finalizers
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - k8s.cni.cncf.io
    resources:
      - network-attachment-definitions
    verbs:
      - get
      - list
      - watch
      - create
      - delete
  - apiGroups:
      - "pods"
    resources:
      - pods
    verbs:
      - list
---
# Source: kuma/templates/cni-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kuma-cni
  namespace: kuma-demo
  labels:
  
    app: kuma-cni
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-cni
subjects:
  - kind: ServiceAccount
    name: kuma-cni
    namespace: kube-system
---
# Source: kuma/templates/cni-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kuma-cni
  namespace: kuma-test
  labels:
  
    app: kuma-cni
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-cni
subjects:
  - kind: ServiceAccount
    name: kuma-cni
    namespace: kube-system
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kuma-control-plane
  namespace: 
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: default
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kuma-control-plane
  namespace: kuma-demo
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: default
---
# Source: kuma/templates/cp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kuma-control-plane
  namespace: kuma-test
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kuma-control-plane
subjects:
  - kind: ServiceAccount
    name: kuma-control-plane
    namespace: default
---
# Source: kuma/templates/cp-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kuma-control-plane
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations:
    prometheus.io/port: "5680"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - port: 5680
      name: diagnostics
      appProtocol: http
    - port: 5681
      name: http-api-server
      appProtocol: http
    - port: 5682
      name: https-api-server
      appProtocol: https
    - port: 443
      name: https-admission-server
      targetPort: 5443
      appProtocol: https
    - port: 5676
      name: mads-server
      appProtocol: https
    - port: 5678
      name: dp-server
      appProtocol: https
  selector:
    app: kuma-control-plane
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
---
# Source: kuma/templates/cni-daemonset.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: kuma-cni-node
  namespace: kube-system
  annotations:
    ignore-check.kube-linter.io/run-as-non-root: "The container installs a CNI plugin"
  labels:
    app: kuma-cni
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app: kuma-cni
      app.kubernetes.io/name: kuma
      app.kubernetes.io/instance: release-name
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: kuma-cni
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
      annotations:
        checksum/config: ccdcdef1b36061fa642859b898161f9f7f41eba7bb321383f72f7b267039dd6c
    spec:
      # This, along with the CriticalAddonsOnly toleration below,
      # marks the pod as a critical add-on, ensuring it gets
      # priority scheduling and that its resources are reserved
      # if it ever gets evicted.
      priorityClassName: system-node-critical
      nodeSelector:
      
        kubernetes.io/os: linux
      tolerations:
        # Make sure kuma-cni-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: kuma-cni
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 5
      securityContext:
        {}
      containers:
        - name: install-cni
          imagePullPolicy: IfNotPresent
          image: "docker.io/kumahq/kuma-cni:0.0.0-preview.vlocal-build"
          readinessProbe:
            initialDelaySeconds: 0
            exec:
              command:
                - cat
                - /tmp/ready
          command: [ "sh", "-c", "--" ]
          args: [ "sleep 0 && exec /install-cni" ]
          securityContext:
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "kuma-cni.conf"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: kuma-cni-config
                  key: cni_network_config
            - name: CNI_NET_DIR
              value: "/etc/cni/multus/net.d"
            # If true, deploy as a chained CNI plugin, otherwise deploy as a standalone CNI
            - name: CHAINED_CNI_PLUGIN
              value: "false"
            - name: CNI_LOG_LEVEL
              value: "info"
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - name: tmp
              mountPath: /tmp
      volumes:
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /var/lib/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/multus/net.d
        - name: tmp
          emptyDir: {}
---
# Source: kuma/templates/cp-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuma-control-plane
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations: 
    
spec:
  replicas: 1
  minReadySeconds: 0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: kuma
      app.kubernetes.io/instance: release-name
      app: kuma-control-plane
  template:
    metadata:
      annotations:
        checksum/config: fd749e732870fe6b453ba0ad044167d9a4613fbc3de621a0d4487d09b01baf4a
        checksum/tls-secrets: f98149adcb4a8df6ea7f6714b2c0ec7f83c129dca456e7bf4745d8410b442cde
      labels: 
        app: kuma-control-plane
        helm.sh/chart: kuma-0.0.0-preview.vlocal-build
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
        app.kubernetes.io/managed-by: Helm
    spec:
      affinity: 
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - 'kuma'
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - 'release-name'
                - key: app
                  operator: In
                  values:
                  - 'kuma-control-plane'
              topologyKey: kubernetes.io/hostname
            weight: 100
      securityContext:
        runAsNonRoot: true
      serviceAccountName: kuma-control-plane
      automountServiceAccountToken: true
      nodeSelector:
        
        kubernetes.io/os: linux
      hostNetwork: false
      terminationGracePeriodSeconds: 30
      
      containers:
        - name: control-plane
          image: "docker.io/kumahq/kuma-cp:0.0.0-preview.vlocal-build"
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: KUMA_API_SERVER_AUTHN_LOCALHOST_IS_ADMIN
              value: "false"
            - name: KUMA_API_SERVER_READ_ONLY
              value: "true"
            - name: KUMA_DEFAULTS_SKIP_MESH_CREATION
              value: "false"
            - name: KUMA_DP_SERVER_HDS_ENABLED
              value: "false"
            - name: KUMA_ENVIRONMENT
              value: "kubernetes"
            - name: KUMA_GENERAL_TLS_CERT_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/tls.crt"
            - name: KUMA_GENERAL_TLS_KEY_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/tls.key"
            - name: KUMA_INJECTOR_INIT_CONTAINER_IMAGE
              value: "docker.io/kumahq/kuma-init:0.0.0-preview.vlocal-build"
            - name: KUMA_MODE
              value: "zone"
            - name: KUMA_PLUGIN_POLICIES_ENABLED
              value: "meshaccesslogs,meshcircuitbreakers,meshfaultinjections,meshhealthchecks,meshhttproutes,meshloadbalancingstrategies,meshmetrics,meshpassthroughs,meshproxypatches,meshratelimits,meshretries,meshtcproutes,meshtimeouts,meshtlses,meshtraces,meshtrafficpermissions"
            - name: KUMA_RUNTIME_KUBERNETES_ADMISSION_SERVER_CERT_DIR
              value: "/var/run/secrets/kuma.io/tls-cert"
            - name: KUMA_RUNTIME_KUBERNETES_ADMISSION_SERVER_PORT
              value: "5443"
            - name: KUMA_RUNTIME_KUBERNETES_ALLOWED_USERS
              value: "system:serviceaccount:default:kuma-control-plane"
            - name: KUMA_RUNTIME_KUBERNETES_CONTROL_PLANE_SERVICE_NAME
              value: "kuma-control-plane"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_CA_CERT_FILE
              value: "/var/run/secrets/kuma.io/tls-cert/ca.crt"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_CNI_ENABLED
              value: "true"
            - name: KUMA_RUNTIME_KUBERNETES_INJECTOR_SIDECAR_CONTAINER_IMAGE
              value: "docker.io/kumahq/kuma-dp:0.0.0-preview.vlocal-build"
            - name: KUMA_RUNTIME_KUBERNETES_NODE_TAINT_CONTROLLER_CNI_APP
              value: "kuma-cni"
            - name: KUMA_RUNTIME_KUBERNETES_NODE_TAINT_CONTROLLER_CNI_NAMESPACE
              value: "kube-system"
            - name: KUMA_RUNTIME_KUBERNETES_NODE_TAINT_CONTROLLER_ENABLED
              value: "true"
            - name: KUMA_STORE_KUBERNETES_SYSTEM_NAMESPACE
              value: "default"
            - name: KUMA_STORE_TYPE
              value: "kubernetes"
            - name: KUMA_INTER_CP_CATALOG_INSTANCE_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: control-plane
                  resource: limits.memory
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  containerName: control-plane
                  resource: limits.cpu
          args:
            - run
            - --log-level=info
            - --log-output-path=
            - --config-file=/etc/kuma.io/kuma-control-plane/config.yaml
          ports:
            - containerPort: 5680
              name: diagnostics
              protocol: TCP
            - containerPort: 5681
            - containerPort: 5682
            - containerPort: 5443
            - containerPort: 5678
          livenessProbe:
            timeoutSeconds: 10
            httpGet:
              path: /healthy
              port: 5680
          readinessProbe:
            timeoutSeconds: 10
            httpGet:
              path: /ready
              port: 5680
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 500m
              memory: 256Mi
          
          volumeMounts:
            - name: general-tls-cert
              mountPath: /var/run/secrets/kuma.io/tls-cert/tls.crt
              subPath: tls.crt
              readOnly: true
            - name: general-tls-cert
              mountPath: /var/run/secrets/kuma.io/tls-cert/tls.key
              subPath: tls.key
              readOnly: true
            - name: general-tls-cert
              mountPath: /var/run/secrets/kuma.io/tls-cert/ca.crt
              subPath: ca.crt
              readOnly: true
            - name: kuma-control-plane-config
              mountPath: /etc/kuma.io/kuma-control-plane
              readOnly: true
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: general-tls-cert
          secret:
            secretName: kuma-tls-cert
        - name: kuma-control-plane-config
          configMap:
            name: kuma-control-plane-config
        - name: tmp
          emptyDir: {}
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: kuma-admission-mutating-webhook-configuration
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: mesh.defaulter.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUtJY1JGZlR4cVJIREFjTXVGTGdaV1F3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlOVEF5TVRNeE9UUXlOVEZhRncwek5UQXlNVEV4T1RReQpOVEZhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEcXhqM05YQ0pUQjhNSWhUVU1PV2VBRnFnVnh6V0hYc3V1ekRpYkd0aStSUmxlOVVENDgyYzYKRXd6d2lPejBqYm9UdTRlRHBPTjF0YlMxSnlGR0xBcXdxc0hZaEIyc3dreUZPMFVBanFWSTJ5VVRnZFA2c1RDRgpPL0piVnc4RWtZTHcwWFljUVVCNVRoeWJ3bTFWU21wVmdCcEw5SWFBMjBPSnlibVVnVWNVeE5LKzZOb3RlT1NzCk43bFBHcm4xVEZqWDc4UGlGV1lYeUdXUGozRDg4VU1tamdveEIyMGxwanZMaFJLaUlMZ3BaeE5iQVRvMzFhWHMKYlZGaHFsNXFsU3NzYUhHalZxZUhDS055aHdzZ3NsWkJ0TXdrSi9mV1FjTjQ0cDlwc01Ca3JhTFNBU1BIcW1kaApJclFMOThLQmdIMUYyZTA4c21mWjJONTIwaGxTc21xakFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVVZIT3czNDNpNXEwbndNUHhQTXVMRWUzWlVlb3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUVhU2ppcWRLcWVHalE0ZUFENDhTM1R5QTZnYnU3SStTaUtmeUMzRm5EZkIyVGcyT3RUdktwWCtKaHhzCnVGMzJ0RWVmUWQ1Sit3WW42Vk55UDVwSnpsWVVmcWUxSm0vODBHSXMxUkhhbDBNUER4VjVzVVIxbE1CMFREWWUKeS9LUHBheGoyMkU5NU1Wa3E4UWIzR1NPZnU5VlY0Qm5LeGFNUE9Pa2xPVVNmRTM0eFQ3NExsY1lHMGVSbGU2dwp3dkRFVGtzT3NGbGF3SmtQQUI3TXNzajVkUXZTN25wK2NTakFWbWZqWHFJM0FmdlYxVzdCN3NuUDQ0MGE4Q2N0CnRwamIzSUY1bURhL2pIdHVXcFp2QWFCa09McUo2VmhWcHFSZmxwV3ZIMDY5S2NndGRwTWdCS3BuODJ3dncxY0kKaXRTaldsSVhVMFh3NzFHVlI3WE9UbHRtTjljPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /default-kuma-io-v1alpha1-mesh
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - meshes
          - dataplanes
          - dataplaneinsights
          - meshgateways
          - zoneingresses
          - zoneingressinsights
          - zoneegresses
          - zoneegressinsights
          - serviceinsights
          - zone
          - zoneinsights
          - meshaccesslogs
          - meshcircuitbreakers
          - meshfaultinjections
          - meshhealthchecks
          - meshhttproutes
          - meshloadbalancingstrategies
          - meshmetrics
          - meshpassthroughs
          - meshproxypatches
          - meshratelimits
          - meshretries
          - meshtcproutes
          - meshtimeouts
          - meshtlses
          - meshtraces
          - meshtrafficpermissions
          - hostnamegenerators
          - meshexternalservices
          - meshmultizoneservices
          - meshservices
    sideEffects: None
  - name: owner-reference.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUtJY1JGZlR4cVJIREFjTXVGTGdaV1F3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlOVEF5TVRNeE9UUXlOVEZhRncwek5UQXlNVEV4T1RReQpOVEZhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEcXhqM05YQ0pUQjhNSWhUVU1PV2VBRnFnVnh6V0hYc3V1ekRpYkd0aStSUmxlOVVENDgyYzYKRXd6d2lPejBqYm9UdTRlRHBPTjF0YlMxSnlGR0xBcXdxc0hZaEIyc3dreUZPMFVBanFWSTJ5VVRnZFA2c1RDRgpPL0piVnc4RWtZTHcwWFljUVVCNVRoeWJ3bTFWU21wVmdCcEw5SWFBMjBPSnlibVVnVWNVeE5LKzZOb3RlT1NzCk43bFBHcm4xVEZqWDc4UGlGV1lYeUdXUGozRDg4VU1tamdveEIyMGxwanZMaFJLaUlMZ3BaeE5iQVRvMzFhWHMKYlZGaHFsNXFsU3NzYUhHalZxZUhDS055aHdzZ3NsWkJ0TXdrSi9mV1FjTjQ0cDlwc01Ca3JhTFNBU1BIcW1kaApJclFMOThLQmdIMUYyZTA4c21mWjJONTIwaGxTc21xakFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVVZIT3czNDNpNXEwbndNUHhQTXVMRWUzWlVlb3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUVhU2ppcWRLcWVHalE0ZUFENDhTM1R5QTZnYnU3SStTaUtmeUMzRm5EZkIyVGcyT3RUdktwWCtKaHhzCnVGMzJ0RWVmUWQ1Sit3WW42Vk55UDVwSnpsWVVmcWUxSm0vODBHSXMxUkhhbDBNUER4VjVzVVIxbE1CMFREWWUKeS9LUHBheGoyMkU5NU1Wa3E4UWIzR1NPZnU5VlY0Qm5LeGFNUE9Pa2xPVVNmRTM0eFQ3NExsY1lHMGVSbGU2dwp3dkRFVGtzT3NGbGF3SmtQQUI3TXNzajVkUXZTN25wK2NTakFWbWZqWHFJM0FmdlYxVzdCN3NuUDQ0MGE4Q2N0CnRwamIzSUY1bURhL2pIdHVXcFp2QWFCa09McUo2VmhWcHFSZmxwV3ZIMDY5S2NndGRwTWdCS3BuODJ3dncxY0kKaXRTaldsSVhVMFh3NzFHVlI3WE9UbHRtTjljPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /owner-reference-kuma-io-v1alpha1
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
        resources:
          - circuitbreakers
          - externalservices
          - faultinjections
          - healthchecks
          - meshgateways
          - meshgatewayroutes
          - proxytemplates
          - ratelimits
          - retries
          - timeouts
          - trafficlogs
          - trafficpermissions
          - trafficroutes
          - traffictraces
          - virtualoutbounds
          - meshaccesslogs
          - meshcircuitbreakers
          - meshfaultinjections
          - meshhealthchecks
          - meshhttproutes
          - meshloadbalancingstrategies
          - meshmetrics
          - meshpassthroughs
          - meshproxypatches
          - meshratelimits
          - meshretries
          - meshtcproutes
          - meshtimeouts
          - meshtlses
          - meshtraces
          - meshtrafficpermissions
          - hostnamegenerators
          - meshexternalservices
          - meshmultizoneservices
          - meshservices
  
      
    sideEffects: None
  - name: namespace-kuma-injector.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
        - key: kuma.io/sidecar-injection
          operator: In
          values: ["enabled", "true"]
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUtJY1JGZlR4cVJIREFjTXVGTGdaV1F3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlOVEF5TVRNeE9UUXlOVEZhRncwek5UQXlNVEV4T1RReQpOVEZhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEcXhqM05YQ0pUQjhNSWhUVU1PV2VBRnFnVnh6V0hYc3V1ekRpYkd0aStSUmxlOVVENDgyYzYKRXd6d2lPejBqYm9UdTRlRHBPTjF0YlMxSnlGR0xBcXdxc0hZaEIyc3dreUZPMFVBanFWSTJ5VVRnZFA2c1RDRgpPL0piVnc4RWtZTHcwWFljUVVCNVRoeWJ3bTFWU21wVmdCcEw5SWFBMjBPSnlibVVnVWNVeE5LKzZOb3RlT1NzCk43bFBHcm4xVEZqWDc4UGlGV1lYeUdXUGozRDg4VU1tamdveEIyMGxwanZMaFJLaUlMZ3BaeE5iQVRvMzFhWHMKYlZGaHFsNXFsU3NzYUhHalZxZUhDS055aHdzZ3NsWkJ0TXdrSi9mV1FjTjQ0cDlwc01Ca3JhTFNBU1BIcW1kaApJclFMOThLQmdIMUYyZTA4c21mWjJONTIwaGxTc21xakFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVVZIT3czNDNpNXEwbndNUHhQTXVMRWUzWlVlb3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUVhU2ppcWRLcWVHalE0ZUFENDhTM1R5QTZnYnU3SStTaUtmeUMzRm5EZkIyVGcyT3RUdktwWCtKaHhzCnVGMzJ0RWVmUWQ1Sit3WW42Vk55UDVwSnpsWVVmcWUxSm0vODBHSXMxUkhhbDBNUER4VjVzVVIxbE1CMFREWWUKeS9LUHBheGoyMkU5NU1Wa3E4UWIzR1NPZnU5VlY0Qm5LeGFNUE9Pa2xPVVNmRTM0eFQ3NExsY1lHMGVSbGU2dwp3dkRFVGtzT3NGbGF3SmtQQUI3TXNzajVkUXZTN25wK2NTakFWbWZqWHFJM0FmdlYxVzdCN3NuUDQ0MGE4Q2N0CnRwamIzSUY1bURhL2pIdHVXcFp2QWFCa09McUo2VmhWcHFSZmxwV3ZIMDY5S2NndGRwTWdCS3BuODJ3dncxY0kKaXRTaldsSVhVMFh3NzFHVlI3WE9UbHRtTjljPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /inject-sidecar
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
        resources:
          - pods
    sideEffects: None
  - name: pods-kuma-injector.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
    objectSelector:
      matchLabels:
        kuma.io/sidecar-injection: enabled
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUtJY1JGZlR4cVJIREFjTXVGTGdaV1F3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlOVEF5TVRNeE9UUXlOVEZhRncwek5UQXlNVEV4T1RReQpOVEZhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEcXhqM05YQ0pUQjhNSWhUVU1PV2VBRnFnVnh6V0hYc3V1ekRpYkd0aStSUmxlOVVENDgyYzYKRXd6d2lPejBqYm9UdTRlRHBPTjF0YlMxSnlGR0xBcXdxc0hZaEIyc3dreUZPMFVBanFWSTJ5VVRnZFA2c1RDRgpPL0piVnc4RWtZTHcwWFljUVVCNVRoeWJ3bTFWU21wVmdCcEw5SWFBMjBPSnlibVVnVWNVeE5LKzZOb3RlT1NzCk43bFBHcm4xVEZqWDc4UGlGV1lYeUdXUGozRDg4VU1tamdveEIyMGxwanZMaFJLaUlMZ3BaeE5iQVRvMzFhWHMKYlZGaHFsNXFsU3NzYUhHalZxZUhDS055aHdzZ3NsWkJ0TXdrSi9mV1FjTjQ0cDlwc01Ca3JhTFNBU1BIcW1kaApJclFMOThLQmdIMUYyZTA4c21mWjJONTIwaGxTc21xakFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVVZIT3czNDNpNXEwbndNUHhQTXVMRWUzWlVlb3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUVhU2ppcWRLcWVHalE0ZUFENDhTM1R5QTZnYnU3SStTaUtmeUMzRm5EZkIyVGcyT3RUdktwWCtKaHhzCnVGMzJ0RWVmUWQ1Sit3WW42Vk55UDVwSnpsWVVmcWUxSm0vODBHSXMxUkhhbDBNUER4VjVzVVIxbE1CMFREWWUKeS9LUHBheGoyMkU5NU1Wa3E4UWIzR1NPZnU5VlY0Qm5LeGFNUE9Pa2xPVVNmRTM0eFQ3NExsY1lHMGVSbGU2dwp3dkRFVGtzT3NGbGF3SmtQQUI3TXNzajVkUXZTN25wK2NTakFWbWZqWHFJM0FmdlYxVzdCN3NuUDQ0MGE4Q2N0CnRwamIzSUY1bURhL2pIdHVXcFp2QWFCa09McUo2VmhWcHFSZmxwV3ZIMDY5S2NndGRwTWdCS3BuODJ3dncxY0kKaXRTaldsSVhVMFh3NzFHVlI3WE9UbHRtTjljPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /inject-sidecar
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
        resources:
          - pods
    sideEffects: None
---
# Source: kuma/templates/cp-webhooks-and-secrets.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: kuma-validating-webhook-configuration
  namespace: default
  labels: 
    app: kuma-control-plane
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    failurePolicy: Fail
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: NotIn
          values: ["kube-system"]
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUtJY1JGZlR4cVJIREFjTXVGTGdaV1F3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlOVEF5TVRNeE9UUXlOVEZhRncwek5UQXlNVEV4T1RReQpOVEZhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEcXhqM05YQ0pUQjhNSWhUVU1PV2VBRnFnVnh6V0hYc3V1ekRpYkd0aStSUmxlOVVENDgyYzYKRXd6d2lPejBqYm9UdTRlRHBPTjF0YlMxSnlGR0xBcXdxc0hZaEIyc3dreUZPMFVBanFWSTJ5VVRnZFA2c1RDRgpPL0piVnc4RWtZTHcwWFljUVVCNVRoeWJ3bTFWU21wVmdCcEw5SWFBMjBPSnlibVVnVWNVeE5LKzZOb3RlT1NzCk43bFBHcm4xVEZqWDc4UGlGV1lYeUdXUGozRDg4VU1tamdveEIyMGxwanZMaFJLaUlMZ3BaeE5iQVRvMzFhWHMKYlZGaHFsNXFsU3NzYUhHalZxZUhDS055aHdzZ3NsWkJ0TXdrSi9mV1FjTjQ0cDlwc01Ca3JhTFNBU1BIcW1kaApJclFMOThLQmdIMUYyZTA4c21mWjJONTIwaGxTc21xakFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVVZIT3czNDNpNXEwbndNUHhQTXVMRWUzWlVlb3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUVhU2ppcWRLcWVHalE0ZUFENDhTM1R5QTZnYnU3SStTaUtmeUMzRm5EZkIyVGcyT3RUdktwWCtKaHhzCnVGMzJ0RWVmUWQ1Sit3WW42Vk55UDVwSnpsWVVmcWUxSm0vODBHSXMxUkhhbDBNUER4VjVzVVIxbE1CMFREWWUKeS9LUHBheGoyMkU5NU1Wa3E4UWIzR1NPZnU5VlY0Qm5LeGFNUE9Pa2xPVVNmRTM0eFQ3NExsY1lHMGVSbGU2dwp3dkRFVGtzT3NGbGF3SmtQQUI3TXNzajVkUXZTN25wK2NTakFWbWZqWHFJM0FmdlYxVzdCN3NuUDQ0MGE4Q2N0CnRwamIzSUY1bURhL2pIdHVXcFp2QWFCa09McUo2VmhWcHFSZmxwV3ZIMDY5S2NndGRwTWdCS3BuODJ3dncxY0kKaXRTaldsSVhVMFh3NzFHVlI3WE9UbHRtTjljPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /validate-kuma-io-v1alpha1
    rules:
      - apiGroups:
          - kuma.io
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - circuitbreakers
          - dataplanes
          - externalservices
          - faultinjections
          - meshgatewayinstances
          - healthchecks
          - meshes
          - meshgateways
          - meshgatewayroutes
          - proxytemplates
          - ratelimits
          - retries
          - trafficlogs
          - trafficpermissions
          - trafficroutes
          - traffictraces
          - virtualoutbounds
          - zones
          - containerpatches
          - meshaccesslogs
          - meshcircuitbreakers
          - meshfaultinjections
          - meshhealthchecks
          - meshhttproutes
          - meshloadbalancingstrategies
          - meshmetrics
          - meshpassthroughs
          - meshproxypatches
          - meshratelimits
          - meshretries
          - meshtcproutes
          - meshtimeouts
          - meshtlses
          - meshtraces
          - meshtrafficpermissions
          - hostnamegenerators
          - meshexternalservices
          - meshmultizoneservices
          - meshservices
    
      
    sideEffects: None
  - name: secret.validator.kuma-admission.kuma.io
    admissionReviewVersions: ["v1"]
    namespaceSelector:
      matchLabels:
        kuma.io/system-namespace: "true"
    failurePolicy: Ignore
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQUtJY1JGZlR4cVJIREFjTXVGTGdaV1F3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGEzVnRZUzFqWVRBZUZ3MHlOVEF5TVRNeE9UUXlOVEZhRncwek5UQXlNVEV4T1RReQpOVEZhTUJJeEVEQU9CZ05WQkFNVEIydDFiV0V0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEcXhqM05YQ0pUQjhNSWhUVU1PV2VBRnFnVnh6V0hYc3V1ekRpYkd0aStSUmxlOVVENDgyYzYKRXd6d2lPejBqYm9UdTRlRHBPTjF0YlMxSnlGR0xBcXdxc0hZaEIyc3dreUZPMFVBanFWSTJ5VVRnZFA2c1RDRgpPL0piVnc4RWtZTHcwWFljUVVCNVRoeWJ3bTFWU21wVmdCcEw5SWFBMjBPSnlibVVnVWNVeE5LKzZOb3RlT1NzCk43bFBHcm4xVEZqWDc4UGlGV1lYeUdXUGozRDg4VU1tamdveEIyMGxwanZMaFJLaUlMZ3BaeE5iQVRvMzFhWHMKYlZGaHFsNXFsU3NzYUhHalZxZUhDS055aHdzZ3NsWkJ0TXdrSi9mV1FjTjQ0cDlwc01Ca3JhTFNBU1BIcW1kaApJclFMOThLQmdIMUYyZTA4c21mWjJONTIwaGxTc21xakFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDCnBEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVVZIT3czNDNpNXEwbndNUHhQTXVMRWUzWlVlb3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUVhU2ppcWRLcWVHalE0ZUFENDhTM1R5QTZnYnU3SStTaUtmeUMzRm5EZkIyVGcyT3RUdktwWCtKaHhzCnVGMzJ0RWVmUWQ1Sit3WW42Vk55UDVwSnpsWVVmcWUxSm0vODBHSXMxUkhhbDBNUER4VjVzVVIxbE1CMFREWWUKeS9LUHBheGoyMkU5NU1Wa3E4UWIzR1NPZnU5VlY0Qm5LeGFNUE9Pa2xPVVNmRTM0eFQ3NExsY1lHMGVSbGU2dwp3dkRFVGtzT3NGbGF3SmtQQUI3TXNzajVkUXZTN25wK2NTakFWbWZqWHFJM0FmdlYxVzdCN3NuUDQ0MGE4Q2N0CnRwamIzSUY1bURhL2pIdHVXcFp2QWFCa09McUo2VmhWcHFSZmxwV3ZIMDY5S2NndGRwTWdCS3BuODJ3dncxY0kKaXRTaldsSVhVMFh3NzFHVlI3WE9UbHRtTjljPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      service:
        namespace: default
        name: kuma-control-plane
        path: /validate-v1-secret
    rules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
          - DELETE
        resources:
          - secrets
    sideEffects: None
---
# Source: kuma/templates/pre-delete-webhooks.yaml
# HELM first deletes RBAC of Kuma, then it tries to delete Secrets. We've got validating webhook on Secrets.
# But even that the policy of this webhook is Ignore, it fails because Kuma does not have permission to access Secrets anymore.
# Therefore we first need to delete webhook so we can delete the rest of the deployment
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-pre-delete-job
  namespace: default
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-patch-ns-job
  namespace: default
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-upgrade-install-crds-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kuma-install-crds
  namespace: default
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
---
# Source: kuma/templates/pre-upgrade-install-crds-job.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuma-install-crds-scripts
  namespace: default
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
data:
  install_crds.sh: |
    #!/usr/bin/env sh
    set -e

    if [ -s /kuma/crds/crds.yaml ]; then
      echo "/kuma/crds/crds.yaml found and is not empty, adding crds"
      kubectl apply -f /kuma/crds/crds.yaml
    else
      echo "/kuma/crds/crds.yaml not found or empty, it looks like there is no crds to install"
    fi
  save_crds.sh: |
    set -e

    crds="$(kumactl install crds --no-config)"

    if [ -n "${crds}" ]; then
      echo "found crds - saving to /kuma/crds/crds.yaml"
      echo "${crds}" > /kuma/crds/crds.yaml
    fi
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-pre-delete-job
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    resourceNames:
      - kuma-validating-webhook-configuration
    verbs:
      - delete
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-patch-ns-job
  namespace: default
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    resourceNames:
      - default
    verbs:
      - get
      - patch
---
# Source: kuma/templates/pre-upgrade-install-crds-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kuma-install-crds
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - "apiextensions.k8s.io"
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - patch
      - update
      - list
      - get
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-pre-delete-job
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-pre-delete-job
subjects:
  - kind: ServiceAccount
    name: kuma-pre-delete-job
    namespace: default
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-patch-ns-job
  namespace: default
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-patch-ns-job
subjects:
  - kind: ServiceAccount
    name: kuma-patch-ns-job
    namespace: default
---
# Source: kuma/templates/pre-upgrade-install-crds-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kuma-install-crds
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
  labels:
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kuma-install-crds
subjects:
  - kind: ServiceAccount
    name: kuma-install-crds
    namespace: default
---
# Source: kuma/templates/pre-delete-webhooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-delete-webhook
  namespace: default
  labels:
  
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-delete"
    
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
spec:
  template:
    metadata:
      name: kuma-delete-webhook
      labels:
    
        helm.sh/chart: kuma-0.0.0-preview.vlocal-build
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-pre-delete-job
      nodeSelector:
      
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
      containers:
        - name: pre-delete-job
          image: "docker.io/bitnami/kubectl:1.32.0"
          command:
            - 'kubectl'
            - 'delete'
            - 'ValidatingWebhookConfiguration'
            - '--ignore-not-found'
            - kuma-validating-webhook-configuration
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 65534
          resources:
             requests:
               cpu: "100m"
               memory: "256Mi"
             limits:
               cpu: "100m"
               memory: "256Mi"
---
# Source: kuma/templates/pre-install-patch-namespace-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-patch-ns
  namespace: default
  labels:
  
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-install"
    
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
spec:
  template:
    metadata:
      name: kuma-patch-ns-script
      labels:
    
        helm.sh/chart: kuma-0.0.0-preview.vlocal-build
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-patch-ns-job
      nodeSelector:
      
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
      containers:
        - name: pre-install-job
          image: "docker.io/bitnami/kubectl:1.32.0"
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 65534
          resources:
             requests:
               cpu: "100m"
               memory: "256Mi"
             limits:
               cpu: "100m"
               memory: "256Mi"
          command:
            - 'kubectl'
            - 'patch'
            - 'namespace'
            - "default"
            - '--type'
            - 'merge'
            - '--patch'
            - '{ "metadata": { "labels": { "kuma.io/system-namespace": "true" } } }'
---
# Source: kuma/templates/pre-upgrade-install-crds-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: kuma-install-crds
  namespace: default
  labels:
  
    helm.sh/chart: kuma-0.0.0-preview.vlocal-build
    app.kubernetes.io/name: kuma
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "pre-upgrade,pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  template:
    metadata:
      name: kuma-install-crds-job
      labels:
    
        helm.sh/chart: kuma-0.0.0-preview.vlocal-build
        app.kubernetes.io/name: kuma
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "0.0.0-preview.vlocal-build"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: kuma-install-crds
      nodeSelector:
      
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
      containers:
        - name: pre-upgrade-job
          image: "docker.io/bitnami/kubectl:1.32.0"
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 65534
          resources:
             requests:
               cpu: "100m"
               memory: "256Mi"
             limits:
               cpu: "100m"
               memory: "256Mi"
          command: ["/kuma/scripts/install_crds.sh"]
          volumeMounts:
            - mountPath: /kuma/crds
              name: crds
              readOnly: true
            - mountPath: /kuma/scripts
              name: scripts
              readOnly: true
      initContainers:
        - name: pre-upgrade-job-init
          image: "docker.io/kumahq/kumactl:0.0.0-preview.vlocal-build"
          securityContext:
            readOnlyRootFilesystem: true
          resources:
             requests:
               cpu: "100m"
               memory: "256Mi"
             limits:
               cpu: "100m"
               memory: "256Mi"
          volumeMounts:
          - mountPath: /kuma/crds
            name: crds
          - mountPath: /kuma/scripts
            name: scripts
            readOnly: true
          command: ["sh", "-c"]
          args: ["/kuma/scripts/save_crds.sh"]
      volumes:
        - name: scripts
          configMap:
            name: kuma-install-crds-scripts
            defaultMode: 0755
        - name: crds
          emptyDir: {}
