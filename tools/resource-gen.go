package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"html/template"
	"os"
	"path"
	"sort"
	"strings"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/reflect/protoregistry"

	"github.com/kumahq/kuma/api/mesh"
	_ "github.com/kumahq/kuma/api/mesh/v1alpha1"
)

var ValidatorTemplate = template.Must(template.New("resource-validator").Parse(`
package {{.Package}}

func (t *{{.ResourceName}}) Validate() error {
	panic("Implement me!")
}
`))

var ValidatorTestTemplate = template.Must(template.New("resource-validator-test").Parse(`
package {{.Package}}_test

import (
	"github.com/ghodss/yaml"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/ginkgo/extensions/table"
	. "github.com/onsi/gomega"

	. "github.com/kumahq/kuma/pkg/core/resources/apis/{{.Package}}"
	util_proto "github.com/kumahq/kuma/pkg/util/proto"
)

var _ = Describe("{{.ResourceName}}", func() {
	Describe("Validate()", func() {
		type testCase struct {
			input    string
			expected string
		}

		DescribeTable("should validate all fields and return as much individual errors as possible",
			func(given testCase) {
				// setup
				input := New{{.ResourceName}}()

				// when
				err := util_proto.FromYAML([]byte(given.input), input.Spec)
				// then
				Expect(err).ToNot(HaveOccurred())

				// when
				verr := input.Validate()
				// and
				actual, err := yaml.Marshal(verr)

				// then
				Expect(err).ToNot(HaveOccurred())
				// and
				Expect(actual).To(MatchYAML(given.expected))
			},
			Entry("empty spec", testCase{
				input: "FIXME",
				expected: "",
			}),
		)
		DescribeTable("should validate all fields and return no errors if all are valid",
			func(given string) {
				// setup
				retry := NewRetryResource()

				// when
				err := util_proto.FromYAML([]byte(given), retry.Spec)
				// then
				Expect(err).ToNot(HaveOccurred())

				// when
				verr := retry.Validate()

				// then
				Expect(verr).To(BeNil())
			},
			Entry("simple example", "FIXME"),
		)
	})
})
`))

// ResourceTemplate for creating a Kuma resource.
var ResourceTemplate = template.Must(template.New("resource").Parse(`
// Generated by tools/resource-gen.
// Run "make generate" to update this file.

// nolint:whitespace
package {{.Package}}

import (
	"fmt"

	mesh_proto "github.com/kumahq/kuma/api/{{.Package}}/v1alpha1"
	"github.com/kumahq/kuma/pkg/core/resources/model"
	"github.com/kumahq/kuma/pkg/core/resources/registry"
)

{{range .Resources}}
const (
	{{.ResourceType}}Type model.ResourceType = "{{.ResourceType}}"
)

var _ model.Resource = &{{.ResourceName}}{}

type {{.ResourceName}} struct {
	Meta model.ResourceMeta
	Spec *mesh_proto.{{.ProtoType}}
}

func New{{.ResourceName}}() *{{.ResourceName}} {
	return &{{.ResourceName}}{
		Spec: &mesh_proto.{{.ProtoType}}{},
	}
}

func (t *{{.ResourceName}}) GetType() model.ResourceType {
	return {{.ResourceType}}Type
}

func (t *{{.ResourceName}}) GetMeta() model.ResourceMeta {
	return t.Meta
}

func (t *{{.ResourceName}}) SetMeta(m model.ResourceMeta) {
	t.Meta = m
}

func (t *{{.ResourceName}}) GetSpec() model.ResourceSpec {
	return t.Spec
}

{{if .SkipValidation}}
func (t *{{.ResourceName}}) Validate() error {
	return nil
}
{{end}}

{{with $in := .}}
{{range .Selectors}}
func (t *{{$in.ResourceName}}) {{.}}() []*mesh_proto.Selector {
	return t.Spec.Get{{.}}()
}
{{end}}
{{end}}

func (t *{{.ResourceName}}) SetSpec(spec model.ResourceSpec) error {
	protoType, ok := spec.(*mesh_proto.{{.ProtoType}})
	if !ok {
		return fmt.Errorf("invalid type %T for Spec", spec)
	} else {
		t.Spec = protoType
		return nil
	}
}

func (t *{{.ResourceName}}) Scope() model.ResourceScope {
{{if .Global}}
	return model.ScopeGlobal
{{else}}
	return model.ScopeMesh
{{end}}
}

var _ model.ResourceList = &{{.ResourceName}}List{}

type {{.ResourceName}}List struct {
	Items      []*{{.ResourceName}}
	Pagination model.Pagination
}

func (l *{{.ResourceName}}List) GetItems() []model.Resource {
	res := make([]model.Resource, len(l.Items))
	for i, elem := range l.Items {
		res[i] = elem
	}
	return res
}

func (l *{{.ResourceName}}List) GetItemType() model.ResourceType {
	return {{.ResourceType}}Type
}

func (l *{{.ResourceName}}List) NewItem() model.Resource {
	return New{{.ResourceName}}()
}

func (l *{{.ResourceName}}List) AddItem(r model.Resource) error {
	if trr, ok := r.(*{{.ResourceName}}); ok {
		l.Items = append(l.Items, trr)
		return nil
	} else {
		return model.ErrorInvalidItemType((*{{.ResourceName}})(nil), r)
	}
}

func (l *{{.ResourceName}}List) GetPagination() *model.Pagination {
	return &l.Pagination
}

{{if not .SkipRegistration}}
func init() {
	registry.RegisterType(New{{.ResourceName}}())
	registry.RegistryListType(&{{.ResourceName}}List{})
}
{{end}}
{{end}}
`))

// KumaResourceForMessage fishes the Kuma resource option out of a message.
func KumaResourceForMessage(m protoreflect.MessageType) *mesh.KumaResourceOptions {
	ext := proto.GetExtension(m.Descriptor().Options(), mesh.E_Resource)
	if r, ok := ext.(*mesh.KumaResourceOptions); ok {
		return r
	}

	return nil
}

// SelectorsForMessage finds all the top-level fields in the message are
// repeated selectors. We want to generate convenience accessors for these.
func SelectorsForMessage(m protoreflect.MessageDescriptor) []string {
	var selectors []string
	fields := m.Fields()

	for i := 0; i < fields.Len(); i++ {
		field := fields.Get(i)
		m := field.Message()
		if m != nil && m.FullName() == "kuma.mesh.v1alpha1.Selector" {
			fieldName := string(field.Name())
			selectors = append(selectors, strings.Title(fieldName))
		}
	}

	return selectors
}

type ResourceInfo struct {
	ResourceName       string
	ResourceEntityName string
	ResourceType       string
	ProtoType          string
	Selectors          []string
	SkipRegistration   bool
	SkipValidation     bool
	Global             bool
}

func ToResourceInfo(m protoreflect.MessageType) ResourceInfo {
	r := KumaResourceForMessage(m)

	out := ResourceInfo{
		ResourceType:       r.Type,
		ResourceName:       r.Name,
		ResourceEntityName: r.ResourceName,
		ProtoType:          string(m.Descriptor().Name()),
		Selectors:          SelectorsForMessage(m.Descriptor().(protoreflect.MessageDescriptor)),
		SkipRegistration:   r.SkipRegistration,
		SkipValidation:     r.SkipValidation,
		Global:             r.Global,
	}

	if p := m.Descriptor().Parent(); p != nil {
		if _, ok := p.(protoreflect.MessageDescriptor); ok {
			out.ProtoType = fmt.Sprintf("%s_%s", p.Name(), m.Descriptor().Name())
		}
	}
	return out
}

// ProtoMessageFunc ...
type ProtoMessageFunc func(protoreflect.MessageType) bool

// OnKumaResourceMessage ...
func OnKumaResourceMessage(pkg string, f ProtoMessageFunc) ProtoMessageFunc {
	return func(m protoreflect.MessageType) bool {
		r := KumaResourceForMessage(m)
		if r == nil {
			return true
		}

		if r.Package == pkg {
			return f(m)
		}

		return true
	}
}

func MaybeGenerateResourceFile(pkg string, r ResourceInfo, tmpl *template.Template, fileName string) {
	if _, err := os.Stat(fileName); !os.IsNotExist(err) {
		return
	}
	values := struct {
		Package      string
		ResourceName string
	}{
		Package:      pkg,
		ResourceName: r.ResourceEntityName,
	}
	outBuf := bytes.Buffer{}

	if err := tmpl.Execute(&outBuf, values); err != nil {
		panic(fmt.Sprintf("template error: %s", err))
	}
	out, err := format.Source(outBuf.Bytes())
	if err != nil {
		panic(fmt.Sprintf("%s\n", err))
	}
	if err := os.WriteFile(fileName, out, os.FileMode(0644)); err != nil {
		panic(fmt.Sprintf("%s\n", err))
	}
}

func main() {
	var pkg string
	flag.StringVar(&pkg, "package", "", "code path to generate")
	flag.Parse()

	var types []protoreflect.MessageType

	protoregistry.GlobalTypes.RangeMessages(
		OnKumaResourceMessage(pkg, func(m protoreflect.MessageType) bool {
			types = append(types, m)
			return true
		}))

	// Sort by name so the output is deterministic.
	sort.Slice(types, func(i, j int) bool {
		return types[i].Descriptor().FullName() < types[j].Descriptor().FullName()
	})

	var resources []ResourceInfo
	apisPath := fmt.Sprintf("pkg/core/resources/apis/%s", pkg)
	for _, t := range types {
		resourceInfo := ToResourceInfo(t)
		resources = append(resources, resourceInfo)
		if resourceInfo.ResourceEntityName == "" {
			continue
		}
		baseName := strings.ReplaceAll(resourceInfo.ResourceEntityName, "-", "_")
		if !resourceInfo.SkipValidation {
			MaybeGenerateResourceFile(pkg, resourceInfo, ValidatorTemplate, path.Join(apisPath, fmt.Sprintf("%s_validator.go", baseName)))
			MaybeGenerateResourceFile(pkg, resourceInfo, ValidatorTestTemplate, path.Join(apisPath, fmt.Sprintf("%s_validator_test.go", baseName)))
		}
	}
	globalTemplates := map[string]*template.Template{
		path.Join(apisPath, "resources.go"): ResourceTemplate,
	}
	for filename, tmpl := range globalTemplates {
		outBuf := bytes.Buffer{}
		if err := tmpl.Execute(&outBuf, struct {
			Package   string
			Resources []ResourceInfo
		}{
			Package:   pkg,
			Resources: resources,
		}); err != nil {
			panic(fmt.Sprintf("template error: %s", err))
		}
		out, err := format.Source(outBuf.Bytes())
		if err != nil {
			panic(fmt.Sprintf("%s\n", err))
		}
		if err := os.WriteFile(filename, out, os.FileMode(0644)); err != nil {
			panic(fmt.Sprintf("%s\n", err))
		}
	}
}
