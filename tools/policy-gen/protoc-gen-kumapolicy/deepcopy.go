package main

import (
	"fmt"
	"path/filepath"

	"google.golang.org/protobuf/compiler/protogen"
)

// list of _deepcopy.pb.go files package dependencies.
const (
	protoPackage = protogen.GoImportPath("google.golang.org/protobuf/proto")
)

// generateDeepcopy generates DeepCopyInto() and DeepCopy() functions for .pb.go types.
func generateDeepcopy(
	gen *protogen.Plugin,
	file *protogen.File,
) error {
	if len(file.Messages) == 0 {
		return nil
	}

	g := gen.NewGeneratedFile(fmt.Sprintf("api/%s/zz_generated.deepcopy.pb.go", string(file.GoPackageName)), file.GoImportPath)

	g.P("// Code generated by protoc-gen-deepcopy. DO NOT EDIT.")
	g.P()
	g.P("package ", filepath.Base(string(file.GoImportPath)))
	g.P()

	for _, message := range file.Messages {
		typeName := message.Desc.Name()

		// Generate DeepCopyInto() method for this type
		g.P(`// DeepCopyInto supports using `, typeName, ` within kubernetes types, where deepcopy-gen is used.`)
		g.P(`func (in *`, typeName, `) DeepCopyInto(out *`, typeName, `) {`)
		g.P(`	p := `+g.QualifiedGoIdent(protoPackage.Ident("Clone"))+`(in).(*`, typeName, `)`)
		g.P(`	*out = *p`)
		g.P(`}`)

		// Generate DeepCopy() method for this type
		g.P(`// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new `, typeName, `. Required by controller-gen.`)
		g.P(`func (in *`, typeName, `) DeepCopy() *`, typeName, ` {`)
		g.P(`	if in == nil { return nil }`)
		g.P(`	out := new(`, typeName, `)`)
		g.P(`	in.DeepCopyInto(out)`)
		g.P(`	return out`)
		g.P(`}`)

		// Generate DeepCopyInterface() method for this type
		g.P(`// DeepCopyInterface is an autogenerated deepcopy function, copying the receiver, creating a new `, typeName, `. Required by controller-gen.`)
		g.P(`func (in *`, typeName, `) DeepCopyInterface() interface{} {`)
		g.P(`	return in.DeepCopy()`)
		g.P(`}`)
	}

	return nil
}
