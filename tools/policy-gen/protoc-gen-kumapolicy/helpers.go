package main

import (
	"bytes"
	"fmt"
	"go/format"
	"text/template"

	"github.com/pkg/errors"
	"google.golang.org/protobuf/compiler/protogen"
)

func generateHelpers(
	p *protogen.Plugin,
	file *protogen.File,
) error {
	if len(file.Messages) != 1 {
		return errors.Errorf("only one Kuma resource per proto file is allowed")
	}

	msg := file.Messages[0]

	hasFrom := false
	hasTo := false
	for _, field := range msg.Fields {
		if field.GoName == "From" {
			hasFrom = true
		}
		if field.GoName == "To" {
			hasTo = true
		}
	}

	info := NewPolicyConfig(msg.Desc)

	outBuf := bytes.Buffer{}
	err := helperTemplate.Execute(&outBuf, map[string]interface{}{
		"name":         info.Name,
		"version":      file.GoPackageName,
		"generateTo":   hasTo,
		"generateFrom": hasFrom,
	})
	if err != nil {
		return err
	}

	out, err := format.Source(outBuf.Bytes())
	if err != nil {
		return err
	}

	g := p.NewGeneratedFile(fmt.Sprintf("api/%s/zz_generated.helpers.go", string(file.GoPackageName)), file.GoImportPath)
	if _, err := g.Write(out); err != nil {
		return err
	}
	return nil
}

var helperTemplate = template.Must(template.New("missingkey=error").Parse(
	`
// Generated by tools/resource-gen.
// Run "make generate" to update this file.

// nolint:whitespace
package {{.version}}

import (
	"google.golang.org/protobuf/proto"

	core_xds "github.com/kumahq/kuma/pkg/core/xds"
)
{{ if .generateFrom }}
func (x *{{.name}}_From) GetDefaultAsProto() proto.Message {
	return x.Default
}

func (x *{{.name}}) GetFromList() []core_xds.PolicyItem {
	var result []core_xds.PolicyItem
	for _, item := range x.From {
		result = append(result, item)
	}
	return result
}
{{- end }}
{{ if .generateTo }}
func (x *{{.name}}_To) GetDefaultAsProto() proto.Message {
	return x.Default
}

func (x *{{.name}}) GetToList() []core_xds.PolicyItem {
	var result []core_xds.PolicyItem
	for _, item := range x.To {
		result = append(result, item)
	}
	return result
}
{{- end }}
`))
