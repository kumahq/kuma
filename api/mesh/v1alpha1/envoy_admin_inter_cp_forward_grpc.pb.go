// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.0
// source: api/mesh/v1alpha1/envoy_admin_inter_cp_forward.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InterCPEnvoyAdminForwardService_XDSConfig_FullMethodName = "/kuma.mesh.v1alpha1.InterCPEnvoyAdminForwardService/XDSConfig"
	InterCPEnvoyAdminForwardService_Stats_FullMethodName     = "/kuma.mesh.v1alpha1.InterCPEnvoyAdminForwardService/Stats"
	InterCPEnvoyAdminForwardService_Clusters_FullMethodName  = "/kuma.mesh.v1alpha1.InterCPEnvoyAdminForwardService/Clusters"
)

// InterCPEnvoyAdminForwardServiceClient is the client API for InterCPEnvoyAdminForwardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterCPEnvoyAdminForwardServiceClient interface {
	XDSConfig(ctx context.Context, in *XDSConfigRequest, opts ...grpc.CallOption) (*XDSConfigResponse, error)
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	Clusters(ctx context.Context, in *ClustersRequest, opts ...grpc.CallOption) (*ClustersResponse, error)
}

type interCPEnvoyAdminForwardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterCPEnvoyAdminForwardServiceClient(cc grpc.ClientConnInterface) InterCPEnvoyAdminForwardServiceClient {
	return &interCPEnvoyAdminForwardServiceClient{cc}
}

func (c *interCPEnvoyAdminForwardServiceClient) XDSConfig(ctx context.Context, in *XDSConfigRequest, opts ...grpc.CallOption) (*XDSConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(XDSConfigResponse)
	err := c.cc.Invoke(ctx, InterCPEnvoyAdminForwardService_XDSConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interCPEnvoyAdminForwardServiceClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, InterCPEnvoyAdminForwardService_Stats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interCPEnvoyAdminForwardServiceClient) Clusters(ctx context.Context, in *ClustersRequest, opts ...grpc.CallOption) (*ClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClustersResponse)
	err := c.cc.Invoke(ctx, InterCPEnvoyAdminForwardService_Clusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterCPEnvoyAdminForwardServiceServer is the server API for InterCPEnvoyAdminForwardService service.
// All implementations must embed UnimplementedInterCPEnvoyAdminForwardServiceServer
// for forward compatibility.
type InterCPEnvoyAdminForwardServiceServer interface {
	XDSConfig(context.Context, *XDSConfigRequest) (*XDSConfigResponse, error)
	Stats(context.Context, *StatsRequest) (*StatsResponse, error)
	Clusters(context.Context, *ClustersRequest) (*ClustersResponse, error)
	mustEmbedUnimplementedInterCPEnvoyAdminForwardServiceServer()
}

// UnimplementedInterCPEnvoyAdminForwardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInterCPEnvoyAdminForwardServiceServer struct{}

func (UnimplementedInterCPEnvoyAdminForwardServiceServer) XDSConfig(context.Context, *XDSConfigRequest) (*XDSConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XDSConfig not implemented")
}
func (UnimplementedInterCPEnvoyAdminForwardServiceServer) Stats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedInterCPEnvoyAdminForwardServiceServer) Clusters(context.Context, *ClustersRequest) (*ClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clusters not implemented")
}
func (UnimplementedInterCPEnvoyAdminForwardServiceServer) mustEmbedUnimplementedInterCPEnvoyAdminForwardServiceServer() {
}
func (UnimplementedInterCPEnvoyAdminForwardServiceServer) testEmbeddedByValue() {}

// UnsafeInterCPEnvoyAdminForwardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterCPEnvoyAdminForwardServiceServer will
// result in compilation errors.
type UnsafeInterCPEnvoyAdminForwardServiceServer interface {
	mustEmbedUnimplementedInterCPEnvoyAdminForwardServiceServer()
}

func RegisterInterCPEnvoyAdminForwardServiceServer(s grpc.ServiceRegistrar, srv InterCPEnvoyAdminForwardServiceServer) {
	// If the following call pancis, it indicates UnimplementedInterCPEnvoyAdminForwardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InterCPEnvoyAdminForwardService_ServiceDesc, srv)
}

func _InterCPEnvoyAdminForwardService_XDSConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XDSConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterCPEnvoyAdminForwardServiceServer).XDSConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterCPEnvoyAdminForwardService_XDSConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterCPEnvoyAdminForwardServiceServer).XDSConfig(ctx, req.(*XDSConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterCPEnvoyAdminForwardService_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterCPEnvoyAdminForwardServiceServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterCPEnvoyAdminForwardService_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterCPEnvoyAdminForwardServiceServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterCPEnvoyAdminForwardService_Clusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterCPEnvoyAdminForwardServiceServer).Clusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterCPEnvoyAdminForwardService_Clusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterCPEnvoyAdminForwardServiceServer).Clusters(ctx, req.(*ClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterCPEnvoyAdminForwardService_ServiceDesc is the grpc.ServiceDesc for InterCPEnvoyAdminForwardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterCPEnvoyAdminForwardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kuma.mesh.v1alpha1.InterCPEnvoyAdminForwardService",
	HandlerType: (*InterCPEnvoyAdminForwardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "XDSConfig",
			Handler:    _InterCPEnvoyAdminForwardService_XDSConfig_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _InterCPEnvoyAdminForwardService_Stats_Handler,
		},
		{
			MethodName: "Clusters",
			Handler:    _InterCPEnvoyAdminForwardService_Clusters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/mesh/v1alpha1/envoy_admin_inter_cp_forward.proto",
}
