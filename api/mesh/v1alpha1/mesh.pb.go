// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.20.0
// source: api/mesh/v1alpha1/mesh.proto

package v1alpha1

import (
	_ "github.com/kumahq/kuma/api/mesh"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Mesh_MeshServices_Mode int32

const (
	// MeshServices are't generated
	Mesh_MeshServices_Disabled Mesh_MeshServices_Mode = 0
	// MeshServices are generated and used for configuration
	Mesh_MeshServices_Everywhere Mesh_MeshServices_Mode = 1
	// MeshServices are generated but only used for configuration where
	// configured via reachableBackends
	Mesh_MeshServices_ReachableBackends Mesh_MeshServices_Mode = 2
	// MeshServices are generated, used for configuration and kuma.io/services
	// are not used
	Mesh_MeshServices_Exclusive Mesh_MeshServices_Mode = 3
)

// Enum value maps for Mesh_MeshServices_Mode.
var (
	Mesh_MeshServices_Mode_name = map[int32]string{
		0: "Disabled",
		1: "Everywhere",
		2: "ReachableBackends",
		3: "Exclusive",
	}
	Mesh_MeshServices_Mode_value = map[string]int32{
		"Disabled":          0,
		"Everywhere":        1,
		"ReachableBackends": 2,
		"Exclusive":         3,
	}
)

func (x Mesh_MeshServices_Mode) Enum() *Mesh_MeshServices_Mode {
	p := new(Mesh_MeshServices_Mode)
	*p = x
	return p
}

func (x Mesh_MeshServices_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mesh_MeshServices_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_mesh_v1alpha1_mesh_proto_enumTypes[0].Descriptor()
}

func (Mesh_MeshServices_Mode) Type() protoreflect.EnumType {
	return &file_api_mesh_v1alpha1_mesh_proto_enumTypes[0]
}

func (x Mesh_MeshServices_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mesh_MeshServices_Mode.Descriptor instead.
func (Mesh_MeshServices_Mode) EnumDescriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{0, 3, 0}
}

type CertificateAuthorityBackend_Mode int32

const (
	// A STRICT mode implies that the server validates the connection and
	// accepts only encrypted TLS traffic
	CertificateAuthorityBackend_STRICT CertificateAuthorityBackend_Mode = 0
	// A PERMISSIVE mode implies that the outbounds encrypt traffic the same way
	// it happens in strict mode, but inbounds accept both TLS and plaintext
	// traffic. This allows applications residing in the mesh to accept requests
	// from outside of the mesh.
	CertificateAuthorityBackend_PERMISSIVE CertificateAuthorityBackend_Mode = 1
)

// Enum value maps for CertificateAuthorityBackend_Mode.
var (
	CertificateAuthorityBackend_Mode_name = map[int32]string{
		0: "STRICT",
		1: "PERMISSIVE",
	}
	CertificateAuthorityBackend_Mode_value = map[string]int32{
		"STRICT":     0,
		"PERMISSIVE": 1,
	}
)

func (x CertificateAuthorityBackend_Mode) Enum() *CertificateAuthorityBackend_Mode {
	p := new(CertificateAuthorityBackend_Mode)
	*p = x
	return p
}

func (x CertificateAuthorityBackend_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateAuthorityBackend_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_mesh_v1alpha1_mesh_proto_enumTypes[1].Descriptor()
}

func (CertificateAuthorityBackend_Mode) Type() protoreflect.EnumType {
	return &file_api_mesh_v1alpha1_mesh_proto_enumTypes[1]
}

func (x CertificateAuthorityBackend_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateAuthorityBackend_Mode.Descriptor instead.
func (CertificateAuthorityBackend_Mode) EnumDescriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{1, 0}
}

// Mesh defines configuration of a single mesh.
type Mesh struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// mTLS settings.
	// +optional
	Mtls *Mesh_Mtls `protobuf:"bytes,1,opt,name=mtls,proto3" json:"mtls,omitempty"`
	// Tracing settings.
	// +optional
	Tracing *Tracing `protobuf:"bytes,2,opt,name=tracing,proto3" json:"tracing,omitempty"`
	// Logging settings.
	// +optional
	Logging *Logging `protobuf:"bytes,3,opt,name=logging,proto3" json:"logging,omitempty"`
	// Configuration for metrics collected and exposed by dataplanes.
	//
	// Settings defined here become defaults for every dataplane in a given Mesh.
	// Additionally, it is also possible to further customize this configuration
	// for each dataplane individually using Dataplane resource.
	// +optional
	Metrics *Metrics `protobuf:"bytes,4,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// Networking settings of the mesh
	Networking *Networking `protobuf:"bytes,5,opt,name=networking,proto3" json:"networking,omitempty"`
	// Routing settings of the mesh
	Routing *Routing `protobuf:"bytes,6,opt,name=routing,proto3" json:"routing,omitempty"`
	// Constraints that applies to the mesh and its entities
	Constraints *Mesh_Constraints `protobuf:"bytes,7,opt,name=constraints,proto3" json:"constraints,omitempty"`
	// List of policies to skip creating by default when the mesh is created.
	// e.g. TrafficPermission, MeshRetry, etc. An '*' can be used to skip all
	// policies.
	SkipCreatingInitialPolicies []string           `protobuf:"bytes,8,rep,name=skipCreatingInitialPolicies,proto3" json:"skipCreatingInitialPolicies,omitempty"`
	MeshServices                *Mesh_MeshServices `protobuf:"bytes,9,opt,name=meshServices,proto3" json:"meshServices,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Mesh) Reset() {
	*x = Mesh{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mesh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mesh) ProtoMessage() {}

func (x *Mesh) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mesh.ProtoReflect.Descriptor instead.
func (*Mesh) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{0}
}

func (x *Mesh) GetMtls() *Mesh_Mtls {
	if x != nil {
		return x.Mtls
	}
	return nil
}

func (x *Mesh) GetTracing() *Tracing {
	if x != nil {
		return x.Tracing
	}
	return nil
}

func (x *Mesh) GetLogging() *Logging {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *Mesh) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Mesh) GetNetworking() *Networking {
	if x != nil {
		return x.Networking
	}
	return nil
}

func (x *Mesh) GetRouting() *Routing {
	if x != nil {
		return x.Routing
	}
	return nil
}

func (x *Mesh) GetConstraints() *Mesh_Constraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *Mesh) GetSkipCreatingInitialPolicies() []string {
	if x != nil {
		return x.SkipCreatingInitialPolicies
	}
	return nil
}

func (x *Mesh) GetMeshServices() *Mesh_MeshServices {
	if x != nil {
		return x.MeshServices
	}
	return nil
}

// CertificateAuthorityBackend defines Certificate Authority backend
type CertificateAuthorityBackend struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the backend
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the backend. Has to be one of the loaded plugins (Kuma ships with
	// builtin and provided)
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Dataplane certificate settings
	DpCert *CertificateAuthorityBackend_DpCert `protobuf:"bytes,3,opt,name=dpCert,proto3" json:"dpCert,omitempty"`
	// Configuration of the backend
	Conf *structpb.Struct `protobuf:"bytes,4,opt,name=conf,proto3" json:"conf,omitempty"`
	// Mode defines the behaviour of inbound listeners with regard to traffic
	// encryption
	Mode          CertificateAuthorityBackend_Mode       `protobuf:"varint,5,opt,name=mode,proto3,enum=kuma.mesh.v1alpha1.CertificateAuthorityBackend_Mode" json:"mode,omitempty"`
	RootChain     *CertificateAuthorityBackend_RootChain `protobuf:"bytes,6,opt,name=rootChain,proto3" json:"rootChain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateAuthorityBackend) Reset() {
	*x = CertificateAuthorityBackend{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateAuthorityBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthorityBackend) ProtoMessage() {}

func (x *CertificateAuthorityBackend) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthorityBackend.ProtoReflect.Descriptor instead.
func (*CertificateAuthorityBackend) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{1}
}

func (x *CertificateAuthorityBackend) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CertificateAuthorityBackend) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CertificateAuthorityBackend) GetDpCert() *CertificateAuthorityBackend_DpCert {
	if x != nil {
		return x.DpCert
	}
	return nil
}

func (x *CertificateAuthorityBackend) GetConf() *structpb.Struct {
	if x != nil {
		return x.Conf
	}
	return nil
}

func (x *CertificateAuthorityBackend) GetMode() CertificateAuthorityBackend_Mode {
	if x != nil {
		return x.Mode
	}
	return CertificateAuthorityBackend_STRICT
}

func (x *CertificateAuthorityBackend) GetRootChain() *CertificateAuthorityBackend_RootChain {
	if x != nil {
		return x.RootChain
	}
	return nil
}

// Networking defines the networking configuration of the mesh
type Networking struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Outbound settings
	Outbound      *Networking_Outbound `protobuf:"bytes,1,opt,name=outbound,proto3" json:"outbound,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Networking) Reset() {
	*x = Networking{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Networking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Networking) ProtoMessage() {}

func (x *Networking) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Networking.ProtoReflect.Descriptor instead.
func (*Networking) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{2}
}

func (x *Networking) GetOutbound() *Networking_Outbound {
	if x != nil {
		return x.Outbound
	}
	return nil
}

// Tracing defines tracing configuration of the mesh.
type Tracing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the default backend
	DefaultBackend string `protobuf:"bytes,1,opt,name=defaultBackend,proto3" json:"defaultBackend,omitempty"`
	// List of available tracing backends
	Backends      []*TracingBackend `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tracing) Reset() {
	*x = Tracing{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tracing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracing) ProtoMessage() {}

func (x *Tracing) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracing.ProtoReflect.Descriptor instead.
func (*Tracing) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{3}
}

func (x *Tracing) GetDefaultBackend() string {
	if x != nil {
		return x.DefaultBackend
	}
	return ""
}

func (x *Tracing) GetBackends() []*TracingBackend {
	if x != nil {
		return x.Backends
	}
	return nil
}

// TracingBackend defines tracing backend available to mesh. Backends can be
// used in TrafficTrace rules.
type TracingBackend struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the backend, can be then used in Mesh.tracing.defaultBackend or in
	// TrafficTrace
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Percentage of traces that will be sent to the backend (range 0.0 - 100.0).
	// Empty value defaults to 100.0%
	Sampling *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=sampling,proto3" json:"sampling,omitempty"`
	// Type of the backend (Kuma ships with 'zipkin')
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Configuration of the backend
	Conf          *structpb.Struct `protobuf:"bytes,4,opt,name=conf,proto3" json:"conf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracingBackend) Reset() {
	*x = TracingBackend{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracingBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingBackend) ProtoMessage() {}

func (x *TracingBackend) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingBackend.ProtoReflect.Descriptor instead.
func (*TracingBackend) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{4}
}

func (x *TracingBackend) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TracingBackend) GetSampling() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Sampling
	}
	return nil
}

func (x *TracingBackend) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TracingBackend) GetConf() *structpb.Struct {
	if x != nil {
		return x.Conf
	}
	return nil
}

type DatadogTracingBackendConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address of datadog collector.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Port of datadog collector
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Determines if datadog service name should be split based on traffic
	// direction and destination. For example, with `splitService: true` and a
	// `backend` service that communicates with a couple of databases, you would
	// get service names like `backend_INBOUND`, `backend_OUTBOUND_db1`, and
	// `backend_OUTBOUND_db2` in Datadog. Default: false
	SplitService  bool `protobuf:"varint,3,opt,name=splitService,proto3" json:"splitService,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatadogTracingBackendConfig) Reset() {
	*x = DatadogTracingBackendConfig{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatadogTracingBackendConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatadogTracingBackendConfig) ProtoMessage() {}

func (x *DatadogTracingBackendConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatadogTracingBackendConfig.ProtoReflect.Descriptor instead.
func (*DatadogTracingBackendConfig) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{5}
}

func (x *DatadogTracingBackendConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DatadogTracingBackendConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DatadogTracingBackendConfig) GetSplitService() bool {
	if x != nil {
		return x.SplitService
	}
	return false
}

type ZipkinTracingBackendConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address of Zipkin collector.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Generate 128bit traces. Default: false
	TraceId128Bit bool `protobuf:"varint,2,opt,name=traceId128bit,proto3" json:"traceId128bit,omitempty"`
	// Version of the API. values: httpJson, httpJsonV1, httpProto. Default:
	// httpJson see
	// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/trace/v3/trace.proto#envoy-v3-api-enum-config-trace-v3-zipkinconfig-collectorendpointversion
	ApiVersion string `protobuf:"bytes,3,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Determines whether client and server spans will share the same span
	// context. Default: true.
	// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/trace/v3/zipkin.proto#config-trace-v3-zipkinconfig
	SharedSpanContext *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=sharedSpanContext,proto3" json:"sharedSpanContext,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ZipkinTracingBackendConfig) Reset() {
	*x = ZipkinTracingBackendConfig{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZipkinTracingBackendConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZipkinTracingBackendConfig) ProtoMessage() {}

func (x *ZipkinTracingBackendConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZipkinTracingBackendConfig.ProtoReflect.Descriptor instead.
func (*ZipkinTracingBackendConfig) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{6}
}

func (x *ZipkinTracingBackendConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ZipkinTracingBackendConfig) GetTraceId128Bit() bool {
	if x != nil {
		return x.TraceId128Bit
	}
	return false
}

func (x *ZipkinTracingBackendConfig) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ZipkinTracingBackendConfig) GetSharedSpanContext() *wrapperspb.BoolValue {
	if x != nil {
		return x.SharedSpanContext
	}
	return nil
}

type Logging struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the default backend
	DefaultBackend string `protobuf:"bytes,1,opt,name=defaultBackend,proto3" json:"defaultBackend,omitempty"`
	// List of available logging backends
	Backends      []*LoggingBackend `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logging) Reset() {
	*x = Logging{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logging) ProtoMessage() {}

func (x *Logging) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logging.ProtoReflect.Descriptor instead.
func (*Logging) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{7}
}

func (x *Logging) GetDefaultBackend() string {
	if x != nil {
		return x.DefaultBackend
	}
	return ""
}

func (x *Logging) GetBackends() []*LoggingBackend {
	if x != nil {
		return x.Backends
	}
	return nil
}

// LoggingBackend defines logging backend available to mesh. Backends can be
// used in TrafficLog rules.
type LoggingBackend struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the backend, can be then used in Mesh.logging.defaultBackend or in
	// TrafficLogging
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Format of access logs. Placeholders available on
	// https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// Type of the backend (Kuma ships with 'tcp' and 'file')
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Configuration of the backend
	Conf          *structpb.Struct `protobuf:"bytes,4,opt,name=conf,proto3" json:"conf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoggingBackend) Reset() {
	*x = LoggingBackend{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggingBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingBackend) ProtoMessage() {}

func (x *LoggingBackend) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingBackend.ProtoReflect.Descriptor instead.
func (*LoggingBackend) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{8}
}

func (x *LoggingBackend) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoggingBackend) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *LoggingBackend) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LoggingBackend) GetConf() *structpb.Struct {
	if x != nil {
		return x.Conf
	}
	return nil
}

// FileLoggingBackendConfig defines configuration for file based access logs
type FileLoggingBackendConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to a file that logs will be written to
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileLoggingBackendConfig) Reset() {
	*x = FileLoggingBackendConfig{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileLoggingBackendConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLoggingBackendConfig) ProtoMessage() {}

func (x *FileLoggingBackendConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLoggingBackendConfig.ProtoReflect.Descriptor instead.
func (*FileLoggingBackendConfig) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{9}
}

func (x *FileLoggingBackendConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// TcpLoggingBackendConfig defines configuration for TCP based access logs
type TcpLoggingBackendConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address to TCP service that will receive logs
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpLoggingBackendConfig) Reset() {
	*x = TcpLoggingBackendConfig{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpLoggingBackendConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpLoggingBackendConfig) ProtoMessage() {}

func (x *TcpLoggingBackendConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpLoggingBackendConfig.ProtoReflect.Descriptor instead.
func (*TcpLoggingBackendConfig) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{10}
}

func (x *TcpLoggingBackendConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Routing defines configuration for the routing in the mesh
type Routing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable the Locality Aware Load Balancing
	LocalityAwareLoadBalancing bool `protobuf:"varint,1,opt,name=localityAwareLoadBalancing,proto3" json:"localityAwareLoadBalancing,omitempty"`
	// Enable routing traffic to services in other zone or external services
	// through ZoneEgress. Default: false
	ZoneEgress bool `protobuf:"varint,2,opt,name=zoneEgress,proto3" json:"zoneEgress,omitempty"`
	// If true, blocks traffic to MeshExternalServices.
	// Default: false
	DefaultForbidMeshExternalServiceAccess bool `protobuf:"varint,3,opt,name=defaultForbidMeshExternalServiceAccess,proto3" json:"defaultForbidMeshExternalServiceAccess,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *Routing) Reset() {
	*x = Routing{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routing) ProtoMessage() {}

func (x *Routing) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routing.ProtoReflect.Descriptor instead.
func (*Routing) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{11}
}

func (x *Routing) GetLocalityAwareLoadBalancing() bool {
	if x != nil {
		return x.LocalityAwareLoadBalancing
	}
	return false
}

func (x *Routing) GetZoneEgress() bool {
	if x != nil {
		return x.ZoneEgress
	}
	return false
}

func (x *Routing) GetDefaultForbidMeshExternalServiceAccess() bool {
	if x != nil {
		return x.DefaultForbidMeshExternalServiceAccess
	}
	return false
}

// mTLS settings of a Mesh.
type Mesh_Mtls struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the enabled backend
	EnabledBackend string `protobuf:"bytes,1,opt,name=enabledBackend,proto3" json:"enabledBackend,omitempty"`
	// List of available Certificate Authority backends
	Backends []*CertificateAuthorityBackend `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
	// If enabled, skips CA validation.
	SkipValidation bool `protobuf:"varint,3,opt,name=skipValidation,proto3" json:"skipValidation,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Mesh_Mtls) Reset() {
	*x = Mesh_Mtls{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mesh_Mtls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mesh_Mtls) ProtoMessage() {}

func (x *Mesh_Mtls) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mesh_Mtls.ProtoReflect.Descriptor instead.
func (*Mesh_Mtls) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Mesh_Mtls) GetEnabledBackend() string {
	if x != nil {
		return x.EnabledBackend
	}
	return ""
}

func (x *Mesh_Mtls) GetBackends() []*CertificateAuthorityBackend {
	if x != nil {
		return x.Backends
	}
	return nil
}

func (x *Mesh_Mtls) GetSkipValidation() bool {
	if x != nil {
		return x.SkipValidation
	}
	return false
}

// Constraints to apply to the mesh and its entities
type Mesh_Constraints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DataplaneProxyMembership defines a set of requirements for data plane
	// proxies to be a member of the mesh.
	DataplaneProxy *Mesh_DataplaneProxyConstraints `protobuf:"bytes,1,opt,name=dataplaneProxy,proto3" json:"dataplaneProxy,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Mesh_Constraints) Reset() {
	*x = Mesh_Constraints{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mesh_Constraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mesh_Constraints) ProtoMessage() {}

func (x *Mesh_Constraints) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mesh_Constraints.ProtoReflect.Descriptor instead.
func (*Mesh_Constraints) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Mesh_Constraints) GetDataplaneProxy() *Mesh_DataplaneProxyConstraints {
	if x != nil {
		return x.DataplaneProxy
	}
	return nil
}

type Mesh_DataplaneProxyConstraints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requirements defines a set of requirements that data plane proxies must
	// fulfill in order to join the mesh. A data plane proxy must fulfill at
	// least one requirement in order to join the mesh. Empty list of allowed
	// requirements means that any proxy that is not explicitly denied can join.
	Requirements []*Mesh_DataplaneProxyConstraints_Rules `protobuf:"bytes,1,rep,name=requirements,proto3" json:"requirements,omitempty"`
	// Restrictions defines a set of restrictions that data plane proxies cannot
	// fulfill in order to join the mesh. A data plane proxy cannot fulfill any
	// requirement in order to join the mesh.
	// Restrictions takes precedence over requirements.
	Restrictions  []*Mesh_DataplaneProxyConstraints_Rules `protobuf:"bytes,2,rep,name=restrictions,proto3" json:"restrictions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mesh_DataplaneProxyConstraints) Reset() {
	*x = Mesh_DataplaneProxyConstraints{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mesh_DataplaneProxyConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mesh_DataplaneProxyConstraints) ProtoMessage() {}

func (x *Mesh_DataplaneProxyConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mesh_DataplaneProxyConstraints.ProtoReflect.Descriptor instead.
func (*Mesh_DataplaneProxyConstraints) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Mesh_DataplaneProxyConstraints) GetRequirements() []*Mesh_DataplaneProxyConstraints_Rules {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Mesh_DataplaneProxyConstraints) GetRestrictions() []*Mesh_DataplaneProxyConstraints_Rules {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

type Mesh_MeshServices struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          Mesh_MeshServices_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=kuma.mesh.v1alpha1.Mesh_MeshServices_Mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mesh_MeshServices) Reset() {
	*x = Mesh_MeshServices{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mesh_MeshServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mesh_MeshServices) ProtoMessage() {}

func (x *Mesh_MeshServices) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mesh_MeshServices.ProtoReflect.Descriptor instead.
func (*Mesh_MeshServices) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Mesh_MeshServices) GetMode() Mesh_MeshServices_Mode {
	if x != nil {
		return x.Mode
	}
	return Mesh_MeshServices_Disabled
}

// Rules defines a set of rules for data plane proxies to be member of the
// mesh.
type Mesh_DataplaneProxyConstraints_Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tags defines set of required tags. You can specify '*' in value to
	// require non empty value of tag
	Tags          map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mesh_DataplaneProxyConstraints_Rules) Reset() {
	*x = Mesh_DataplaneProxyConstraints_Rules{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mesh_DataplaneProxyConstraints_Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mesh_DataplaneProxyConstraints_Rules) ProtoMessage() {}

func (x *Mesh_DataplaneProxyConstraints_Rules) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mesh_DataplaneProxyConstraints_Rules.ProtoReflect.Descriptor instead.
func (*Mesh_DataplaneProxyConstraints_Rules) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Mesh_DataplaneProxyConstraints_Rules) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// DpCert defines settings for certificates generated for Dataplanes
type CertificateAuthorityBackend_DpCert struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Rotation settings
	Rotation *CertificateAuthorityBackend_DpCert_Rotation `protobuf:"bytes,1,opt,name=rotation,proto3" json:"rotation,omitempty"`
	// Timeout on request to CA for DP certificate generation and retrieval
	RequestTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=requestTimeout,proto3" json:"requestTimeout,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CertificateAuthorityBackend_DpCert) Reset() {
	*x = CertificateAuthorityBackend_DpCert{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateAuthorityBackend_DpCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthorityBackend_DpCert) ProtoMessage() {}

func (x *CertificateAuthorityBackend_DpCert) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthorityBackend_DpCert.ProtoReflect.Descriptor instead.
func (*CertificateAuthorityBackend_DpCert) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CertificateAuthorityBackend_DpCert) GetRotation() *CertificateAuthorityBackend_DpCert_Rotation {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *CertificateAuthorityBackend_DpCert) GetRequestTimeout() *durationpb.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

// RootChain defines settings related to CA root certificate chain.
type CertificateAuthorityBackend_RootChain struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeout on request for to CA for root certificate chain.
	// If not specified, defaults to 10s.
	RequestTimeout *durationpb.Duration `protobuf:"bytes,1,opt,name=requestTimeout,proto3" json:"requestTimeout,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CertificateAuthorityBackend_RootChain) Reset() {
	*x = CertificateAuthorityBackend_RootChain{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateAuthorityBackend_RootChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthorityBackend_RootChain) ProtoMessage() {}

func (x *CertificateAuthorityBackend_RootChain) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthorityBackend_RootChain.ProtoReflect.Descriptor instead.
func (*CertificateAuthorityBackend_RootChain) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CertificateAuthorityBackend_RootChain) GetRequestTimeout() *durationpb.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

// Rotation defines rotation settings for Dataplane certificate
type CertificateAuthorityBackend_DpCert_Rotation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time after which generated certificate for Dataplane will expire
	Expiration    string `protobuf:"bytes,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateAuthorityBackend_DpCert_Rotation) Reset() {
	*x = CertificateAuthorityBackend_DpCert_Rotation{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateAuthorityBackend_DpCert_Rotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthorityBackend_DpCert_Rotation) ProtoMessage() {}

func (x *CertificateAuthorityBackend_DpCert_Rotation) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthorityBackend_DpCert_Rotation.ProtoReflect.Descriptor instead.
func (*CertificateAuthorityBackend_DpCert_Rotation) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *CertificateAuthorityBackend_DpCert_Rotation) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

// Outbound describes the common mesh outbound settings
type Networking_Outbound struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Control the passthrough cluster
	Passthrough   *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=passthrough,proto3" json:"passthrough,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Networking_Outbound) Reset() {
	*x = Networking_Outbound{}
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Networking_Outbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Networking_Outbound) ProtoMessage() {}

func (x *Networking_Outbound) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_mesh_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Networking_Outbound.ProtoReflect.Descriptor instead.
func (*Networking_Outbound) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Networking_Outbound) GetPassthrough() *wrapperspb.BoolValue {
	if x != nil {
		return x.Passthrough
	}
	return nil
}

var File_api_mesh_v1alpha1_mesh_proto protoreflect.FileDescriptor

const file_api_mesh_v1alpha1_mesh_proto_rawDesc = "" +
	"\n" +
	"\x1capi/mesh/v1alpha1/mesh.proto\x12\x12kuma.mesh.v1alpha1\x1a\x16api/mesh/options.proto\x1a\x1fapi/mesh/v1alpha1/metrics.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1cgoogle/protobuf/struct.proto\"\x9e\v\n" +
	"\x04Mesh\x121\n" +
	"\x04mtls\x18\x01 \x01(\v2\x1d.kuma.mesh.v1alpha1.Mesh.MtlsR\x04mtls\x125\n" +
	"\atracing\x18\x02 \x01(\v2\x1b.kuma.mesh.v1alpha1.TracingR\atracing\x125\n" +
	"\alogging\x18\x03 \x01(\v2\x1b.kuma.mesh.v1alpha1.LoggingR\alogging\x125\n" +
	"\ametrics\x18\x04 \x01(\v2\x1b.kuma.mesh.v1alpha1.MetricsR\ametrics\x12>\n" +
	"\n" +
	"networking\x18\x05 \x01(\v2\x1e.kuma.mesh.v1alpha1.NetworkingR\n" +
	"networking\x125\n" +
	"\arouting\x18\x06 \x01(\v2\x1b.kuma.mesh.v1alpha1.RoutingR\arouting\x12F\n" +
	"\vconstraints\x18\a \x01(\v2$.kuma.mesh.v1alpha1.Mesh.ConstraintsR\vconstraints\x12@\n" +
	"\x1bskipCreatingInitialPolicies\x18\b \x03(\tR\x1bskipCreatingInitialPolicies\x12I\n" +
	"\fmeshServices\x18\t \x01(\v2%.kuma.mesh.v1alpha1.Mesh.MeshServicesR\fmeshServices\x1a\xa3\x01\n" +
	"\x04Mtls\x12&\n" +
	"\x0eenabledBackend\x18\x01 \x01(\tR\x0eenabledBackend\x12K\n" +
	"\bbackends\x18\x02 \x03(\v2/.kuma.mesh.v1alpha1.CertificateAuthorityBackendR\bbackends\x12&\n" +
	"\x0eskipValidation\x18\x03 \x01(\bR\x0eskipValidation\x1ai\n" +
	"\vConstraints\x12Z\n" +
	"\x0edataplaneProxy\x18\x01 \x01(\v22.kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraintsR\x0edataplaneProxy\x1a\xf2\x02\n" +
	"\x19DataplaneProxyConstraints\x12\\\n" +
	"\frequirements\x18\x01 \x03(\v28.kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.RulesR\frequirements\x12\\\n" +
	"\frestrictions\x18\x02 \x03(\v28.kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.RulesR\frestrictions\x1a\x98\x01\n" +
	"\x05Rules\x12V\n" +
	"\x04tags\x18\x01 \x03(\v2B.kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.Rules.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\x9a\x01\n" +
	"\fMeshServices\x12>\n" +
	"\x04mode\x18\x01 \x01(\x0e2*.kuma.mesh.v1alpha1.Mesh.MeshServices.ModeR\x04mode\"J\n" +
	"\x04Mode\x12\f\n" +
	"\bDisabled\x10\x00\x12\x0e\n" +
	"\n" +
	"Everywhere\x10\x01\x12\x15\n" +
	"\x11ReachableBackends\x10\x02\x12\r\n" +
	"\tExclusive\x10\x03:O\xaa\x8c\x89\xa6\x01I\n" +
	"\fMeshResource\x12\x04Mesh\x18\x01\"\x04mesh:\x0e\n" +
	"\x04mesh\x12\x06meshesR\x17model.GlobalToZonesFlag\x9a\x01\x01m\"\xb0\x05\n" +
	"\x1bCertificateAuthorityBackend\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12N\n" +
	"\x06dpCert\x18\x03 \x01(\v26.kuma.mesh.v1alpha1.CertificateAuthorityBackend.DpCertR\x06dpCert\x12+\n" +
	"\x04conf\x18\x04 \x01(\v2\x17.google.protobuf.StructR\x04conf\x12H\n" +
	"\x04mode\x18\x05 \x01(\x0e24.kuma.mesh.v1alpha1.CertificateAuthorityBackend.ModeR\x04mode\x12W\n" +
	"\trootChain\x18\x06 \x01(\v29.kuma.mesh.v1alpha1.CertificateAuthorityBackend.RootChainR\trootChain\x1a\xd4\x01\n" +
	"\x06DpCert\x12[\n" +
	"\brotation\x18\x01 \x01(\v2?.kuma.mesh.v1alpha1.CertificateAuthorityBackend.DpCert.RotationR\brotation\x12A\n" +
	"\x0erequestTimeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x0erequestTimeout\x1a*\n" +
	"\bRotation\x12\x1e\n" +
	"\n" +
	"expiration\x18\x01 \x01(\tR\n" +
	"expiration\x1aN\n" +
	"\tRootChain\x12A\n" +
	"\x0erequestTimeout\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x0erequestTimeout\"\"\n" +
	"\x04Mode\x12\n" +
	"\n" +
	"\x06STRICT\x10\x00\x12\x0e\n" +
	"\n" +
	"PERMISSIVE\x10\x01\"\x9b\x01\n" +
	"\n" +
	"Networking\x12C\n" +
	"\boutbound\x18\x01 \x01(\v2'.kuma.mesh.v1alpha1.Networking.OutboundR\boutbound\x1aH\n" +
	"\bOutbound\x12<\n" +
	"\vpassthrough\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\vpassthrough\"q\n" +
	"\aTracing\x12&\n" +
	"\x0edefaultBackend\x18\x01 \x01(\tR\x0edefaultBackend\x12>\n" +
	"\bbackends\x18\x02 \x03(\v2\".kuma.mesh.v1alpha1.TracingBackendR\bbackends\"\x9f\x01\n" +
	"\x0eTracingBackend\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\bsampling\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\bsampling\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12+\n" +
	"\x04conf\x18\x04 \x01(\v2\x17.google.protobuf.StructR\x04conf\"o\n" +
	"\x1bDatadogTracingBackendConfig\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x02 \x01(\rR\x04port\x12\"\n" +
	"\fsplitService\x18\x03 \x01(\bR\fsplitService\"\xbe\x01\n" +
	"\x1aZipkinTracingBackendConfig\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12$\n" +
	"\rtraceId128bit\x18\x02 \x01(\bR\rtraceId128bit\x12\x1e\n" +
	"\n" +
	"apiVersion\x18\x03 \x01(\tR\n" +
	"apiVersion\x12H\n" +
	"\x11sharedSpanContext\x18\x04 \x01(\v2\x1a.google.protobuf.BoolValueR\x11sharedSpanContext\"q\n" +
	"\aLogging\x12&\n" +
	"\x0edefaultBackend\x18\x01 \x01(\tR\x0edefaultBackend\x12>\n" +
	"\bbackends\x18\x02 \x03(\v2\".kuma.mesh.v1alpha1.LoggingBackendR\bbackends\"}\n" +
	"\x0eLoggingBackend\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06format\x18\x02 \x01(\tR\x06format\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12+\n" +
	"\x04conf\x18\x04 \x01(\v2\x17.google.protobuf.StructR\x04conf\".\n" +
	"\x18FileLoggingBackendConfig\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"3\n" +
	"\x17TcpLoggingBackendConfig\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\"\xc1\x01\n" +
	"\aRouting\x12>\n" +
	"\x1alocalityAwareLoadBalancing\x18\x01 \x01(\bR\x1alocalityAwareLoadBalancing\x12\x1e\n" +
	"\n" +
	"zoneEgress\x18\x02 \x01(\bR\n" +
	"zoneEgress\x12V\n" +
	"&defaultForbidMeshExternalServiceAccess\x18\x03 \x01(\bR&defaultForbidMeshExternalServiceAccessB*Z(github.com/kumahq/kuma/api/mesh/v1alpha1b\x06proto3"

var (
	file_api_mesh_v1alpha1_mesh_proto_rawDescOnce sync.Once
	file_api_mesh_v1alpha1_mesh_proto_rawDescData []byte
)

func file_api_mesh_v1alpha1_mesh_proto_rawDescGZIP() []byte {
	file_api_mesh_v1alpha1_mesh_proto_rawDescOnce.Do(func() {
		file_api_mesh_v1alpha1_mesh_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_mesh_v1alpha1_mesh_proto_rawDesc), len(file_api_mesh_v1alpha1_mesh_proto_rawDesc)))
	})
	return file_api_mesh_v1alpha1_mesh_proto_rawDescData
}

var file_api_mesh_v1alpha1_mesh_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_mesh_v1alpha1_mesh_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_mesh_v1alpha1_mesh_proto_goTypes = []any{
	(Mesh_MeshServices_Mode)(0),                  // 0: kuma.mesh.v1alpha1.Mesh.MeshServices.Mode
	(CertificateAuthorityBackend_Mode)(0),        // 1: kuma.mesh.v1alpha1.CertificateAuthorityBackend.Mode
	(*Mesh)(nil),                                 // 2: kuma.mesh.v1alpha1.Mesh
	(*CertificateAuthorityBackend)(nil),          // 3: kuma.mesh.v1alpha1.CertificateAuthorityBackend
	(*Networking)(nil),                           // 4: kuma.mesh.v1alpha1.Networking
	(*Tracing)(nil),                              // 5: kuma.mesh.v1alpha1.Tracing
	(*TracingBackend)(nil),                       // 6: kuma.mesh.v1alpha1.TracingBackend
	(*DatadogTracingBackendConfig)(nil),          // 7: kuma.mesh.v1alpha1.DatadogTracingBackendConfig
	(*ZipkinTracingBackendConfig)(nil),           // 8: kuma.mesh.v1alpha1.ZipkinTracingBackendConfig
	(*Logging)(nil),                              // 9: kuma.mesh.v1alpha1.Logging
	(*LoggingBackend)(nil),                       // 10: kuma.mesh.v1alpha1.LoggingBackend
	(*FileLoggingBackendConfig)(nil),             // 11: kuma.mesh.v1alpha1.FileLoggingBackendConfig
	(*TcpLoggingBackendConfig)(nil),              // 12: kuma.mesh.v1alpha1.TcpLoggingBackendConfig
	(*Routing)(nil),                              // 13: kuma.mesh.v1alpha1.Routing
	(*Mesh_Mtls)(nil),                            // 14: kuma.mesh.v1alpha1.Mesh.Mtls
	(*Mesh_Constraints)(nil),                     // 15: kuma.mesh.v1alpha1.Mesh.Constraints
	(*Mesh_DataplaneProxyConstraints)(nil),       // 16: kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints
	(*Mesh_MeshServices)(nil),                    // 17: kuma.mesh.v1alpha1.Mesh.MeshServices
	(*Mesh_DataplaneProxyConstraints_Rules)(nil), // 18: kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.Rules
	nil, // 19: kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.Rules.TagsEntry
	(*CertificateAuthorityBackend_DpCert)(nil),          // 20: kuma.mesh.v1alpha1.CertificateAuthorityBackend.DpCert
	(*CertificateAuthorityBackend_RootChain)(nil),       // 21: kuma.mesh.v1alpha1.CertificateAuthorityBackend.RootChain
	(*CertificateAuthorityBackend_DpCert_Rotation)(nil), // 22: kuma.mesh.v1alpha1.CertificateAuthorityBackend.DpCert.Rotation
	(*Networking_Outbound)(nil),                         // 23: kuma.mesh.v1alpha1.Networking.Outbound
	(*Metrics)(nil),                                     // 24: kuma.mesh.v1alpha1.Metrics
	(*structpb.Struct)(nil),                             // 25: google.protobuf.Struct
	(*wrapperspb.DoubleValue)(nil),                      // 26: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),                        // 27: google.protobuf.BoolValue
	(*durationpb.Duration)(nil),                         // 28: google.protobuf.Duration
}
var file_api_mesh_v1alpha1_mesh_proto_depIdxs = []int32{
	14, // 0: kuma.mesh.v1alpha1.Mesh.mtls:type_name -> kuma.mesh.v1alpha1.Mesh.Mtls
	5,  // 1: kuma.mesh.v1alpha1.Mesh.tracing:type_name -> kuma.mesh.v1alpha1.Tracing
	9,  // 2: kuma.mesh.v1alpha1.Mesh.logging:type_name -> kuma.mesh.v1alpha1.Logging
	24, // 3: kuma.mesh.v1alpha1.Mesh.metrics:type_name -> kuma.mesh.v1alpha1.Metrics
	4,  // 4: kuma.mesh.v1alpha1.Mesh.networking:type_name -> kuma.mesh.v1alpha1.Networking
	13, // 5: kuma.mesh.v1alpha1.Mesh.routing:type_name -> kuma.mesh.v1alpha1.Routing
	15, // 6: kuma.mesh.v1alpha1.Mesh.constraints:type_name -> kuma.mesh.v1alpha1.Mesh.Constraints
	17, // 7: kuma.mesh.v1alpha1.Mesh.meshServices:type_name -> kuma.mesh.v1alpha1.Mesh.MeshServices
	20, // 8: kuma.mesh.v1alpha1.CertificateAuthorityBackend.dpCert:type_name -> kuma.mesh.v1alpha1.CertificateAuthorityBackend.DpCert
	25, // 9: kuma.mesh.v1alpha1.CertificateAuthorityBackend.conf:type_name -> google.protobuf.Struct
	1,  // 10: kuma.mesh.v1alpha1.CertificateAuthorityBackend.mode:type_name -> kuma.mesh.v1alpha1.CertificateAuthorityBackend.Mode
	21, // 11: kuma.mesh.v1alpha1.CertificateAuthorityBackend.rootChain:type_name -> kuma.mesh.v1alpha1.CertificateAuthorityBackend.RootChain
	23, // 12: kuma.mesh.v1alpha1.Networking.outbound:type_name -> kuma.mesh.v1alpha1.Networking.Outbound
	6,  // 13: kuma.mesh.v1alpha1.Tracing.backends:type_name -> kuma.mesh.v1alpha1.TracingBackend
	26, // 14: kuma.mesh.v1alpha1.TracingBackend.sampling:type_name -> google.protobuf.DoubleValue
	25, // 15: kuma.mesh.v1alpha1.TracingBackend.conf:type_name -> google.protobuf.Struct
	27, // 16: kuma.mesh.v1alpha1.ZipkinTracingBackendConfig.sharedSpanContext:type_name -> google.protobuf.BoolValue
	10, // 17: kuma.mesh.v1alpha1.Logging.backends:type_name -> kuma.mesh.v1alpha1.LoggingBackend
	25, // 18: kuma.mesh.v1alpha1.LoggingBackend.conf:type_name -> google.protobuf.Struct
	3,  // 19: kuma.mesh.v1alpha1.Mesh.Mtls.backends:type_name -> kuma.mesh.v1alpha1.CertificateAuthorityBackend
	16, // 20: kuma.mesh.v1alpha1.Mesh.Constraints.dataplaneProxy:type_name -> kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints
	18, // 21: kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.requirements:type_name -> kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.Rules
	18, // 22: kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.restrictions:type_name -> kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.Rules
	0,  // 23: kuma.mesh.v1alpha1.Mesh.MeshServices.mode:type_name -> kuma.mesh.v1alpha1.Mesh.MeshServices.Mode
	19, // 24: kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.Rules.tags:type_name -> kuma.mesh.v1alpha1.Mesh.DataplaneProxyConstraints.Rules.TagsEntry
	22, // 25: kuma.mesh.v1alpha1.CertificateAuthorityBackend.DpCert.rotation:type_name -> kuma.mesh.v1alpha1.CertificateAuthorityBackend.DpCert.Rotation
	28, // 26: kuma.mesh.v1alpha1.CertificateAuthorityBackend.DpCert.requestTimeout:type_name -> google.protobuf.Duration
	28, // 27: kuma.mesh.v1alpha1.CertificateAuthorityBackend.RootChain.requestTimeout:type_name -> google.protobuf.Duration
	27, // 28: kuma.mesh.v1alpha1.Networking.Outbound.passthrough:type_name -> google.protobuf.BoolValue
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_api_mesh_v1alpha1_mesh_proto_init() }
func file_api_mesh_v1alpha1_mesh_proto_init() {
	if File_api_mesh_v1alpha1_mesh_proto != nil {
		return
	}
	file_api_mesh_v1alpha1_metrics_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_mesh_v1alpha1_mesh_proto_rawDesc), len(file_api_mesh_v1alpha1_mesh_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_mesh_v1alpha1_mesh_proto_goTypes,
		DependencyIndexes: file_api_mesh_v1alpha1_mesh_proto_depIdxs,
		EnumInfos:         file_api_mesh_v1alpha1_mesh_proto_enumTypes,
		MessageInfos:      file_api_mesh_v1alpha1_mesh_proto_msgTypes,
	}.Build()
	File_api_mesh_v1alpha1_mesh_proto = out.File
	file_api_mesh_v1alpha1_mesh_proto_goTypes = nil
	file_api_mesh_v1alpha1_mesh_proto_depIdxs = nil
}
