// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesh/v1alpha1/health_check.proto

package v1alpha1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// HealthCheck defines configuration for health checking.
type HealthCheck struct {
	// List of selectors to match dataplanes that should be configured to do
	// health checks.
	Sources []*Selector `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// List of selectors to match services that need to be health checked.
	Destinations []*Selector `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Configuration for various types of health checking.
	Conf                 *HealthCheck_Conf `protobuf:"bytes,3,opt,name=conf,proto3" json:"conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4f9382814224e98, []int{0}
}

func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(m, src)
}
func (m *HealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck.Size(m)
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

func (m *HealthCheck) GetSources() []*Selector {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *HealthCheck) GetDestinations() []*Selector {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *HealthCheck) GetConf() *HealthCheck_Conf {
	if m != nil {
		return m.Conf
	}
	return nil
}

// Conf defines configuration for various types of health checking.
type HealthCheck_Conf struct {
	// Interval between consecutive health checks.
	Interval *duration.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Maximum time to wait for a health check response.
	Timeout *duration.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Number of consecutive unhealthy checks before considering a host
	// unhealthy.
	UnhealthyThreshold uint32 `protobuf:"varint,3,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// Number of consecutive healthy checks before considering a host healthy.
	HealthyThreshold uint32                `protobuf:"varint,4,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	Tcp              *HealthCheck_Conf_Tcp `protobuf:"bytes,5,opt,name=tcp,proto3" json:"tcp,omitempty"`
	// Configuration of HTTP health checks. Mutually exclusive with Tcp block
	Http                 *HealthCheck_Conf_Http `protobuf:"bytes,6,opt,name=http,proto3" json:"http,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HealthCheck_Conf) Reset()         { *m = HealthCheck_Conf{} }
func (m *HealthCheck_Conf) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_Conf) ProtoMessage()    {}
func (*HealthCheck_Conf) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4f9382814224e98, []int{0, 0}
}

func (m *HealthCheck_Conf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_Conf.Unmarshal(m, b)
}
func (m *HealthCheck_Conf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_Conf.Marshal(b, m, deterministic)
}
func (m *HealthCheck_Conf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_Conf.Merge(m, src)
}
func (m *HealthCheck_Conf) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_Conf.Size(m)
}
func (m *HealthCheck_Conf) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_Conf.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_Conf proto.InternalMessageInfo

func (m *HealthCheck_Conf) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *HealthCheck_Conf) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HealthCheck_Conf) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *HealthCheck_Conf) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *HealthCheck_Conf) GetTcp() *HealthCheck_Conf_Tcp {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *HealthCheck_Conf) GetHttp() *HealthCheck_Conf_Http {
	if m != nil {
		return m.Http
	}
	return nil
}

// Tcp defines optional configuration for specifying bytes to send and
// expected response during the health check
type HealthCheck_Conf_Tcp struct {
	// Bytes which will be send during the health check to the target
	Send *wrappers.BytesValue `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	// Bytes blocks expected as a response. When checking the response,
	// “fuzzy” matching is performed such that each block must be found, and
	// in the order specified, but not necessarily contiguous.
	Receive              []*wrappers.BytesValue `protobuf:"bytes,2,rep,name=receive,proto3" json:"receive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HealthCheck_Conf_Tcp) Reset()         { *m = HealthCheck_Conf_Tcp{} }
func (m *HealthCheck_Conf_Tcp) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_Conf_Tcp) ProtoMessage()    {}
func (*HealthCheck_Conf_Tcp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4f9382814224e98, []int{0, 0, 0}
}

func (m *HealthCheck_Conf_Tcp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_Conf_Tcp.Unmarshal(m, b)
}
func (m *HealthCheck_Conf_Tcp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_Conf_Tcp.Marshal(b, m, deterministic)
}
func (m *HealthCheck_Conf_Tcp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_Conf_Tcp.Merge(m, src)
}
func (m *HealthCheck_Conf_Tcp) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_Conf_Tcp.Size(m)
}
func (m *HealthCheck_Conf_Tcp) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_Conf_Tcp.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_Conf_Tcp proto.InternalMessageInfo

func (m *HealthCheck_Conf_Tcp) GetSend() *wrappers.BytesValue {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *HealthCheck_Conf_Tcp) GetReceive() []*wrappers.BytesValue {
	if m != nil {
		return m.Receive
	}
	return nil
}

// Http defines optional Http configuration which will instruct the service
// the health check will be made for is an http service. It's mutually
// exclusive with the Tcp block so when provided you can't provide
// the Tcp configuration
type HealthCheck_Conf_Http struct {
	// The HTTP path which will be requested during the health check
	// (ie. /health)
	Path *wrappers.StringValue `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The list of HTTP headers which should be added to each health check
	// request
	RequestHeadersToAdd []*HealthCheck_Conf_Http_HeaderValueOption `protobuf:"bytes,2,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// List of HTTP response statuses which are considered healthy
	ExpectedStatuses []*wrappers.UInt32Value `protobuf:"bytes,3,rep,name=expected_statuses,json=expectedStatuses,proto3" json:"expected_statuses,omitempty"`
	// By default HTTP health checks will be executed using HTTP 2 protocol,
	// if this flag will be set, HTTP 1 will be used instead
	UseHttp1             bool     `protobuf:"varint,4,opt,name=use_http1,json=useHttp1,proto3" json:"use_http1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheck_Conf_Http) Reset()         { *m = HealthCheck_Conf_Http{} }
func (m *HealthCheck_Conf_Http) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_Conf_Http) ProtoMessage()    {}
func (*HealthCheck_Conf_Http) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4f9382814224e98, []int{0, 0, 1}
}

func (m *HealthCheck_Conf_Http) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_Conf_Http.Unmarshal(m, b)
}
func (m *HealthCheck_Conf_Http) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_Conf_Http.Marshal(b, m, deterministic)
}
func (m *HealthCheck_Conf_Http) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_Conf_Http.Merge(m, src)
}
func (m *HealthCheck_Conf_Http) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_Conf_Http.Size(m)
}
func (m *HealthCheck_Conf_Http) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_Conf_Http.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_Conf_Http proto.InternalMessageInfo

func (m *HealthCheck_Conf_Http) GetPath() *wrappers.StringValue {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *HealthCheck_Conf_Http) GetRequestHeadersToAdd() []*HealthCheck_Conf_Http_HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *HealthCheck_Conf_Http) GetExpectedStatuses() []*wrappers.UInt32Value {
	if m != nil {
		return m.ExpectedStatuses
	}
	return nil
}

func (m *HealthCheck_Conf_Http) GetUseHttp1() bool {
	if m != nil {
		return m.UseHttp1
	}
	return false
}

type HealthCheck_Conf_Http_HeaderValue struct {
	Key                  *wrappers.StringValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                *wrappers.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *HealthCheck_Conf_Http_HeaderValue) Reset()         { *m = HealthCheck_Conf_Http_HeaderValue{} }
func (m *HealthCheck_Conf_Http_HeaderValue) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_Conf_Http_HeaderValue) ProtoMessage()    {}
func (*HealthCheck_Conf_Http_HeaderValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4f9382814224e98, []int{0, 0, 1, 0}
}

func (m *HealthCheck_Conf_Http_HeaderValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_Conf_Http_HeaderValue.Unmarshal(m, b)
}
func (m *HealthCheck_Conf_Http_HeaderValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_Conf_Http_HeaderValue.Marshal(b, m, deterministic)
}
func (m *HealthCheck_Conf_Http_HeaderValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_Conf_Http_HeaderValue.Merge(m, src)
}
func (m *HealthCheck_Conf_Http_HeaderValue) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_Conf_Http_HeaderValue.Size(m)
}
func (m *HealthCheck_Conf_Http_HeaderValue) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_Conf_Http_HeaderValue.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_Conf_Http_HeaderValue proto.InternalMessageInfo

func (m *HealthCheck_Conf_Http_HeaderValue) GetKey() *wrappers.StringValue {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *HealthCheck_Conf_Http_HeaderValue) GetValue() *wrappers.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type HealthCheck_Conf_Http_HeaderValueOption struct {
	// Key/Value representation of the HTTP header
	Header *HealthCheck_Conf_Http_HeaderValue `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The bool value which if true (default) will mean the header values
	// should be appended to already present ones
	Append               *wrappers.BoolValue `protobuf:"bytes,2,opt,name=append,proto3" json:"append,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HealthCheck_Conf_Http_HeaderValueOption) Reset() {
	*m = HealthCheck_Conf_Http_HeaderValueOption{}
}
func (m *HealthCheck_Conf_Http_HeaderValueOption) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_Conf_Http_HeaderValueOption) ProtoMessage()    {}
func (*HealthCheck_Conf_Http_HeaderValueOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4f9382814224e98, []int{0, 0, 1, 1}
}

func (m *HealthCheck_Conf_Http_HeaderValueOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_Conf_Http_HeaderValueOption.Unmarshal(m, b)
}
func (m *HealthCheck_Conf_Http_HeaderValueOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_Conf_Http_HeaderValueOption.Marshal(b, m, deterministic)
}
func (m *HealthCheck_Conf_Http_HeaderValueOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_Conf_Http_HeaderValueOption.Merge(m, src)
}
func (m *HealthCheck_Conf_Http_HeaderValueOption) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_Conf_Http_HeaderValueOption.Size(m)
}
func (m *HealthCheck_Conf_Http_HeaderValueOption) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_Conf_Http_HeaderValueOption.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_Conf_Http_HeaderValueOption proto.InternalMessageInfo

func (m *HealthCheck_Conf_Http_HeaderValueOption) GetHeader() *HealthCheck_Conf_Http_HeaderValue {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HealthCheck_Conf_Http_HeaderValueOption) GetAppend() *wrappers.BoolValue {
	if m != nil {
		return m.Append
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthCheck)(nil), "kuma.mesh.v1alpha1.HealthCheck")
	proto.RegisterType((*HealthCheck_Conf)(nil), "kuma.mesh.v1alpha1.HealthCheck.Conf")
	proto.RegisterType((*HealthCheck_Conf_Tcp)(nil), "kuma.mesh.v1alpha1.HealthCheck.Conf.Tcp")
	proto.RegisterType((*HealthCheck_Conf_Http)(nil), "kuma.mesh.v1alpha1.HealthCheck.Conf.Http")
	proto.RegisterType((*HealthCheck_Conf_Http_HeaderValue)(nil), "kuma.mesh.v1alpha1.HealthCheck.Conf.Http.HeaderValue")
	proto.RegisterType((*HealthCheck_Conf_Http_HeaderValueOption)(nil), "kuma.mesh.v1alpha1.HealthCheck.Conf.Http.HeaderValueOption")
}

func init() { proto.RegisterFile("mesh/v1alpha1/health_check.proto", fileDescriptor_a4f9382814224e98) }

var fileDescriptor_a4f9382814224e98 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x18, 0xc5, 0x97, 0x36, 0xfd, 0x33, 0x0f, 0xa4, 0xcd, 0x93, 0x20, 0x64, 0x13, 0xaa, 0x10, 0x17,
	0xa5, 0x17, 0x09, 0xed, 0x98, 0x34, 0x81, 0x10, 0x2c, 0xe3, 0x62, 0x20, 0x21, 0xa4, 0xac, 0xe3,
	0x82, 0x9b, 0xca, 0x8b, 0xbf, 0x35, 0xd1, 0xd2, 0xd8, 0x8b, 0x9d, 0xc2, 0x1e, 0x03, 0x2e, 0x78,
	0x88, 0x3d, 0x11, 0xaf, 0xc0, 0x2b, 0xec, 0x0a, 0xd9, 0x71, 0x26, 0x4a, 0x60, 0xea, 0xb8, 0xda,
	0x5c, 0x9f, 0xdf, 0xf9, 0x4e, 0x8e, 0xbe, 0x04, 0xf5, 0x66, 0x20, 0x62, 0x7f, 0x3e, 0x24, 0x29,
	0x8f, 0xc9, 0xd0, 0x8f, 0x81, 0xa4, 0x32, 0x9e, 0x44, 0x31, 0x44, 0x67, 0x1e, 0xcf, 0x99, 0x64,
	0x18, 0x9f, 0x15, 0x33, 0xe2, 0x29, 0x99, 0x57, 0xc9, 0xdc, 0xed, 0x45, 0x4a, 0x40, 0x0a, 0x91,
	0x64, 0x79, 0x49, 0xb8, 0x0f, 0xa7, 0x8c, 0x4d, 0x53, 0xf0, 0xf5, 0xe9, 0xa4, 0x38, 0xf5, 0x69,
	0x91, 0x13, 0x99, 0xb0, 0xec, 0x5f, 0xf7, 0x9f, 0x73, 0xc2, 0x39, 0xe4, 0xc2, 0xdc, 0xdf, 0x9f,
	0x93, 0x34, 0xa1, 0x44, 0x82, 0x5f, 0xfd, 0x53, 0x5e, 0x3c, 0xfa, 0xb9, 0x8a, 0xd6, 0x0e, 0x75,
	0xc2, 0x03, 0x15, 0x10, 0xbf, 0x46, 0x1d, 0xc1, 0x8a, 0x3c, 0x02, 0xe1, 0x58, 0xbd, 0x66, 0x7f,
	0x6d, 0xb4, 0xed, 0xd5, 0xc3, 0x7a, 0x47, 0x26, 0x5d, 0xd0, 0xbd, 0x0a, 0x5a, 0xdf, 0xac, 0x46,
	0xd7, 0x0a, 0x2b, 0x0c, 0xbf, 0x43, 0x77, 0x28, 0x08, 0x99, 0x64, 0x3a, 0x9f, 0x70, 0x1a, 0xb7,
	0xb2, 0x59, 0x60, 0xf1, 0x1e, 0xb2, 0x23, 0x96, 0x9d, 0x3a, 0xcd, 0x9e, 0xd5, 0x5f, 0x1b, 0x3d,
	0xfe, 0x9b, 0xc7, 0x6f, 0xe1, 0xbd, 0x03, 0x96, 0x9d, 0x86, 0x9a, 0x70, 0xbf, 0x76, 0x91, 0xad,
	0x8e, 0x78, 0x1f, 0x75, 0x93, 0x4c, 0x42, 0x3e, 0x27, 0xa9, 0x63, 0x69, 0x9b, 0x07, 0x5e, 0x59,
	0x96, 0x57, 0x95, 0xe5, 0xbd, 0x31, 0x65, 0x06, 0xe8, 0x2a, 0xe8, 0x5c, 0x5a, 0x76, 0xd7, 0x1a,
	0xac, 0x84, 0xd7, 0x18, 0x7e, 0x85, 0x3a, 0x32, 0x99, 0x01, 0x2b, 0xa4, 0xd3, 0xb8, 0x8d, 0x43,
	0x45, 0xe1, 0x3d, 0xb4, 0x59, 0x64, 0xe5, 0x1e, 0x5c, 0x4c, 0x64, 0x9c, 0x83, 0x88, 0x59, 0x4a,
	0xf5, 0x53, 0xdd, 0x0d, 0x3a, 0x57, 0x81, 0x3d, 0x68, 0xf4, 0x56, 0x42, 0x7c, 0xad, 0x19, 0x57,
	0x12, 0xfc, 0x0c, 0x6d, 0xd4, 0x39, 0x7b, 0x91, 0x5b, 0xaf, 0x51, 0xcf, 0x51, 0x53, 0x46, 0xdc,
	0x69, 0xe9, 0xb0, 0xfd, 0x65, 0x5a, 0xf3, 0xc6, 0x11, 0x0f, 0x15, 0x84, 0x5f, 0x22, 0x3b, 0x96,
	0x92, 0x3b, 0x6d, 0x0d, 0x3f, 0x59, 0x0a, 0x3e, 0x94, 0x92, 0x87, 0x1a, 0x73, 0x67, 0xa8, 0x39,
	0x8e, 0x38, 0xf6, 0x91, 0x2d, 0x20, 0xa3, 0xa6, 0xf1, 0xad, 0x5a, 0x5f, 0xc1, 0x85, 0x04, 0xf1,
	0x91, 0xa4, 0x05, 0x84, 0x5a, 0x88, 0x77, 0x51, 0x27, 0x87, 0x08, 0x92, 0x39, 0x98, 0x85, 0xb9,
	0x91, 0xa9, 0xb4, 0xee, 0xa5, 0x8d, 0x6c, 0x35, 0x1d, 0x3f, 0x45, 0x36, 0x27, 0x32, 0x36, 0x03,
	0xb7, 0x6b, 0xf0, 0x91, 0xcc, 0x93, 0x6c, 0x6a, 0x26, 0x2a, 0x25, 0xe6, 0xe8, 0x5e, 0x0e, 0xe7,
	0x05, 0x08, 0x39, 0x89, 0x81, 0x50, 0xc8, 0xc5, 0x44, 0xb2, 0x09, 0xa1, 0xd4, 0x04, 0x78, 0xb1,
	0xf4, 0xa3, 0xab, 0x5f, 0x29, 0xe4, 0xda, 0xfc, 0x03, 0x57, 0x6b, 0x10, 0x6e, 0x1a, 0xeb, 0xf2,
	0x46, 0x8c, 0xd9, 0x3e, 0xa5, 0xf8, 0x18, 0x6d, 0xc0, 0x17, 0x0e, 0x91, 0x04, 0x3a, 0x11, 0x92,
	0xc8, 0x42, 0x80, 0x70, 0x9a, 0xe6, 0xf5, 0xf8, 0x33, 0xf0, 0xf1, 0xdb, 0x4c, 0xee, 0x8c, 0xb4,
	0xa7, 0x5e, 0xaa, 0x41, 0x6b, 0xfd, 0x87, 0xdd, 0xa7, 0xe1, 0x7a, 0x65, 0x71, 0x64, 0x1c, 0xf0,
	0x16, 0x5a, 0x2d, 0x04, 0x4c, 0x54, 0xfd, 0x43, 0xbd, 0x1b, 0xdd, 0xb0, 0x5b, 0x08, 0x50, 0xc9,
	0x86, 0xee, 0xb9, 0x7e, 0xbd, 0xab, 0x74, 0xd8, 0x43, 0xcd, 0x33, 0xb8, 0x58, 0xaa, 0x25, 0x25,
	0xc4, 0x23, 0xd4, 0x9a, 0xab, 0x93, 0x59, 0xfc, 0x9b, 0x89, 0x52, 0xea, 0x7e, 0xb7, 0xd0, 0x46,
	0xad, 0x11, 0xfc, 0x1e, 0xb5, 0xcb, 0x9a, 0xcd, 0xf0, 0xdd, 0xff, 0xaa, 0x37, 0x34, 0x26, 0x78,
	0x84, 0xda, 0xea, 0x03, 0x97, 0x51, 0x93, 0xcc, 0xad, 0xaf, 0x0b, 0x63, 0xa9, 0x61, 0x4a, 0x65,
	0x30, 0xf8, 0xd4, 0x9f, 0x26, 0x32, 0x2e, 0x4e, 0xbc, 0x88, 0xcd, 0x7c, 0x35, 0x3e, 0x3e, 0xd7,
	0x7f, 0x7c, 0xc2, 0x13, 0x7f, 0xe1, 0xfb, 0x7b, 0xd2, 0xd6, 0x3e, 0x3b, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x81, 0xaf, 0x36, 0x47, 0xcd, 0x05, 0x00, 0x00,
}
