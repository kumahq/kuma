// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.20.0
// source: api/mesh/v1alpha1/health_check.proto

package v1alpha1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/kumahq/kuma/api/mesh"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HealthCheck defines configuration for health checking.
type HealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of selectors to match dataplanes that should be configured to do
	// health checks.
	Sources []*Selector `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// List of selectors to match services that need to be health checked.
	Destinations []*Selector `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Configuration for various types of health checking.
	Conf          *HealthCheck_Conf `protobuf:"bytes,3,opt,name=conf,proto3" json:"conf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_health_check_proto_rawDescGZIP(), []int{0}
}

func (x *HealthCheck) GetSources() []*Selector {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *HealthCheck) GetDestinations() []*Selector {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *HealthCheck) GetConf() *HealthCheck_Conf {
	if x != nil {
		return x.Conf
	}
	return nil
}

// Conf defines configuration for various types of health checking.
type HealthCheck_Conf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Interval between consecutive health checks.
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Maximum time to wait for a health check response.
	Timeout *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Number of consecutive unhealthy checks before considering a host
	// unhealthy.
	UnhealthyThreshold uint32 `protobuf:"varint,3,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// Number of consecutive healthy checks before considering a host healthy.
	HealthyThreshold uint32 `protobuf:"varint,4,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// If specified, Envoy will start health checking after for a random time in
	// ms between 0 and initial_jitter. This only applies to the first health
	// check.
	InitialJitter *durationpb.Duration `protobuf:"bytes,7,opt,name=initial_jitter,json=initialJitter,proto3" json:"initial_jitter,omitempty"`
	// If specified, during every interval Envoy will add interval_jitter to the
	// wait time.
	IntervalJitter *durationpb.Duration `protobuf:"bytes,8,opt,name=interval_jitter,json=intervalJitter,proto3" json:"interval_jitter,omitempty"`
	// If specified, during every interval Envoy will add interval_ms *
	// interval_jitter_percent / 100 to the wait time. If interval_jitter_ms and
	// interval_jitter_percent are both set, both of them will be used to
	// increase the wait time.
	IntervalJitterPercent uint32 `protobuf:"varint,9,opt,name=interval_jitter_percent,json=intervalJitterPercent,proto3" json:"interval_jitter_percent,omitempty"`
	// Allows to configure panic threshold for Envoy cluster. If not specified,
	// the default is 50%. To disable panic mode, set to 0%.
	HealthyPanicThreshold *wrapperspb.FloatValue `protobuf:"bytes,10,opt,name=healthy_panic_threshold,json=healthyPanicThreshold,proto3" json:"healthy_panic_threshold,omitempty"`
	// If set to true, Envoy will not consider any hosts when the cluster is in
	// 'panic mode'. Instead, the cluster will fail all requests as if all hosts
	// are unhealthy. This can help avoid potentially overwhelming a failing
	// service.
	FailTrafficOnPanic *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=fail_traffic_on_panic,json=failTrafficOnPanic,proto3" json:"fail_traffic_on_panic,omitempty"`
	// Specifies the path to the file where Envoy can log health check events.
	// If empty, no event log will be written.
	EventLogPath string `protobuf:"bytes,12,opt,name=event_log_path,json=eventLogPath,proto3" json:"event_log_path,omitempty"`
	// If set to true, health check failure events will always be logged. If set
	// to false, only the initial health check failure event will be logged. The
	// default value is false.
	AlwaysLogHealthCheckFailures *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=always_log_health_check_failures,json=alwaysLogHealthCheckFailures,proto3" json:"always_log_health_check_failures,omitempty"`
	// The "no traffic interval" is a special health check interval that is used
	// when a cluster has never had traffic routed to it. This lower interval
	// allows cluster information to be kept up to date, without sending a
	// potentially large amount of active health checking traffic for no reason.
	// Once a cluster has been used for traffic routing, Envoy will shift back
	// to using the standard health check interval that is defined. Note that
	// this interval takes precedence over any other. The default value for "no
	// traffic interval" is 60 seconds.
	NoTrafficInterval *durationpb.Duration   `protobuf:"bytes,14,opt,name=no_traffic_interval,json=noTrafficInterval,proto3" json:"no_traffic_interval,omitempty"`
	Tcp               *HealthCheck_Conf_Tcp  `protobuf:"bytes,5,opt,name=tcp,proto3" json:"tcp,omitempty"`
	Http              *HealthCheck_Conf_Http `protobuf:"bytes,6,opt,name=http,proto3" json:"http,omitempty"`
	// Reuse health check connection between health checks. Default is true.
	ReuseConnection *wrapperspb.BoolValue `protobuf:"bytes,15,opt,name=reuse_connection,json=reuseConnection,proto3" json:"reuse_connection,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HealthCheck_Conf) Reset() {
	*x = HealthCheck_Conf{}
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Conf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Conf) ProtoMessage() {}

func (x *HealthCheck_Conf) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Conf.ProtoReflect.Descriptor instead.
func (*HealthCheck_Conf) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_health_check_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HealthCheck_Conf) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *HealthCheck_Conf) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *HealthCheck_Conf) GetUnhealthyThreshold() uint32 {
	if x != nil {
		return x.UnhealthyThreshold
	}
	return 0
}

func (x *HealthCheck_Conf) GetHealthyThreshold() uint32 {
	if x != nil {
		return x.HealthyThreshold
	}
	return 0
}

func (x *HealthCheck_Conf) GetInitialJitter() *durationpb.Duration {
	if x != nil {
		return x.InitialJitter
	}
	return nil
}

func (x *HealthCheck_Conf) GetIntervalJitter() *durationpb.Duration {
	if x != nil {
		return x.IntervalJitter
	}
	return nil
}

func (x *HealthCheck_Conf) GetIntervalJitterPercent() uint32 {
	if x != nil {
		return x.IntervalJitterPercent
	}
	return 0
}

func (x *HealthCheck_Conf) GetHealthyPanicThreshold() *wrapperspb.FloatValue {
	if x != nil {
		return x.HealthyPanicThreshold
	}
	return nil
}

func (x *HealthCheck_Conf) GetFailTrafficOnPanic() *wrapperspb.BoolValue {
	if x != nil {
		return x.FailTrafficOnPanic
	}
	return nil
}

func (x *HealthCheck_Conf) GetEventLogPath() string {
	if x != nil {
		return x.EventLogPath
	}
	return ""
}

func (x *HealthCheck_Conf) GetAlwaysLogHealthCheckFailures() *wrapperspb.BoolValue {
	if x != nil {
		return x.AlwaysLogHealthCheckFailures
	}
	return nil
}

func (x *HealthCheck_Conf) GetNoTrafficInterval() *durationpb.Duration {
	if x != nil {
		return x.NoTrafficInterval
	}
	return nil
}

func (x *HealthCheck_Conf) GetTcp() *HealthCheck_Conf_Tcp {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *HealthCheck_Conf) GetHttp() *HealthCheck_Conf_Http {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *HealthCheck_Conf) GetReuseConnection() *wrapperspb.BoolValue {
	if x != nil {
		return x.ReuseConnection
	}
	return nil
}

// Tcp defines optional configuration for specifying bytes to send and
// expected response during the health check
type HealthCheck_Conf_Tcp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Bytes which will be send during the health check to the target
	Send *wrapperspb.BytesValue `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	// Bytes blocks expected as a response. When checking the response,
	// “fuzzy” matching is performed such that each block must be found, and
	// in the order specified, but not necessarily contiguous.
	Receive       []*wrapperspb.BytesValue `protobuf:"bytes,2,rep,name=receive,proto3" json:"receive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Conf_Tcp) Reset() {
	*x = HealthCheck_Conf_Tcp{}
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Conf_Tcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Conf_Tcp) ProtoMessage() {}

func (x *HealthCheck_Conf_Tcp) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Conf_Tcp.ProtoReflect.Descriptor instead.
func (*HealthCheck_Conf_Tcp) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_health_check_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *HealthCheck_Conf_Tcp) GetSend() *wrapperspb.BytesValue {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *HealthCheck_Conf_Tcp) GetReceive() []*wrapperspb.BytesValue {
	if x != nil {
		return x.Receive
	}
	return nil
}

// Http defines optional Http configuration which will instruct the service
// the health check will be made for is an http service. It's mutually
// exclusive with the Tcp block so when provided you can't provide
// the Tcp configuration
type HealthCheck_Conf_Http struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The HTTP path which will be requested during the health check
	// (ie. /health)
	//
	//	+required
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The list of HTTP headers which should be added to each health check
	// request
	//
	//	+optional
	RequestHeadersToAdd []*HealthCheck_Conf_Http_HeaderValueOption `protobuf:"bytes,2,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// List of HTTP response statuses which are considered healthy
	//
	//	+optional
	ExpectedStatuses []*wrapperspb.UInt32Value `protobuf:"bytes,3,rep,name=expected_statuses,json=expectedStatuses,proto3" json:"expected_statuses,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HealthCheck_Conf_Http) Reset() {
	*x = HealthCheck_Conf_Http{}
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Conf_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Conf_Http) ProtoMessage() {}

func (x *HealthCheck_Conf_Http) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Conf_Http.ProtoReflect.Descriptor instead.
func (*HealthCheck_Conf_Http) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_health_check_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *HealthCheck_Conf_Http) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HealthCheck_Conf_Http) GetRequestHeadersToAdd() []*HealthCheck_Conf_Http_HeaderValueOption {
	if x != nil {
		return x.RequestHeadersToAdd
	}
	return nil
}

func (x *HealthCheck_Conf_Http) GetExpectedStatuses() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.ExpectedStatuses
	}
	return nil
}

type HealthCheck_Conf_Http_HeaderValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Header name
	//
	//	+required
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Header value
	//
	//	+optional
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Conf_Http_HeaderValue) Reset() {
	*x = HealthCheck_Conf_Http_HeaderValue{}
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Conf_Http_HeaderValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Conf_Http_HeaderValue) ProtoMessage() {}

func (x *HealthCheck_Conf_Http_HeaderValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Conf_Http_HeaderValue.ProtoReflect.Descriptor instead.
func (*HealthCheck_Conf_Http_HeaderValue) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_health_check_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *HealthCheck_Conf_Http_HeaderValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HealthCheck_Conf_Http_HeaderValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HealthCheck_Conf_Http_HeaderValueOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Key/Value representation of the HTTP header
	//
	//	+required
	Header *HealthCheck_Conf_Http_HeaderValue `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The bool value which if true (default) will mean the header values
	// should be appended to already present ones
	//
	//	+optional
	Append        *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=append,proto3" json:"append,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Conf_Http_HeaderValueOption) Reset() {
	*x = HealthCheck_Conf_Http_HeaderValueOption{}
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Conf_Http_HeaderValueOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Conf_Http_HeaderValueOption) ProtoMessage() {}

func (x *HealthCheck_Conf_Http_HeaderValueOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_health_check_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Conf_Http_HeaderValueOption.ProtoReflect.Descriptor instead.
func (*HealthCheck_Conf_Http_HeaderValueOption) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_health_check_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *HealthCheck_Conf_Http_HeaderValueOption) GetHeader() *HealthCheck_Conf_Http_HeaderValue {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HealthCheck_Conf_Http_HeaderValueOption) GetAppend() *wrapperspb.BoolValue {
	if x != nil {
		return x.Append
	}
	return nil
}

var File_api_mesh_v1alpha1_health_check_proto protoreflect.FileDescriptor

const file_api_mesh_v1alpha1_health_check_proto_rawDesc = "" +
	"\n" +
	"$api/mesh/v1alpha1/health_check.proto\x12\x12kuma.mesh.v1alpha1\x1a\x16api/mesh/options.proto\x1a api/mesh/v1alpha1/selector.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x17validate/validate.proto\"\xcb\x0e\n" +
	"\vHealthCheck\x12@\n" +
	"\asources\x18\x01 \x03(\v2\x1c.kuma.mesh.v1alpha1.SelectorB\b\xfaB\x05\x92\x01\x02\b\x01R\asources\x12J\n" +
	"\fdestinations\x18\x02 \x03(\v2\x1c.kuma.mesh.v1alpha1.SelectorB\b\xfaB\x05\x92\x01\x02\b\x01R\fdestinations\x128\n" +
	"\x04conf\x18\x03 \x01(\v2$.kuma.mesh.v1alpha1.HealthCheck.ConfR\x04conf\x1a\x98\f\n" +
	"\x04Conf\x12A\n" +
	"\binterval\x18\x01 \x01(\v2\x19.google.protobuf.DurationB\n" +
	"\xfaB\a\xaa\x01\x04\b\x01*\x00R\binterval\x12?\n" +
	"\atimeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationB\n" +
	"\xfaB\a\xaa\x01\x04\b\x01*\x00R\atimeout\x128\n" +
	"\x13unhealthy_threshold\x18\x03 \x01(\rB\a\xfaB\x04*\x02 \x00R\x12unhealthyThreshold\x124\n" +
	"\x11healthy_threshold\x18\x04 \x01(\rB\a\xfaB\x04*\x02 \x00R\x10healthyThreshold\x12@\n" +
	"\x0einitial_jitter\x18\a \x01(\v2\x19.google.protobuf.DurationR\rinitialJitter\x12B\n" +
	"\x0finterval_jitter\x18\b \x01(\v2\x19.google.protobuf.DurationR\x0eintervalJitter\x126\n" +
	"\x17interval_jitter_percent\x18\t \x01(\rR\x15intervalJitterPercent\x12S\n" +
	"\x17healthy_panic_threshold\x18\n" +
	" \x01(\v2\x1b.google.protobuf.FloatValueR\x15healthyPanicThreshold\x12M\n" +
	"\x15fail_traffic_on_panic\x18\v \x01(\v2\x1a.google.protobuf.BoolValueR\x12failTrafficOnPanic\x12$\n" +
	"\x0eevent_log_path\x18\f \x01(\tR\feventLogPath\x12b\n" +
	" always_log_health_check_failures\x18\r \x01(\v2\x1a.google.protobuf.BoolValueR\x1calwaysLogHealthCheckFailures\x12I\n" +
	"\x13no_traffic_interval\x18\x0e \x01(\v2\x19.google.protobuf.DurationR\x11noTrafficInterval\x12:\n" +
	"\x03tcp\x18\x05 \x01(\v2(.kuma.mesh.v1alpha1.HealthCheck.Conf.TcpR\x03tcp\x12=\n" +
	"\x04http\x18\x06 \x01(\v2).kuma.mesh.v1alpha1.HealthCheck.Conf.HttpR\x04http\x12E\n" +
	"\x10reuse_connection\x18\x0f \x01(\v2\x1a.google.protobuf.BoolValueR\x0freuseConnection\x1am\n" +
	"\x03Tcp\x12/\n" +
	"\x04send\x18\x01 \x01(\v2\x1b.google.protobuf.BytesValueR\x04send\x125\n" +
	"\areceive\x18\x02 \x03(\v2\x1b.google.protobuf.BytesValueR\areceive\x1a\xb3\x03\n" +
	"\x04Http\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12p\n" +
	"\x16request_headers_to_add\x18\x02 \x03(\v2;.kuma.mesh.v1alpha1.HealthCheck.Conf.Http.HeaderValueOptionR\x13requestHeadersToAdd\x12U\n" +
	"\x11expected_statuses\x18\x03 \x03(\v2\x1c.google.protobuf.UInt32ValueB\n" +
	"\xfaB\a*\x05\x10\xd8\x04(dR\x10expectedStatuses\x1a5\n" +
	"\vHeaderValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x1a\x96\x01\n" +
	"\x11HeaderValueOption\x12M\n" +
	"\x06header\x18\x01 \x01(\v25.kuma.mesh.v1alpha1.HealthCheck.Conf.Http.HeaderValueR\x06header\x122\n" +
	"\x06append\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x06append:Y\xaa\x8c\x89\xa6\x01S\n" +
	"\x13HealthCheckResource\x12\vHealthCheck\"\x04mesh:\x0e\n" +
	"\fhealth-checkR\x17model.GlobalToZonesFlagh\x01B*Z(github.com/kumahq/kuma/api/mesh/v1alpha1b\x06proto3"

var (
	file_api_mesh_v1alpha1_health_check_proto_rawDescOnce sync.Once
	file_api_mesh_v1alpha1_health_check_proto_rawDescData []byte
)

func file_api_mesh_v1alpha1_health_check_proto_rawDescGZIP() []byte {
	file_api_mesh_v1alpha1_health_check_proto_rawDescOnce.Do(func() {
		file_api_mesh_v1alpha1_health_check_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_mesh_v1alpha1_health_check_proto_rawDesc), len(file_api_mesh_v1alpha1_health_check_proto_rawDesc)))
	})
	return file_api_mesh_v1alpha1_health_check_proto_rawDescData
}

var file_api_mesh_v1alpha1_health_check_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_api_mesh_v1alpha1_health_check_proto_goTypes = []any{
	(*HealthCheck)(nil),                             // 0: kuma.mesh.v1alpha1.HealthCheck
	(*HealthCheck_Conf)(nil),                        // 1: kuma.mesh.v1alpha1.HealthCheck.Conf
	(*HealthCheck_Conf_Tcp)(nil),                    // 2: kuma.mesh.v1alpha1.HealthCheck.Conf.Tcp
	(*HealthCheck_Conf_Http)(nil),                   // 3: kuma.mesh.v1alpha1.HealthCheck.Conf.Http
	(*HealthCheck_Conf_Http_HeaderValue)(nil),       // 4: kuma.mesh.v1alpha1.HealthCheck.Conf.Http.HeaderValue
	(*HealthCheck_Conf_Http_HeaderValueOption)(nil), // 5: kuma.mesh.v1alpha1.HealthCheck.Conf.Http.HeaderValueOption
	(*Selector)(nil),                                // 6: kuma.mesh.v1alpha1.Selector
	(*durationpb.Duration)(nil),                     // 7: google.protobuf.Duration
	(*wrapperspb.FloatValue)(nil),                   // 8: google.protobuf.FloatValue
	(*wrapperspb.BoolValue)(nil),                    // 9: google.protobuf.BoolValue
	(*wrapperspb.BytesValue)(nil),                   // 10: google.protobuf.BytesValue
	(*wrapperspb.UInt32Value)(nil),                  // 11: google.protobuf.UInt32Value
}
var file_api_mesh_v1alpha1_health_check_proto_depIdxs = []int32{
	6,  // 0: kuma.mesh.v1alpha1.HealthCheck.sources:type_name -> kuma.mesh.v1alpha1.Selector
	6,  // 1: kuma.mesh.v1alpha1.HealthCheck.destinations:type_name -> kuma.mesh.v1alpha1.Selector
	1,  // 2: kuma.mesh.v1alpha1.HealthCheck.conf:type_name -> kuma.mesh.v1alpha1.HealthCheck.Conf
	7,  // 3: kuma.mesh.v1alpha1.HealthCheck.Conf.interval:type_name -> google.protobuf.Duration
	7,  // 4: kuma.mesh.v1alpha1.HealthCheck.Conf.timeout:type_name -> google.protobuf.Duration
	7,  // 5: kuma.mesh.v1alpha1.HealthCheck.Conf.initial_jitter:type_name -> google.protobuf.Duration
	7,  // 6: kuma.mesh.v1alpha1.HealthCheck.Conf.interval_jitter:type_name -> google.protobuf.Duration
	8,  // 7: kuma.mesh.v1alpha1.HealthCheck.Conf.healthy_panic_threshold:type_name -> google.protobuf.FloatValue
	9,  // 8: kuma.mesh.v1alpha1.HealthCheck.Conf.fail_traffic_on_panic:type_name -> google.protobuf.BoolValue
	9,  // 9: kuma.mesh.v1alpha1.HealthCheck.Conf.always_log_health_check_failures:type_name -> google.protobuf.BoolValue
	7,  // 10: kuma.mesh.v1alpha1.HealthCheck.Conf.no_traffic_interval:type_name -> google.protobuf.Duration
	2,  // 11: kuma.mesh.v1alpha1.HealthCheck.Conf.tcp:type_name -> kuma.mesh.v1alpha1.HealthCheck.Conf.Tcp
	3,  // 12: kuma.mesh.v1alpha1.HealthCheck.Conf.http:type_name -> kuma.mesh.v1alpha1.HealthCheck.Conf.Http
	9,  // 13: kuma.mesh.v1alpha1.HealthCheck.Conf.reuse_connection:type_name -> google.protobuf.BoolValue
	10, // 14: kuma.mesh.v1alpha1.HealthCheck.Conf.Tcp.send:type_name -> google.protobuf.BytesValue
	10, // 15: kuma.mesh.v1alpha1.HealthCheck.Conf.Tcp.receive:type_name -> google.protobuf.BytesValue
	5,  // 16: kuma.mesh.v1alpha1.HealthCheck.Conf.Http.request_headers_to_add:type_name -> kuma.mesh.v1alpha1.HealthCheck.Conf.Http.HeaderValueOption
	11, // 17: kuma.mesh.v1alpha1.HealthCheck.Conf.Http.expected_statuses:type_name -> google.protobuf.UInt32Value
	4,  // 18: kuma.mesh.v1alpha1.HealthCheck.Conf.Http.HeaderValueOption.header:type_name -> kuma.mesh.v1alpha1.HealthCheck.Conf.Http.HeaderValue
	9,  // 19: kuma.mesh.v1alpha1.HealthCheck.Conf.Http.HeaderValueOption.append:type_name -> google.protobuf.BoolValue
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_api_mesh_v1alpha1_health_check_proto_init() }
func file_api_mesh_v1alpha1_health_check_proto_init() {
	if File_api_mesh_v1alpha1_health_check_proto != nil {
		return
	}
	file_api_mesh_v1alpha1_selector_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_mesh_v1alpha1_health_check_proto_rawDesc), len(file_api_mesh_v1alpha1_health_check_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_mesh_v1alpha1_health_check_proto_goTypes,
		DependencyIndexes: file_api_mesh_v1alpha1_health_check_proto_depIdxs,
		MessageInfos:      file_api_mesh_v1alpha1_health_check_proto_msgTypes,
	}.Build()
	File_api_mesh_v1alpha1_health_check_proto = out.File
	file_api_mesh_v1alpha1_health_check_proto_goTypes = nil
	file_api_mesh_v1alpha1_health_check_proto_depIdxs = nil
}
