// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesh/v1alpha1/health_check.proto

package v1alpha1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// HealthCheck defines configuration for health checking.
type HealthCheck struct {
	// List of selectors to match dataplanes that should be configured to do
	// health checks.
	Sources []*Selector `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// List of selectors to match services that need to be health checked.
	Destinations []*Selector `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Configuration for various types of health checking.
	Conf                 *HealthCheck_Conf `protobuf:"bytes,3,opt,name=conf,proto3" json:"conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4f9382814224e98, []int{0}
}

func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(m, src)
}
func (m *HealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck.Size(m)
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

func (m *HealthCheck) GetSources() []*Selector {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *HealthCheck) GetDestinations() []*Selector {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *HealthCheck) GetConf() *HealthCheck_Conf {
	if m != nil {
		return m.Conf
	}
	return nil
}

// Conf defines configuration for various types of health checking.
type HealthCheck_Conf struct {
	// Configuration for active health checking.
	ActiveChecks         *HealthCheck_Conf_Active `protobuf:"bytes,1,opt,name=active_checks,json=activeChecks,proto3" json:"active_checks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HealthCheck_Conf) Reset()         { *m = HealthCheck_Conf{} }
func (m *HealthCheck_Conf) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_Conf) ProtoMessage()    {}
func (*HealthCheck_Conf) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4f9382814224e98, []int{0, 0}
}

func (m *HealthCheck_Conf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_Conf.Unmarshal(m, b)
}
func (m *HealthCheck_Conf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_Conf.Marshal(b, m, deterministic)
}
func (m *HealthCheck_Conf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_Conf.Merge(m, src)
}
func (m *HealthCheck_Conf) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_Conf.Size(m)
}
func (m *HealthCheck_Conf) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_Conf.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_Conf proto.InternalMessageInfo

func (m *HealthCheck_Conf) GetActiveChecks() *HealthCheck_Conf_Active {
	if m != nil {
		return m.ActiveChecks
	}
	return nil
}

// Active defines configuration for active health checking.
type HealthCheck_Conf_Active struct {
	// Interval between consecutive health checks.
	Interval *duration.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Maximum time to wait for a health check response.
	Timeout *duration.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Number of consecutive unhealthy checks before considering a host
	// unhealthy.
	UnhealthyThreshold uint32 `protobuf:"varint,3,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// Number of consecutive healthy checks before considering a host healthy.
	HealthyThreshold     uint32   `protobuf:"varint,4,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheck_Conf_Active) Reset()         { *m = HealthCheck_Conf_Active{} }
func (m *HealthCheck_Conf_Active) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_Conf_Active) ProtoMessage()    {}
func (*HealthCheck_Conf_Active) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4f9382814224e98, []int{0, 0, 0}
}

func (m *HealthCheck_Conf_Active) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_Conf_Active.Unmarshal(m, b)
}
func (m *HealthCheck_Conf_Active) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_Conf_Active.Marshal(b, m, deterministic)
}
func (m *HealthCheck_Conf_Active) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_Conf_Active.Merge(m, src)
}
func (m *HealthCheck_Conf_Active) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_Conf_Active.Size(m)
}
func (m *HealthCheck_Conf_Active) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_Conf_Active.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_Conf_Active proto.InternalMessageInfo

func (m *HealthCheck_Conf_Active) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *HealthCheck_Conf_Active) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HealthCheck_Conf_Active) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *HealthCheck_Conf_Active) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

// Passive defines configuration for passive health checking.
type HealthCheck_Conf_Passive struct {
	// Number of consecutive failed requests before considering a host
	// unhealthy.
	UnhealthyThreshold uint32 `protobuf:"varint,1,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// Interval a host should be considred unhealthy after reaching unhealthy
	// threshold.
	PenaltyInterval      *duration.Duration `protobuf:"bytes,2,opt,name=penalty_interval,json=penaltyInterval,proto3" json:"penalty_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HealthCheck_Conf_Passive) Reset()         { *m = HealthCheck_Conf_Passive{} }
func (m *HealthCheck_Conf_Passive) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_Conf_Passive) ProtoMessage()    {}
func (*HealthCheck_Conf_Passive) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4f9382814224e98, []int{0, 0, 1}
}

func (m *HealthCheck_Conf_Passive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_Conf_Passive.Unmarshal(m, b)
}
func (m *HealthCheck_Conf_Passive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_Conf_Passive.Marshal(b, m, deterministic)
}
func (m *HealthCheck_Conf_Passive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_Conf_Passive.Merge(m, src)
}
func (m *HealthCheck_Conf_Passive) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_Conf_Passive.Size(m)
}
func (m *HealthCheck_Conf_Passive) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_Conf_Passive.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_Conf_Passive proto.InternalMessageInfo

func (m *HealthCheck_Conf_Passive) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

func (m *HealthCheck_Conf_Passive) GetPenaltyInterval() *duration.Duration {
	if m != nil {
		return m.PenaltyInterval
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthCheck)(nil), "kuma.mesh.v1alpha1.HealthCheck")
	proto.RegisterType((*HealthCheck_Conf)(nil), "kuma.mesh.v1alpha1.HealthCheck.Conf")
	proto.RegisterType((*HealthCheck_Conf_Active)(nil), "kuma.mesh.v1alpha1.HealthCheck.Conf.Active")
	proto.RegisterType((*HealthCheck_Conf_Passive)(nil), "kuma.mesh.v1alpha1.HealthCheck.Conf.Passive")
}

func init() { proto.RegisterFile("mesh/v1alpha1/health_check.proto", fileDescriptor_a4f9382814224e98) }

var fileDescriptor_a4f9382814224e98 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0xe7, 0x34, 0x5b, 0xa2, 0x7f, 0x37, 0x31, 0xcc, 0x81, 0x10, 0x4d, 0x28, 0x42, 0x1c,
	0xa6, 0x21, 0x39, 0xda, 0xe0, 0xb0, 0x1b, 0x2c, 0xe5, 0x00, 0x9c, 0xaa, 0xc0, 0x89, 0x4b, 0xe5,
	0x26, 0x6e, 0x13, 0xd5, 0x8d, 0x23, 0xdb, 0x09, 0xea, 0x6b, 0x20, 0xf1, 0x12, 0xbc, 0x08, 0x8f,
	0xc3, 0xbd, 0xe2, 0x80, 0xe2, 0x24, 0x15, 0xa5, 0x54, 0xac, 0xb7, 0x58, 0xdf, 0xff, 0xf7, 0xf9,
	0xfb, 0xfb, 0x0b, 0x04, 0x4b, 0xa6, 0xb2, 0xb0, 0xbe, 0xa6, 0xbc, 0xcc, 0xe8, 0x75, 0x98, 0x31,
	0xca, 0x75, 0x36, 0x49, 0x32, 0x96, 0x2c, 0x48, 0x29, 0x85, 0x16, 0x18, 0x2f, 0xaa, 0x25, 0x25,
	0xcd, 0x18, 0xe9, 0xc7, 0xfc, 0x8b, 0x6d, 0x4a, 0x31, 0xce, 0x12, 0x2d, 0x64, 0x4b, 0xf8, 0x4f,
	0xe7, 0x42, 0xcc, 0x39, 0x0b, 0xcd, 0x69, 0x5a, 0xcd, 0xc2, 0xb4, 0x92, 0x54, 0xe7, 0xa2, 0xd8,
	0xa7, 0x7f, 0x91, 0xb4, 0x2c, 0x99, 0x54, 0x9d, 0xfe, 0xb8, 0xa6, 0x3c, 0x4f, 0xa9, 0x66, 0x61,
	0xff, 0xd1, 0x0a, 0xcf, 0x7e, 0x1c, 0xc3, 0xf0, 0x9d, 0x49, 0x38, 0x6a, 0x02, 0xe2, 0x37, 0xe0,
	0x28, 0x51, 0xc9, 0x84, 0x29, 0x0f, 0x05, 0x83, 0xcb, 0xe1, 0xcd, 0x05, 0xd9, 0x0d, 0x4b, 0x3e,
	0x76, 0xe9, 0x22, 0x77, 0x1d, 0x1d, 0x7f, 0x45, 0x96, 0x8b, 0xe2, 0x1e, 0xc3, 0x1f, 0xe0, 0x34,
	0x65, 0x4a, 0xe7, 0x85, 0xc9, 0xa7, 0x3c, 0xeb, 0x20, 0x9b, 0x2d, 0x16, 0xdf, 0x82, 0x9d, 0x88,
	0x62, 0xe6, 0x0d, 0x02, 0x74, 0x39, 0xbc, 0x79, 0xfe, 0x2f, 0x8f, 0x3f, 0xc2, 0x93, 0x91, 0x28,
	0x66, 0xb1, 0x21, 0xfc, 0x9f, 0x03, 0xb0, 0x9b, 0x23, 0x1e, 0xc3, 0x19, 0x4d, 0x74, 0x5e, 0xb3,
	0xb6, 0x81, 0x66, 0xad, 0xc6, 0xeb, 0xc5, 0x7d, 0xbc, 0xc8, 0x9d, 0x21, 0xe3, 0xd3, 0xd6, 0xc1,
	0x08, 0xca, 0xff, 0x85, 0xe0, 0xa4, 0x15, 0xf0, 0x1d, 0xb8, 0x79, 0xa1, 0x99, 0xac, 0x29, 0xef,
	0x7c, 0x9f, 0x90, 0xb6, 0x09, 0xd2, 0x37, 0x41, 0xde, 0x76, 0x4d, 0x45, 0xb0, 0x8e, 0x9c, 0xef,
	0xc8, 0x76, 0xd1, 0xd5, 0x51, 0xbc, 0xc1, 0xf0, 0x6b, 0x70, 0x74, 0xbe, 0x64, 0xa2, 0xd2, 0x9e,
	0x75, 0x88, 0x43, 0x4f, 0xe1, 0x5b, 0x78, 0x54, 0x15, 0xed, 0x4f, 0xb6, 0x9a, 0xe8, 0x4c, 0x32,
	0x95, 0x09, 0x9e, 0x9a, 0x27, 0x3b, 0x8b, 0x9c, 0x75, 0x64, 0x5f, 0x59, 0xc1, 0x51, 0x8c, 0x37,
	0x33, 0x9f, 0xfa, 0x11, 0xfc, 0x0a, 0x1e, 0xee, 0x72, 0xf6, 0x36, 0x77, 0xfe, 0x37, 0xe5, 0x7f,
	0x43, 0xe0, 0x8c, 0xa9, 0x52, 0xcd, 0xfe, 0x7b, 0xee, 0x46, 0xff, 0xbf, 0x7b, 0x0c, 0xe7, 0x25,
	0x2b, 0x28, 0xd7, 0xab, 0xc9, 0xe6, 0x05, 0x0f, 0xda, 0xff, 0x41, 0x87, 0xbf, 0xef, 0xe8, 0x08,
	0x3e, 0xbb, 0x7d, 0x91, 0xd3, 0x13, 0xc3, 0xbe, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x27, 0x55,
	0x8a, 0x9a, 0x8b, 0x03, 0x00, 0x00,
}
