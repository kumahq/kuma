// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesh/v1alpha1/mux.proto

package v1alpha1

import (
	context "context"
	fmt "fmt"
	v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	// Types that are valid to be assigned to Value:
	//	*Message_Request
	//	*Message_Response
	Value                isMessage_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_df76defa729b08eb, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Value interface {
	isMessage_Value()
}

type Message_Request struct {
	Request *v2.DiscoveryRequest `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

type Message_Response struct {
	Response *v2.DiscoveryResponse `protobuf:"bytes,2,opt,name=response,proto3,oneof"`
}

func (*Message_Request) isMessage_Value() {}

func (*Message_Response) isMessage_Value() {}

func (m *Message) GetValue() isMessage_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Message) GetRequest() *v2.DiscoveryRequest {
	if x, ok := m.GetValue().(*Message_Request); ok {
		return x.Request
	}
	return nil
}

func (m *Message) GetResponse() *v2.DiscoveryResponse {
	if x, ok := m.GetValue().(*Message_Response); ok {
		return x.Response
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Request)(nil),
		(*Message_Response)(nil),
	}
}

func init() {
	proto.RegisterType((*Message)(nil), "kuma.mesh.v1alpha1.Message")
}

func init() { proto.RegisterFile("mesh/v1alpha1/mux.proto", fileDescriptor_df76defa729b08eb) }

var fileDescriptor_df76defa729b08eb = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd0, 0x3f, 0x4b, 0x03, 0x31,
	0x18, 0xc7, 0xf1, 0x46, 0xd0, 0x2b, 0x8f, 0x08, 0x92, 0xc5, 0x52, 0x45, 0xc5, 0xa9, 0xd3, 0x13,
	0x7b, 0x6e, 0x82, 0x4b, 0x71, 0xe8, 0x72, 0xcb, 0x75, 0x73, 0x7b, 0xac, 0x0f, 0x36, 0x78, 0x69,
	0x62, 0xfe, 0xd1, 0xbe, 0x08, 0xdf, 0xb3, 0x78, 0x67, 0x5c, 0x44, 0xd7, 0x7c, 0x7f, 0x1f, 0x48,
	0x02, 0x67, 0x86, 0xc3, 0x46, 0xe5, 0x39, 0x75, 0x6e, 0x43, 0x73, 0x65, 0xd2, 0x0e, 0x9d, 0xb7,
	0xd1, 0x4a, 0xf9, 0x96, 0x0c, 0xe1, 0x57, 0xc5, 0x52, 0xa7, 0x17, 0xbc, 0xcd, 0x76, 0xaf, 0xc8,
	0x69, 0x95, 0x6b, 0xf5, 0xa2, 0xc3, 0xda, 0x66, 0xf6, 0xfb, 0x41, 0xdc, 0x7c, 0x08, 0xa8, 0x1a,
	0x0e, 0x81, 0x5e, 0x59, 0xde, 0x43, 0xe5, 0xf9, 0x3d, 0x71, 0x88, 0x13, 0x71, 0x2d, 0x66, 0xc7,
	0xf5, 0x25, 0xf6, 0x16, 0xc9, 0x69, 0xcc, 0x35, 0x3e, 0x16, 0xdb, 0x0e, 0xab, 0xe5, 0xa8, 0x2d,
	0x40, 0x3e, 0xc0, 0xd8, 0x73, 0x70, 0x76, 0x1b, 0x78, 0x72, 0xd0, 0xe3, 0xab, 0x3f, 0xf1, 0x30,
	0x5b, 0x8e, 0xda, 0x1f, 0xb2, 0xa8, 0xe0, 0x30, 0x53, 0x97, 0xb8, 0x26, 0x38, 0x6d, 0x52, 0x17,
	0xb5, 0xeb, 0x78, 0xb7, 0x62, 0x9f, 0xf5, 0x9a, 0x65, 0x03, 0x27, 0xab, 0xe8, 0x99, 0x4c, 0xb9,
	0xe8, 0x39, 0xfe, 0x7e, 0x27, 0x7e, 0xc7, 0xe9, 0x7f, 0x71, 0x26, 0x6e, 0xc5, 0x02, 0x9e, 0xc6,
	0xe5, 0xfc, 0xf9, 0xa8, 0xff, 0x85, 0xbb, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0x2e, 0xd9,
	0x88, 0x52, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MultiplexServiceClient is the client API for MultiplexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MultiplexServiceClient interface {
	StreamMessage(ctx context.Context, opts ...grpc.CallOption) (MultiplexService_StreamMessageClient, error)
}

type multiplexServiceClient struct {
	cc *grpc.ClientConn
}

func NewMultiplexServiceClient(cc *grpc.ClientConn) MultiplexServiceClient {
	return &multiplexServiceClient{cc}
}

func (c *multiplexServiceClient) StreamMessage(ctx context.Context, opts ...grpc.CallOption) (MultiplexService_StreamMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MultiplexService_serviceDesc.Streams[0], "/kuma.mesh.v1alpha1.MultiplexService/StreamMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiplexServiceStreamMessageClient{stream}
	return x, nil
}

type MultiplexService_StreamMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type multiplexServiceStreamMessageClient struct {
	grpc.ClientStream
}

func (x *multiplexServiceStreamMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multiplexServiceStreamMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultiplexServiceServer is the server API for MultiplexService service.
type MultiplexServiceServer interface {
	StreamMessage(MultiplexService_StreamMessageServer) error
}

// UnimplementedMultiplexServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMultiplexServiceServer struct {
}

func (*UnimplementedMultiplexServiceServer) StreamMessage(srv MultiplexService_StreamMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessage not implemented")
}

func RegisterMultiplexServiceServer(s *grpc.Server, srv MultiplexServiceServer) {
	s.RegisterService(&_MultiplexService_serviceDesc, srv)
}

func _MultiplexService_StreamMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MultiplexServiceServer).StreamMessage(&multiplexServiceStreamMessageServer{stream})
}

type MultiplexService_StreamMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type multiplexServiceStreamMessageServer struct {
	grpc.ServerStream
}

func (x *multiplexServiceStreamMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multiplexServiceStreamMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MultiplexService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kuma.mesh.v1alpha1.MultiplexService",
	HandlerType: (*MultiplexServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessage",
			Handler:       _MultiplexService_StreamMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mesh/v1alpha1/mux.proto",
}
