// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.0
// source: mesh/v1alpha1/rate_limit.proto

package v1alpha1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/kumahq/kuma/api/mesh"
	_ "github.com/kumahq/protoc-gen-kumadoc/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of selectors to match dataplanes that rate limit will be applied for
	Sources []*Selector `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// List of selectors to match services that need to be rate limited.
	Destinations []*Selector `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Configuration for RateLimit
	// +required
	Conf *RateLimit_Conf `protobuf:"bytes,3,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (x *RateLimit) Reset() {
	*x = RateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_rate_limit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit) ProtoMessage() {}

func (x *RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_rate_limit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit.ProtoReflect.Descriptor instead.
func (*RateLimit) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_rate_limit_proto_rawDescGZIP(), []int{0}
}

func (x *RateLimit) GetSources() []*Selector {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *RateLimit) GetDestinations() []*Selector {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *RateLimit) GetConf() *RateLimit_Conf {
	if x != nil {
		return x.Conf
	}
	return nil
}

type RateLimit_Conf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP RateLimit configuration
	// +optional
	Http *RateLimit_Conf_Http `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
}

func (x *RateLimit_Conf) Reset() {
	*x = RateLimit_Conf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_rate_limit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimit_Conf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit_Conf) ProtoMessage() {}

func (x *RateLimit_Conf) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_rate_limit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit_Conf.ProtoReflect.Descriptor instead.
func (*RateLimit_Conf) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_rate_limit_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RateLimit_Conf) GetHttp() *RateLimit_Conf_Http {
	if x != nil {
		return x.Http
	}
	return nil
}

type RateLimit_Conf_Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of HTTP requests this RateLimiter allows
	// +required
	Requests uint32 `protobuf:"varint,1,opt,name=requests,proto3" json:"requests,omitempty"`
	// The the interval for which `requests` will be accounted.
	// +required
	Interval *durationpb.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// Describes the actions to take on RatelLimiter event
	// +optional
	OnRateLimit *RateLimit_Conf_Http_OnRateLimit `protobuf:"bytes,3,opt,name=onRateLimit,proto3" json:"onRateLimit,omitempty"`
}

func (x *RateLimit_Conf_Http) Reset() {
	*x = RateLimit_Conf_Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_rate_limit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimit_Conf_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit_Conf_Http) ProtoMessage() {}

func (x *RateLimit_Conf_Http) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_rate_limit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit_Conf_Http.ProtoReflect.Descriptor instead.
func (*RateLimit_Conf_Http) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_rate_limit_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *RateLimit_Conf_Http) GetRequests() uint32 {
	if x != nil {
		return x.Requests
	}
	return 0
}

func (x *RateLimit_Conf_Http) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *RateLimit_Conf_Http) GetOnRateLimit() *RateLimit_Conf_Http_OnRateLimit {
	if x != nil {
		return x.OnRateLimit
	}
	return nil
}

type RateLimit_Conf_Http_OnRateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP status code to be set on a RateLimit event
	// +optional
	Status *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The Headers to be added to the HTTP response on a RateLimit event
	// +optional
	Headers []*RateLimit_Conf_Http_OnRateLimit_HeaderValue `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *RateLimit_Conf_Http_OnRateLimit) Reset() {
	*x = RateLimit_Conf_Http_OnRateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_rate_limit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimit_Conf_Http_OnRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit_Conf_Http_OnRateLimit) ProtoMessage() {}

func (x *RateLimit_Conf_Http_OnRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_rate_limit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit_Conf_Http_OnRateLimit.ProtoReflect.Descriptor instead.
func (*RateLimit_Conf_Http_OnRateLimit) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_rate_limit_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *RateLimit_Conf_Http_OnRateLimit) GetStatus() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RateLimit_Conf_Http_OnRateLimit) GetHeaders() []*RateLimit_Conf_Http_OnRateLimit_HeaderValue {
	if x != nil {
		return x.Headers
	}
	return nil
}

type RateLimit_Conf_Http_OnRateLimit_HeaderValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header name
	// +optional
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Header value
	// +optional
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Should the header be appended
	// +optional
	Append *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=append,proto3" json:"append,omitempty"`
}

func (x *RateLimit_Conf_Http_OnRateLimit_HeaderValue) Reset() {
	*x = RateLimit_Conf_Http_OnRateLimit_HeaderValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_rate_limit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimit_Conf_Http_OnRateLimit_HeaderValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit_Conf_Http_OnRateLimit_HeaderValue) ProtoMessage() {}

func (x *RateLimit_Conf_Http_OnRateLimit_HeaderValue) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_rate_limit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit_Conf_Http_OnRateLimit_HeaderValue.ProtoReflect.Descriptor instead.
func (*RateLimit_Conf_Http_OnRateLimit_HeaderValue) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_rate_limit_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *RateLimit_Conf_Http_OnRateLimit_HeaderValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RateLimit_Conf_Http_OnRateLimit_HeaderValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *RateLimit_Conf_Http_OnRateLimit_HeaderValue) GetAppend() *wrapperspb.BoolValue {
	if x != nil {
		return x.Append
	}
	return nil
}

var File_mesh_v1alpha1_rate_limit_proto protoreflect.FileDescriptor

var file_mesh_v1alpha1_rate_limit_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x12, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x6b, 0x75, 0x6d, 0x61, 0x2d, 0x64, 0x6f, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x06, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x0c, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x88, 0xb5, 0x18,
	0x01, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0c,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f,
	0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x42, 0x04, 0x88, 0xb5,
	0x18, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x1a, 0x8e, 0x04, 0x0a, 0x04, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x3b, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x1a, 0xc8,
	0x03, 0x0a, 0x04, 0x48, 0x74, 0x74, 0x70, 0x12, 0x20, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x0b, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x75,
	0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x2e, 0x4f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x0b, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x89, 0x02,
	0x0a, 0x0b, 0x4f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x2e, 0x4f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x69,
	0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x3a, 0x5c, 0xaa, 0x8c, 0x89, 0xa6, 0x01,
	0x13, 0x0a, 0x11, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x0b, 0x12, 0x09, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x06, 0x22, 0x04, 0x6d, 0x65, 0x73,
	0x68, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x04, 0x52, 0x02, 0x10, 0x01, 0xaa, 0x8c, 0x89, 0xa6, 0x01,
	0x0e, 0x3a, 0x0c, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0xaa,
	0x8c, 0x89, 0xa6, 0x01, 0x02, 0x68, 0x01, 0x42, 0x49, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x6d, 0x61, 0x68, 0x71, 0x2f, 0x6b, 0x75, 0x6d,
	0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x8a, 0xb5, 0x18, 0x1b, 0x50, 0x01, 0xa2, 0x01, 0x09, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0xf2, 0x01, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mesh_v1alpha1_rate_limit_proto_rawDescOnce sync.Once
	file_mesh_v1alpha1_rate_limit_proto_rawDescData = file_mesh_v1alpha1_rate_limit_proto_rawDesc
)

func file_mesh_v1alpha1_rate_limit_proto_rawDescGZIP() []byte {
	file_mesh_v1alpha1_rate_limit_proto_rawDescOnce.Do(func() {
		file_mesh_v1alpha1_rate_limit_proto_rawDescData = protoimpl.X.CompressGZIP(file_mesh_v1alpha1_rate_limit_proto_rawDescData)
	})
	return file_mesh_v1alpha1_rate_limit_proto_rawDescData
}

var file_mesh_v1alpha1_rate_limit_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_mesh_v1alpha1_rate_limit_proto_goTypes = []interface{}{
	(*RateLimit)(nil),                                   // 0: kuma.mesh.v1alpha1.RateLimit
	(*RateLimit_Conf)(nil),                              // 1: kuma.mesh.v1alpha1.RateLimit.Conf
	(*RateLimit_Conf_Http)(nil),                         // 2: kuma.mesh.v1alpha1.RateLimit.Conf.Http
	(*RateLimit_Conf_Http_OnRateLimit)(nil),             // 3: kuma.mesh.v1alpha1.RateLimit.Conf.Http.OnRateLimit
	(*RateLimit_Conf_Http_OnRateLimit_HeaderValue)(nil), // 4: kuma.mesh.v1alpha1.RateLimit.Conf.Http.OnRateLimit.HeaderValue
	(*Selector)(nil),                                    // 5: kuma.mesh.v1alpha1.Selector
	(*durationpb.Duration)(nil),                         // 6: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil),                      // 7: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),                        // 8: google.protobuf.BoolValue
}
var file_mesh_v1alpha1_rate_limit_proto_depIdxs = []int32{
	5, // 0: kuma.mesh.v1alpha1.RateLimit.sources:type_name -> kuma.mesh.v1alpha1.Selector
	5, // 1: kuma.mesh.v1alpha1.RateLimit.destinations:type_name -> kuma.mesh.v1alpha1.Selector
	1, // 2: kuma.mesh.v1alpha1.RateLimit.conf:type_name -> kuma.mesh.v1alpha1.RateLimit.Conf
	2, // 3: kuma.mesh.v1alpha1.RateLimit.Conf.http:type_name -> kuma.mesh.v1alpha1.RateLimit.Conf.Http
	6, // 4: kuma.mesh.v1alpha1.RateLimit.Conf.Http.interval:type_name -> google.protobuf.Duration
	3, // 5: kuma.mesh.v1alpha1.RateLimit.Conf.Http.onRateLimit:type_name -> kuma.mesh.v1alpha1.RateLimit.Conf.Http.OnRateLimit
	7, // 6: kuma.mesh.v1alpha1.RateLimit.Conf.Http.OnRateLimit.status:type_name -> google.protobuf.UInt32Value
	4, // 7: kuma.mesh.v1alpha1.RateLimit.Conf.Http.OnRateLimit.headers:type_name -> kuma.mesh.v1alpha1.RateLimit.Conf.Http.OnRateLimit.HeaderValue
	8, // 8: kuma.mesh.v1alpha1.RateLimit.Conf.Http.OnRateLimit.HeaderValue.append:type_name -> google.protobuf.BoolValue
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_mesh_v1alpha1_rate_limit_proto_init() }
func file_mesh_v1alpha1_rate_limit_proto_init() {
	if File_mesh_v1alpha1_rate_limit_proto != nil {
		return
	}
	file_mesh_v1alpha1_selector_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mesh_v1alpha1_rate_limit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_rate_limit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimit_Conf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_rate_limit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimit_Conf_Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_rate_limit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimit_Conf_Http_OnRateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_rate_limit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimit_Conf_Http_OnRateLimit_HeaderValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mesh_v1alpha1_rate_limit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mesh_v1alpha1_rate_limit_proto_goTypes,
		DependencyIndexes: file_mesh_v1alpha1_rate_limit_proto_depIdxs,
		MessageInfos:      file_mesh_v1alpha1_rate_limit_proto_msgTypes,
	}.Build()
	File_mesh_v1alpha1_rate_limit_proto = out.File
	file_mesh_v1alpha1_rate_limit_proto_rawDesc = nil
	file_mesh_v1alpha1_rate_limit_proto_goTypes = nil
	file_mesh_v1alpha1_rate_limit_proto_depIdxs = nil
}
