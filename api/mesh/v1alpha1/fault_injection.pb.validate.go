// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mesh/v1alpha1/fault_injection.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _fault_injection_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on FaultInjection with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FaultInjection) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSources() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FaultInjectionValidationError{
					field:  fmt.Sprintf("Sources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDestinations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FaultInjectionValidationError{
					field:  fmt.Sprintf("Destinations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetConf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultInjectionValidationError{
				field:  "Conf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FaultInjectionValidationError is the validation error returned by
// FaultInjection.Validate if the designated constraints aren't met.
type FaultInjectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultInjectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultInjectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultInjectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultInjectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultInjectionValidationError) ErrorName() string { return "FaultInjectionValidationError" }

// Error satisfies the builtin error interface
func (e FaultInjectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultInjection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultInjectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultInjectionValidationError{}

// Validate checks the field values on FaultInjection_Conf with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FaultInjection_Conf) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultInjection_ConfValidationError{
				field:  "Delay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAbort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultInjection_ConfValidationError{
				field:  "Abort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResponseBandwidth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultInjection_ConfValidationError{
				field:  "ResponseBandwidth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FaultInjection_ConfValidationError is the validation error returned by
// FaultInjection_Conf.Validate if the designated constraints aren't met.
type FaultInjection_ConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultInjection_ConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultInjection_ConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultInjection_ConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultInjection_ConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultInjection_ConfValidationError) ErrorName() string {
	return "FaultInjection_ConfValidationError"
}

// Error satisfies the builtin error interface
func (e FaultInjection_ConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultInjection_Conf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultInjection_ConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultInjection_ConfValidationError{}

// Validate checks the field values on FaultInjection_Conf_Delay with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FaultInjection_Conf_Delay) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPercentage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultInjection_Conf_DelayValidationError{
				field:  "Percentage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultInjection_Conf_DelayValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FaultInjection_Conf_DelayValidationError is the validation error returned by
// FaultInjection_Conf_Delay.Validate if the designated constraints aren't met.
type FaultInjection_Conf_DelayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultInjection_Conf_DelayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultInjection_Conf_DelayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultInjection_Conf_DelayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultInjection_Conf_DelayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultInjection_Conf_DelayValidationError) ErrorName() string {
	return "FaultInjection_Conf_DelayValidationError"
}

// Error satisfies the builtin error interface
func (e FaultInjection_Conf_DelayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultInjection_Conf_Delay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultInjection_Conf_DelayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultInjection_Conf_DelayValidationError{}

// Validate checks the field values on FaultInjection_Conf_Abort with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FaultInjection_Conf_Abort) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPercentage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultInjection_Conf_AbortValidationError{
				field:  "Percentage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetHttpStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultInjection_Conf_AbortValidationError{
				field:  "HttpStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FaultInjection_Conf_AbortValidationError is the validation error returned by
// FaultInjection_Conf_Abort.Validate if the designated constraints aren't met.
type FaultInjection_Conf_AbortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultInjection_Conf_AbortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultInjection_Conf_AbortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultInjection_Conf_AbortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultInjection_Conf_AbortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultInjection_Conf_AbortValidationError) ErrorName() string {
	return "FaultInjection_Conf_AbortValidationError"
}

// Error satisfies the builtin error interface
func (e FaultInjection_Conf_AbortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultInjection_Conf_Abort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultInjection_Conf_AbortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultInjection_Conf_AbortValidationError{}

// Validate checks the field values on FaultInjection_Conf_ResponseBandwidth
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *FaultInjection_Conf_ResponseBandwidth) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPercentage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultInjection_Conf_ResponseBandwidthValidationError{
				field:  "Percentage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLimit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FaultInjection_Conf_ResponseBandwidthValidationError{
				field:  "Limit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FaultInjection_Conf_ResponseBandwidthValidationError is the validation error
// returned by FaultInjection_Conf_ResponseBandwidth.Validate if the
// designated constraints aren't met.
type FaultInjection_Conf_ResponseBandwidthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FaultInjection_Conf_ResponseBandwidthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FaultInjection_Conf_ResponseBandwidthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FaultInjection_Conf_ResponseBandwidthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FaultInjection_Conf_ResponseBandwidthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FaultInjection_Conf_ResponseBandwidthValidationError) ErrorName() string {
	return "FaultInjection_Conf_ResponseBandwidthValidationError"
}

// Error satisfies the builtin error interface
func (e FaultInjection_Conf_ResponseBandwidthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFaultInjection_Conf_ResponseBandwidth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FaultInjection_Conf_ResponseBandwidthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FaultInjection_Conf_ResponseBandwidthValidationError{}
