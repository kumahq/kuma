syntax = "proto3";

package kuma.mesh.v1alpha1;

option go_package = "v1alpha1";

import "mesh/v1alpha1/metrics.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";

// Mesh defines configuration of a single mesh.
message Mesh {

  // mTLS settings of a Mesh.
  message Mtls {

    bool enabled = 1;

    string defaultBackend = 2;

    repeated CertificateAuthorityBackend backends = 3;
  }

  // mTLS settings.
  // +optional
  Mtls mtls = 1;

  // Tracing settings.
  // +optional
  Tracing tracing = 2;

  // Logging settings.
  // +optional
  Logging logging = 3;

  // Configuration for metrics collected and exposed by dataplanes.
  //
  // Settings defined here become defaults for every dataplane in a given Mesh.
  // Additionally, it is also possible to further customize this configuration
  // for each dataplane individually using Dataplane resource.
  // +optional
  Metrics metrics = 4;
}

message CertificateAuthorityBackend {

  string name = 1;

  string type = 2;

  google.protobuf.Struct config = 3;
}

// Tracing defines tracing configuration of the mesh.
message Tracing {

  // Name of the default backend
  string defaultBackend = 1;

  // List of available tracing backends
  repeated TracingBackend backends = 2;
}

// TracingBackend defines tracing backend available to mesh. Backends can be
// used in TrafficTrace rules.
message TracingBackend {
  // Name of the backend, can be then used in Mesh.tracing.defaultBackend or in
  // TrafficTrace
  string name = 1;

  // Percentage of traces that will be sent to the backend (range 0.0 - 100.0).
  // Empty value defaults to 100.0%
  google.protobuf.DoubleValue sampling = 2;

  // Zipkin defined configuration of Zipkin tracer.
  message Zipkin {

    // Address of Zipkin collector.
    string url = 1;

    // Generate 128bit traces. Default: false
    bool traceId128bit = 2;

    // Version of the API. values: httpJson, httpJsonV1, httpProto. Default:
    // httpJson see
    // https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/trace/v3/trace.proto#envoy-v3-api-enum-config-trace-v3-zipkinconfig-collectorendpointversion
    string apiVersion = 3;
  }

  oneof type { Zipkin zipkin = 3; }
}

message Logging {

  // Name of the default backend
  string defaultBackend = 1;

  // List of available logging backends
  repeated LoggingBackend backends = 2;
}

// LoggingBackend defines logging backend available to mesh. Backends can be
// used in TrafficLog rules.
message LoggingBackend {
  // Name of the backend, can be then used in Mesh.logging.defaultBackend or in
  // TrafficLogging
  string name = 1;

  // Format of access logs. Placehodlers available on
  // https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log
  string format = 2;

  // Simple logging to file
  message File { string path = 1; }

  message Tcp { string address = 1; }

  oneof type {
    File file = 3;
    Tcp tcp = 4;
  }
}
