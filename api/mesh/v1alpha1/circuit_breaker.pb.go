// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.0
// source: mesh/v1alpha1/circuit_breaker.proto

package v1alpha1

import (
	_ "github.com/kumahq/kuma/api/mesh"
	_ "github.com/kumahq/protoc-gen-kumadoc/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CircuitBreaker defines circuit breaking policy for dataplane's outbound
type CircuitBreaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of selectors to match dataplanes that are sources of traffic.
	Sources []*Selector `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// List of selectors to match services that are destinations of traffic.
	Destinations []*Selector          `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	Conf         *CircuitBreaker_Conf `protobuf:"bytes,3,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (x *CircuitBreaker) Reset() {
	*x = CircuitBreaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker) ProtoMessage() {}

func (x *CircuitBreaker) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker.ProtoReflect.Descriptor instead.
func (*CircuitBreaker) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_circuit_breaker_proto_rawDescGZIP(), []int{0}
}

func (x *CircuitBreaker) GetSources() []*Selector {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *CircuitBreaker) GetDestinations() []*Selector {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *CircuitBreaker) GetConf() *CircuitBreaker_Conf {
	if x != nil {
		return x.Conf
	}
	return nil
}

type CircuitBreaker_Conf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time interval between ejection analysis sweeps
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// The base time that a host is ejected for. The real time is equal to the
	// base time multiplied by the number of times the host has been ejected
	BaseEjectionTime *durationpb.Duration `protobuf:"bytes,2,opt,name=baseEjectionTime,proto3" json:"baseEjectionTime,omitempty"`
	// The maximum percent of an upstream cluster that can be ejected due to
	// outlier detection, has to be in [0 - 100] range
	MaxEjectionPercent *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=maxEjectionPercent,proto3" json:"maxEjectionPercent,omitempty"`
	// Enables Split Mode in which local and external errors are distinguished
	SplitExternalAndLocalErrors bool                            `protobuf:"varint,4,opt,name=splitExternalAndLocalErrors,proto3" json:"splitExternalAndLocalErrors,omitempty"`
	Detectors                   *CircuitBreaker_Conf_Detectors  `protobuf:"bytes,5,opt,name=detectors,proto3" json:"detectors,omitempty"`
	Thresholds                  *CircuitBreaker_Conf_Thresholds `protobuf:"bytes,6,opt,name=thresholds,proto3" json:"thresholds,omitempty"`
}

func (x *CircuitBreaker_Conf) Reset() {
	*x = CircuitBreaker_Conf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker_Conf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker_Conf) ProtoMessage() {}

func (x *CircuitBreaker_Conf) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker_Conf.ProtoReflect.Descriptor instead.
func (*CircuitBreaker_Conf) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_circuit_breaker_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CircuitBreaker_Conf) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *CircuitBreaker_Conf) GetBaseEjectionTime() *durationpb.Duration {
	if x != nil {
		return x.BaseEjectionTime
	}
	return nil
}

func (x *CircuitBreaker_Conf) GetMaxEjectionPercent() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxEjectionPercent
	}
	return nil
}

func (x *CircuitBreaker_Conf) GetSplitExternalAndLocalErrors() bool {
	if x != nil {
		return x.SplitExternalAndLocalErrors
	}
	return false
}

func (x *CircuitBreaker_Conf) GetDetectors() *CircuitBreaker_Conf_Detectors {
	if x != nil {
		return x.Detectors
	}
	return nil
}

func (x *CircuitBreaker_Conf) GetThresholds() *CircuitBreaker_Conf_Thresholds {
	if x != nil {
		return x.Thresholds
	}
	return nil
}

type CircuitBreaker_Conf_Detectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Errors with status code 5xx and locally originated errors, in Split
	// Mode - just errors with status code 5xx
	TotalErrors *CircuitBreaker_Conf_Detectors_Errors `protobuf:"bytes,1,opt,name=totalErrors,proto3" json:"totalErrors,omitempty"`
	// Subset of 'total' related to gateway errors (502, 503 or 504 status
	// code)
	GatewayErrors *CircuitBreaker_Conf_Detectors_Errors `protobuf:"bytes,2,opt,name=gatewayErrors,proto3" json:"gatewayErrors,omitempty"`
	// Takes into account only in Split Mode, number of locally originated
	// errors
	LocalErrors       *CircuitBreaker_Conf_Detectors_Errors            `protobuf:"bytes,3,opt,name=localErrors,proto3" json:"localErrors,omitempty"`
	StandardDeviation *CircuitBreaker_Conf_Detectors_StandardDeviation `protobuf:"bytes,4,opt,name=standardDeviation,proto3" json:"standardDeviation,omitempty"`
	Failure           *CircuitBreaker_Conf_Detectors_Failure           `protobuf:"bytes,5,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *CircuitBreaker_Conf_Detectors) Reset() {
	*x = CircuitBreaker_Conf_Detectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker_Conf_Detectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker_Conf_Detectors) ProtoMessage() {}

func (x *CircuitBreaker_Conf_Detectors) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker_Conf_Detectors.ProtoReflect.Descriptor instead.
func (*CircuitBreaker_Conf_Detectors) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_circuit_breaker_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *CircuitBreaker_Conf_Detectors) GetTotalErrors() *CircuitBreaker_Conf_Detectors_Errors {
	if x != nil {
		return x.TotalErrors
	}
	return nil
}

func (x *CircuitBreaker_Conf_Detectors) GetGatewayErrors() *CircuitBreaker_Conf_Detectors_Errors {
	if x != nil {
		return x.GatewayErrors
	}
	return nil
}

func (x *CircuitBreaker_Conf_Detectors) GetLocalErrors() *CircuitBreaker_Conf_Detectors_Errors {
	if x != nil {
		return x.LocalErrors
	}
	return nil
}

func (x *CircuitBreaker_Conf_Detectors) GetStandardDeviation() *CircuitBreaker_Conf_Detectors_StandardDeviation {
	if x != nil {
		return x.StandardDeviation
	}
	return nil
}

func (x *CircuitBreaker_Conf_Detectors) GetFailure() *CircuitBreaker_Conf_Detectors_Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type CircuitBreaker_Conf_Thresholds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of connections that Envoy will make to the upstream
	// cluster. If not specified, the default is 1024.
	MaxConnections *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=maxConnections,proto3" json:"maxConnections,omitempty"`
	// The maximum number of pending requests that Envoy will allow to the
	// upstream cluster. If not specified, the default is 1024.
	MaxPendingRequests *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=maxPendingRequests,proto3" json:"maxPendingRequests,omitempty"`
	// The maximum number of parallel retries that Envoy will allow to the
	// upstream cluster. If not specified, the default is 3.
	MaxRetries *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	// The maximum number of parallel requests that Envoy will make to the
	// upstream cluster. If not specified, the default is 1024.
	MaxRequests *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=maxRequests,proto3" json:"maxRequests,omitempty"`
}

func (x *CircuitBreaker_Conf_Thresholds) Reset() {
	*x = CircuitBreaker_Conf_Thresholds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker_Conf_Thresholds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker_Conf_Thresholds) ProtoMessage() {}

func (x *CircuitBreaker_Conf_Thresholds) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker_Conf_Thresholds.ProtoReflect.Descriptor instead.
func (*CircuitBreaker_Conf_Thresholds) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_circuit_breaker_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *CircuitBreaker_Conf_Thresholds) GetMaxConnections() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *CircuitBreaker_Conf_Thresholds) GetMaxPendingRequests() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxPendingRequests
	}
	return nil
}

func (x *CircuitBreaker_Conf_Thresholds) GetMaxRetries() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxRetries
	}
	return nil
}

func (x *CircuitBreaker_Conf_Thresholds) GetMaxRequests() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxRequests
	}
	return nil
}

// Detector based on counting consecutive number of errors
type CircuitBreaker_Conf_Detectors_Errors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consecutive *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=consecutive,proto3" json:"consecutive,omitempty"`
}

func (x *CircuitBreaker_Conf_Detectors_Errors) Reset() {
	*x = CircuitBreaker_Conf_Detectors_Errors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker_Conf_Detectors_Errors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker_Conf_Detectors_Errors) ProtoMessage() {}

func (x *CircuitBreaker_Conf_Detectors_Errors) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker_Conf_Detectors_Errors.ProtoReflect.Descriptor instead.
func (*CircuitBreaker_Conf_Detectors_Errors) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_circuit_breaker_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *CircuitBreaker_Conf_Detectors_Errors) GetConsecutive() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Consecutive
	}
	return nil
}

// Detection based on success rate, aggregated from every host in the
// cluser
type CircuitBreaker_Conf_Detectors_StandardDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ignore hosts with less number of requests than 'requestVolume'
	RequestVolume *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=requestVolume,proto3" json:"requestVolume,omitempty"`
	// Won't count success rate for cluster if number of hosts with required
	// 'requestVolume' is less than 'minimumHosts'
	MinimumHosts *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=minimumHosts,proto3" json:"minimumHosts,omitempty"`
	// Resulting threshold = mean - (stdev * factor)
	Factor *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=factor,proto3" json:"factor,omitempty"`
}

func (x *CircuitBreaker_Conf_Detectors_StandardDeviation) Reset() {
	*x = CircuitBreaker_Conf_Detectors_StandardDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker_Conf_Detectors_StandardDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker_Conf_Detectors_StandardDeviation) ProtoMessage() {}

func (x *CircuitBreaker_Conf_Detectors_StandardDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker_Conf_Detectors_StandardDeviation.ProtoReflect.Descriptor instead.
func (*CircuitBreaker_Conf_Detectors_StandardDeviation) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_circuit_breaker_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *CircuitBreaker_Conf_Detectors_StandardDeviation) GetRequestVolume() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestVolume
	}
	return nil
}

func (x *CircuitBreaker_Conf_Detectors_StandardDeviation) GetMinimumHosts() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinimumHosts
	}
	return nil
}

func (x *CircuitBreaker_Conf_Detectors_StandardDeviation) GetFactor() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Factor
	}
	return nil
}

// Detection based on success rate, but threshold is set explicitly
// (unlike 'standardDeviation')
type CircuitBreaker_Conf_Detectors_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ignore hosts with less number of requests than 'requestVolume'
	RequestVolume *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=requestVolume,proto3" json:"requestVolume,omitempty"`
	// Won't count success rate for cluster if number of hosts with required
	// 'requestVolume' is less than 'minimumHosts'
	MinimumHosts *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=minimumHosts,proto3" json:"minimumHosts,omitempty"`
	// Eject host if failure percentage of a given host is greater than or
	// equal to this value, has to be in [0 - 100] range
	Threshold *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *CircuitBreaker_Conf_Detectors_Failure) Reset() {
	*x = CircuitBreaker_Conf_Detectors_Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker_Conf_Detectors_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker_Conf_Detectors_Failure) ProtoMessage() {}

func (x *CircuitBreaker_Conf_Detectors_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker_Conf_Detectors_Failure.ProtoReflect.Descriptor instead.
func (*CircuitBreaker_Conf_Detectors_Failure) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_circuit_breaker_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *CircuitBreaker_Conf_Detectors_Failure) GetRequestVolume() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestVolume
	}
	return nil
}

func (x *CircuitBreaker_Conf_Detectors_Failure) GetMinimumHosts() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinimumHosts
	}
	return nil
}

func (x *CircuitBreaker_Conf_Detectors_Failure) GetThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Threshold
	}
	return nil
}

var File_mesh_v1alpha1_circuit_breaker_proto protoreflect.FileDescriptor

var file_mesh_v1alpha1_circuit_breaker_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x12, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6b, 0x75, 0x6d,
	0x61, 0x2d, 0x64, 0x6f, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfb, 0x0f, 0x0a, 0x0e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x6d, 0x61,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x04, 0x63,
	0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x75, 0x6d, 0x61,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x1a, 0xb2,
	0x0d, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x45,
	0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x45, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x6d, 0x61, 0x78, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x75, 0x6d,
	0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x0a,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x1a, 0xd5, 0x07, 0x0a, 0x09, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x75,
	0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b, 0x75, 0x6d, 0x61,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x71, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6b, 0x75,
	0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x2e, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0x48, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x1a, 0xcf, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x1a, 0xcb, 0x01, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x1a, 0x9e, 0x02, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x3a, 0x6b, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x18, 0x0a, 0x16, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x10, 0x12, 0x0e, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x06, 0x22,
	0x04, 0x6d, 0x65, 0x73, 0x68, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x04, 0x52, 0x02, 0x10, 0x01, 0xaa,
	0x8c, 0x89, 0xa6, 0x01, 0x13, 0x3a, 0x11, 0x0a, 0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x2d, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x02, 0x68, 0x01,
	0x42, 0x53, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x75, 0x6d, 0x61, 0x68, 0x71, 0x2f, 0x6b, 0x75, 0x6d, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x8a, 0xb5, 0x18, 0x25,
	0x50, 0x01, 0xa2, 0x01, 0x0e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0xf2, 0x01, 0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2d, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mesh_v1alpha1_circuit_breaker_proto_rawDescOnce sync.Once
	file_mesh_v1alpha1_circuit_breaker_proto_rawDescData = file_mesh_v1alpha1_circuit_breaker_proto_rawDesc
)

func file_mesh_v1alpha1_circuit_breaker_proto_rawDescGZIP() []byte {
	file_mesh_v1alpha1_circuit_breaker_proto_rawDescOnce.Do(func() {
		file_mesh_v1alpha1_circuit_breaker_proto_rawDescData = protoimpl.X.CompressGZIP(file_mesh_v1alpha1_circuit_breaker_proto_rawDescData)
	})
	return file_mesh_v1alpha1_circuit_breaker_proto_rawDescData
}

var file_mesh_v1alpha1_circuit_breaker_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_mesh_v1alpha1_circuit_breaker_proto_goTypes = []interface{}{
	(*CircuitBreaker)(nil),                                  // 0: kuma.mesh.v1alpha1.CircuitBreaker
	(*CircuitBreaker_Conf)(nil),                             // 1: kuma.mesh.v1alpha1.CircuitBreaker.Conf
	(*CircuitBreaker_Conf_Detectors)(nil),                   // 2: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors
	(*CircuitBreaker_Conf_Thresholds)(nil),                  // 3: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Thresholds
	(*CircuitBreaker_Conf_Detectors_Errors)(nil),            // 4: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Errors
	(*CircuitBreaker_Conf_Detectors_StandardDeviation)(nil), // 5: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.StandardDeviation
	(*CircuitBreaker_Conf_Detectors_Failure)(nil),           // 6: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Failure
	(*Selector)(nil),                                        // 7: kuma.mesh.v1alpha1.Selector
	(*durationpb.Duration)(nil),                             // 8: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil),                          // 9: google.protobuf.UInt32Value
	(*wrapperspb.DoubleValue)(nil),                          // 10: google.protobuf.DoubleValue
}
var file_mesh_v1alpha1_circuit_breaker_proto_depIdxs = []int32{
	7,  // 0: kuma.mesh.v1alpha1.CircuitBreaker.sources:type_name -> kuma.mesh.v1alpha1.Selector
	7,  // 1: kuma.mesh.v1alpha1.CircuitBreaker.destinations:type_name -> kuma.mesh.v1alpha1.Selector
	1,  // 2: kuma.mesh.v1alpha1.CircuitBreaker.conf:type_name -> kuma.mesh.v1alpha1.CircuitBreaker.Conf
	8,  // 3: kuma.mesh.v1alpha1.CircuitBreaker.Conf.interval:type_name -> google.protobuf.Duration
	8,  // 4: kuma.mesh.v1alpha1.CircuitBreaker.Conf.baseEjectionTime:type_name -> google.protobuf.Duration
	9,  // 5: kuma.mesh.v1alpha1.CircuitBreaker.Conf.maxEjectionPercent:type_name -> google.protobuf.UInt32Value
	2,  // 6: kuma.mesh.v1alpha1.CircuitBreaker.Conf.detectors:type_name -> kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors
	3,  // 7: kuma.mesh.v1alpha1.CircuitBreaker.Conf.thresholds:type_name -> kuma.mesh.v1alpha1.CircuitBreaker.Conf.Thresholds
	4,  // 8: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.totalErrors:type_name -> kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Errors
	4,  // 9: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.gatewayErrors:type_name -> kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Errors
	4,  // 10: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.localErrors:type_name -> kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Errors
	5,  // 11: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.standardDeviation:type_name -> kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.StandardDeviation
	6,  // 12: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.failure:type_name -> kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Failure
	9,  // 13: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Thresholds.maxConnections:type_name -> google.protobuf.UInt32Value
	9,  // 14: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Thresholds.maxPendingRequests:type_name -> google.protobuf.UInt32Value
	9,  // 15: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Thresholds.maxRetries:type_name -> google.protobuf.UInt32Value
	9,  // 16: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Thresholds.maxRequests:type_name -> google.protobuf.UInt32Value
	9,  // 17: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Errors.consecutive:type_name -> google.protobuf.UInt32Value
	9,  // 18: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.StandardDeviation.requestVolume:type_name -> google.protobuf.UInt32Value
	9,  // 19: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.StandardDeviation.minimumHosts:type_name -> google.protobuf.UInt32Value
	10, // 20: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.StandardDeviation.factor:type_name -> google.protobuf.DoubleValue
	9,  // 21: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Failure.requestVolume:type_name -> google.protobuf.UInt32Value
	9,  // 22: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Failure.minimumHosts:type_name -> google.protobuf.UInt32Value
	9,  // 23: kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Failure.threshold:type_name -> google.protobuf.UInt32Value
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_mesh_v1alpha1_circuit_breaker_proto_init() }
func file_mesh_v1alpha1_circuit_breaker_proto_init() {
	if File_mesh_v1alpha1_circuit_breaker_proto != nil {
		return
	}
	file_mesh_v1alpha1_selector_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker_Conf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker_Conf_Detectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker_Conf_Thresholds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker_Conf_Detectors_Errors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker_Conf_Detectors_StandardDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_circuit_breaker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker_Conf_Detectors_Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mesh_v1alpha1_circuit_breaker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mesh_v1alpha1_circuit_breaker_proto_goTypes,
		DependencyIndexes: file_mesh_v1alpha1_circuit_breaker_proto_depIdxs,
		MessageInfos:      file_mesh_v1alpha1_circuit_breaker_proto_msgTypes,
	}.Build()
	File_mesh_v1alpha1_circuit_breaker_proto = out.File
	file_mesh_v1alpha1_circuit_breaker_proto_rawDesc = nil
	file_mesh_v1alpha1_circuit_breaker_proto_goTypes = nil
	file_mesh_v1alpha1_circuit_breaker_proto_depIdxs = nil
}
