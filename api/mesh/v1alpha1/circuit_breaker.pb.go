// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesh/v1alpha1/circuit_breaker.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CircuitBreaker defines circuit breaking policy for dataplane's outbound
type CircuitBreaker struct {
	// List of selectors to match dataplanes that are sources of traffic.
	Sources []*Selector `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// List of selectors to match services that are destinations of traffic.
	Destinations         []*Selector          `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	Conf                 *CircuitBreaker_Conf `protobuf:"bytes,3,opt,name=conf,proto3" json:"conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CircuitBreaker) Reset()         { *m = CircuitBreaker{} }
func (m *CircuitBreaker) String() string { return proto.CompactTextString(m) }
func (*CircuitBreaker) ProtoMessage()    {}
func (*CircuitBreaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0ea95e09ad1355, []int{0}
}

func (m *CircuitBreaker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreaker.Unmarshal(m, b)
}
func (m *CircuitBreaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreaker.Marshal(b, m, deterministic)
}
func (m *CircuitBreaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreaker.Merge(m, src)
}
func (m *CircuitBreaker) XXX_Size() int {
	return xxx_messageInfo_CircuitBreaker.Size(m)
}
func (m *CircuitBreaker) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreaker.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreaker proto.InternalMessageInfo

func (m *CircuitBreaker) GetSources() []*Selector {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *CircuitBreaker) GetDestinations() []*Selector {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *CircuitBreaker) GetConf() *CircuitBreaker_Conf {
	if m != nil {
		return m.Conf
	}
	return nil
}

type CircuitBreaker_Conf struct {
	// Time interval between ejection analysis sweeps
	Interval *duration.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// The base time that a host is ejected for. The real time is equal to the
	// base time multiplied by the number of times the host has been ejected
	BaseEjectionTime *duration.Duration `protobuf:"bytes,2,opt,name=baseEjectionTime,proto3" json:"baseEjectionTime,omitempty"`
	// The maximum percent of an upstream cluster that can be ejected due to
	// outlier detection, has to be in [0 - 100] range
	MaxEjectionPercent *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=maxEjectionPercent,proto3" json:"maxEjectionPercent,omitempty"`
	// Enables Split Mode in which local and external errors are distinguished
	SplitExternalAndLocalErrors bool                           `protobuf:"varint,4,opt,name=splitExternalAndLocalErrors,proto3" json:"splitExternalAndLocalErrors,omitempty"`
	Detectors                   *CircuitBreaker_Conf_Detectors `protobuf:"bytes,5,opt,name=detectors,proto3" json:"detectors,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}                       `json:"-"`
	XXX_unrecognized            []byte                         `json:"-"`
	XXX_sizecache               int32                          `json:"-"`
}

func (m *CircuitBreaker_Conf) Reset()         { *m = CircuitBreaker_Conf{} }
func (m *CircuitBreaker_Conf) String() string { return proto.CompactTextString(m) }
func (*CircuitBreaker_Conf) ProtoMessage()    {}
func (*CircuitBreaker_Conf) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0ea95e09ad1355, []int{0, 0}
}

func (m *CircuitBreaker_Conf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreaker_Conf.Unmarshal(m, b)
}
func (m *CircuitBreaker_Conf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreaker_Conf.Marshal(b, m, deterministic)
}
func (m *CircuitBreaker_Conf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreaker_Conf.Merge(m, src)
}
func (m *CircuitBreaker_Conf) XXX_Size() int {
	return xxx_messageInfo_CircuitBreaker_Conf.Size(m)
}
func (m *CircuitBreaker_Conf) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreaker_Conf.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreaker_Conf proto.InternalMessageInfo

func (m *CircuitBreaker_Conf) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *CircuitBreaker_Conf) GetBaseEjectionTime() *duration.Duration {
	if m != nil {
		return m.BaseEjectionTime
	}
	return nil
}

func (m *CircuitBreaker_Conf) GetMaxEjectionPercent() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return nil
}

func (m *CircuitBreaker_Conf) GetSplitExternalAndLocalErrors() bool {
	if m != nil {
		return m.SplitExternalAndLocalErrors
	}
	return false
}

func (m *CircuitBreaker_Conf) GetDetectors() *CircuitBreaker_Conf_Detectors {
	if m != nil {
		return m.Detectors
	}
	return nil
}

type CircuitBreaker_Conf_Detectors struct {
	// Errors with status code 5xx and locally originated errors, in Split
	// Mode - just errors with status code 5xx
	TotalErrors *CircuitBreaker_Conf_Detectors_Errors `protobuf:"bytes,1,opt,name=totalErrors,proto3" json:"totalErrors,omitempty"`
	// Subset of 'total' related to gateway errors (502, 503 or 504 status
	// code)
	GatewayErrors *CircuitBreaker_Conf_Detectors_Errors `protobuf:"bytes,2,opt,name=gatewayErrors,proto3" json:"gatewayErrors,omitempty"`
	// Takes into account only in Split Mode, number of locally originated
	// errors
	LocalErrors          *CircuitBreaker_Conf_Detectors_Errors            `protobuf:"bytes,3,opt,name=localErrors,proto3" json:"localErrors,omitempty"`
	StandardDeviation    *CircuitBreaker_Conf_Detectors_StandardDeviation `protobuf:"bytes,4,opt,name=standardDeviation,proto3" json:"standardDeviation,omitempty"`
	Failure              *CircuitBreaker_Conf_Detectors_Failure           `protobuf:"bytes,5,opt,name=failure,proto3" json:"failure,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *CircuitBreaker_Conf_Detectors) Reset()         { *m = CircuitBreaker_Conf_Detectors{} }
func (m *CircuitBreaker_Conf_Detectors) String() string { return proto.CompactTextString(m) }
func (*CircuitBreaker_Conf_Detectors) ProtoMessage()    {}
func (*CircuitBreaker_Conf_Detectors) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0ea95e09ad1355, []int{0, 0, 0}
}

func (m *CircuitBreaker_Conf_Detectors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors.Unmarshal(m, b)
}
func (m *CircuitBreaker_Conf_Detectors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors.Marshal(b, m, deterministic)
}
func (m *CircuitBreaker_Conf_Detectors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreaker_Conf_Detectors.Merge(m, src)
}
func (m *CircuitBreaker_Conf_Detectors) XXX_Size() int {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors.Size(m)
}
func (m *CircuitBreaker_Conf_Detectors) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreaker_Conf_Detectors.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreaker_Conf_Detectors proto.InternalMessageInfo

func (m *CircuitBreaker_Conf_Detectors) GetTotalErrors() *CircuitBreaker_Conf_Detectors_Errors {
	if m != nil {
		return m.TotalErrors
	}
	return nil
}

func (m *CircuitBreaker_Conf_Detectors) GetGatewayErrors() *CircuitBreaker_Conf_Detectors_Errors {
	if m != nil {
		return m.GatewayErrors
	}
	return nil
}

func (m *CircuitBreaker_Conf_Detectors) GetLocalErrors() *CircuitBreaker_Conf_Detectors_Errors {
	if m != nil {
		return m.LocalErrors
	}
	return nil
}

func (m *CircuitBreaker_Conf_Detectors) GetStandardDeviation() *CircuitBreaker_Conf_Detectors_StandardDeviation {
	if m != nil {
		return m.StandardDeviation
	}
	return nil
}

func (m *CircuitBreaker_Conf_Detectors) GetFailure() *CircuitBreaker_Conf_Detectors_Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

// Detector based on counting consecutive number of errors
type CircuitBreaker_Conf_Detectors_Errors struct {
	Consecutive          *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=consecutive,proto3" json:"consecutive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CircuitBreaker_Conf_Detectors_Errors) Reset()         { *m = CircuitBreaker_Conf_Detectors_Errors{} }
func (m *CircuitBreaker_Conf_Detectors_Errors) String() string { return proto.CompactTextString(m) }
func (*CircuitBreaker_Conf_Detectors_Errors) ProtoMessage()    {}
func (*CircuitBreaker_Conf_Detectors_Errors) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0ea95e09ad1355, []int{0, 0, 0, 0}
}

func (m *CircuitBreaker_Conf_Detectors_Errors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors_Errors.Unmarshal(m, b)
}
func (m *CircuitBreaker_Conf_Detectors_Errors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors_Errors.Marshal(b, m, deterministic)
}
func (m *CircuitBreaker_Conf_Detectors_Errors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreaker_Conf_Detectors_Errors.Merge(m, src)
}
func (m *CircuitBreaker_Conf_Detectors_Errors) XXX_Size() int {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors_Errors.Size(m)
}
func (m *CircuitBreaker_Conf_Detectors_Errors) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreaker_Conf_Detectors_Errors.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreaker_Conf_Detectors_Errors proto.InternalMessageInfo

func (m *CircuitBreaker_Conf_Detectors_Errors) GetConsecutive() *wrappers.UInt32Value {
	if m != nil {
		return m.Consecutive
	}
	return nil
}

// Detection based on success rate, aggregated from every host in the
// cluser
type CircuitBreaker_Conf_Detectors_StandardDeviation struct {
	// Ignore hosts with less number of requests than 'requestVolume'
	RequestVolume *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=requestVolume,proto3" json:"requestVolume,omitempty"`
	// Won't count success rate for cluster if number of hosts with required
	// 'requestVolume' is less than 'minimumHosts'
	MinimumHosts *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=minimumHosts,proto3" json:"minimumHosts,omitempty"`
	// Resulting threshold = mean - (stdev * factor)
	Factor               *wrappers.DoubleValue `protobuf:"bytes,3,opt,name=factor,proto3" json:"factor,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CircuitBreaker_Conf_Detectors_StandardDeviation) Reset() {
	*m = CircuitBreaker_Conf_Detectors_StandardDeviation{}
}
func (m *CircuitBreaker_Conf_Detectors_StandardDeviation) String() string {
	return proto.CompactTextString(m)
}
func (*CircuitBreaker_Conf_Detectors_StandardDeviation) ProtoMessage() {}
func (*CircuitBreaker_Conf_Detectors_StandardDeviation) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0ea95e09ad1355, []int{0, 0, 0, 1}
}

func (m *CircuitBreaker_Conf_Detectors_StandardDeviation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors_StandardDeviation.Unmarshal(m, b)
}
func (m *CircuitBreaker_Conf_Detectors_StandardDeviation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors_StandardDeviation.Marshal(b, m, deterministic)
}
func (m *CircuitBreaker_Conf_Detectors_StandardDeviation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreaker_Conf_Detectors_StandardDeviation.Merge(m, src)
}
func (m *CircuitBreaker_Conf_Detectors_StandardDeviation) XXX_Size() int {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors_StandardDeviation.Size(m)
}
func (m *CircuitBreaker_Conf_Detectors_StandardDeviation) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreaker_Conf_Detectors_StandardDeviation.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreaker_Conf_Detectors_StandardDeviation proto.InternalMessageInfo

func (m *CircuitBreaker_Conf_Detectors_StandardDeviation) GetRequestVolume() *wrappers.UInt32Value {
	if m != nil {
		return m.RequestVolume
	}
	return nil
}

func (m *CircuitBreaker_Conf_Detectors_StandardDeviation) GetMinimumHosts() *wrappers.UInt32Value {
	if m != nil {
		return m.MinimumHosts
	}
	return nil
}

func (m *CircuitBreaker_Conf_Detectors_StandardDeviation) GetFactor() *wrappers.DoubleValue {
	if m != nil {
		return m.Factor
	}
	return nil
}

// Detection based on success rate, but threshold is set explicitly
// (unlike 'standardDeviation')
type CircuitBreaker_Conf_Detectors_Failure struct {
	// Ignore hosts with less number of requests than 'requestVolume'
	RequestVolume *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=requestVolume,proto3" json:"requestVolume,omitempty"`
	// Won't count success rate for cluster if number of hosts with required
	// 'requestVolume' is less than 'minimumHosts'
	MinimumHosts *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=minimumHosts,proto3" json:"minimumHosts,omitempty"`
	// Eject host if failure percentage of a given host is greater than or
	// equal to this value, has to be in [0 - 100] range
	Threshold            *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CircuitBreaker_Conf_Detectors_Failure) Reset()         { *m = CircuitBreaker_Conf_Detectors_Failure{} }
func (m *CircuitBreaker_Conf_Detectors_Failure) String() string { return proto.CompactTextString(m) }
func (*CircuitBreaker_Conf_Detectors_Failure) ProtoMessage()    {}
func (*CircuitBreaker_Conf_Detectors_Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e0ea95e09ad1355, []int{0, 0, 0, 2}
}

func (m *CircuitBreaker_Conf_Detectors_Failure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors_Failure.Unmarshal(m, b)
}
func (m *CircuitBreaker_Conf_Detectors_Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors_Failure.Marshal(b, m, deterministic)
}
func (m *CircuitBreaker_Conf_Detectors_Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CircuitBreaker_Conf_Detectors_Failure.Merge(m, src)
}
func (m *CircuitBreaker_Conf_Detectors_Failure) XXX_Size() int {
	return xxx_messageInfo_CircuitBreaker_Conf_Detectors_Failure.Size(m)
}
func (m *CircuitBreaker_Conf_Detectors_Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_CircuitBreaker_Conf_Detectors_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_CircuitBreaker_Conf_Detectors_Failure proto.InternalMessageInfo

func (m *CircuitBreaker_Conf_Detectors_Failure) GetRequestVolume() *wrappers.UInt32Value {
	if m != nil {
		return m.RequestVolume
	}
	return nil
}

func (m *CircuitBreaker_Conf_Detectors_Failure) GetMinimumHosts() *wrappers.UInt32Value {
	if m != nil {
		return m.MinimumHosts
	}
	return nil
}

func (m *CircuitBreaker_Conf_Detectors_Failure) GetThreshold() *wrappers.UInt32Value {
	if m != nil {
		return m.Threshold
	}
	return nil
}

func init() {
	proto.RegisterType((*CircuitBreaker)(nil), "kuma.mesh.v1alpha1.CircuitBreaker")
	proto.RegisterType((*CircuitBreaker_Conf)(nil), "kuma.mesh.v1alpha1.CircuitBreaker.Conf")
	proto.RegisterType((*CircuitBreaker_Conf_Detectors)(nil), "kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors")
	proto.RegisterType((*CircuitBreaker_Conf_Detectors_Errors)(nil), "kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Errors")
	proto.RegisterType((*CircuitBreaker_Conf_Detectors_StandardDeviation)(nil), "kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.StandardDeviation")
	proto.RegisterType((*CircuitBreaker_Conf_Detectors_Failure)(nil), "kuma.mesh.v1alpha1.CircuitBreaker.Conf.Detectors.Failure")
}

func init() {
	proto.RegisterFile("mesh/v1alpha1/circuit_breaker.proto", fileDescriptor_7e0ea95e09ad1355)
}

var fileDescriptor_7e0ea95e09ad1355 = []byte{
	// 577 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0xdb, 0x7e, 0x4d, 0x7b, 0xd3, 0x7e, 0xa2, 0xb3, 0x32, 0xa6, 0x42, 0x15, 0x2c, 0xe8,
	0xca, 0x51, 0x52, 0x40, 0xfc, 0x48, 0xa8, 0xe4, 0x07, 0x15, 0xa9, 0x12, 0xc8, 0x81, 0x2e, 0xba,
	0x00, 0x4d, 0xec, 0x9b, 0x64, 0xe8, 0x78, 0x26, 0x9d, 0x9f, 0xb4, 0x3c, 0x01, 0x4f, 0xc5, 0x13,
	0xb0, 0x60, 0xc5, 0xfb, 0x20, 0xff, 0xa5, 0x31, 0x69, 0x43, 0xa2, 0x6e, 0x58, 0x8e, 0xef, 0x39,
	0xe7, 0x9e, 0x7b, 0xe6, 0x7a, 0xe0, 0x61, 0x8c, 0x7a, 0x58, 0x1b, 0xd7, 0x29, 0x1f, 0x0d, 0x69,
	0xbd, 0x16, 0x32, 0x15, 0x5a, 0x66, 0x3e, 0xf7, 0x14, 0xd2, 0x33, 0x54, 0xfe, 0x48, 0x49, 0x23,
	0x09, 0x39, 0xb3, 0x31, 0xf5, 0x13, 0xa4, 0x5f, 0x20, 0xbd, 0xdd, 0x32, 0x51, 0x23, 0xc7, 0xd0,
	0xc8, 0x9c, 0xe1, 0xdd, 0x1f, 0x48, 0x39, 0xe0, 0x58, 0x4b, 0x4f, 0x3d, 0xdb, 0xaf, 0x45, 0x56,
	0x51, 0xc3, 0xa4, 0xb8, 0xa9, 0x7e, 0xa1, 0xe8, 0x68, 0x84, 0x4a, 0x67, 0xf5, 0x07, 0xdf, 0xb6,
	0xe0, 0xff, 0x56, 0xe6, 0xa5, 0x99, 0x59, 0x21, 0x4f, 0xa1, 0xa2, 0xa5, 0x55, 0x21, 0x6a, 0xd7,
	0xd9, 0x5b, 0xdd, 0xaf, 0x36, 0x76, 0xfd, 0x59, 0x5b, 0x7e, 0x37, 0xf7, 0x11, 0x14, 0x60, 0x72,
	0x08, 0x5b, 0x11, 0x6a, 0xc3, 0x44, 0xda, 0x5f, 0xbb, 0x2b, 0x0b, 0x90, 0x4b, 0x0c, 0xf2, 0x12,
	0xd6, 0x42, 0x29, 0xfa, 0xee, 0xea, 0x9e, 0xb3, 0x5f, 0x6d, 0x3c, 0xba, 0x8e, 0x59, 0xf6, 0xea,
	0xb7, 0xa4, 0xe8, 0x07, 0x29, 0xc9, 0xfb, 0x0e, 0xb0, 0x96, 0x1c, 0xc9, 0x13, 0xd8, 0x60, 0xc2,
	0xa0, 0x1a, 0x53, 0xee, 0x3a, 0xa9, 0xd2, 0x5d, 0x3f, 0x4b, 0xc1, 0x2f, 0x52, 0xf0, 0xdb, 0x79,
	0x4a, 0xc1, 0x04, 0x4a, 0x3a, 0x70, 0xa7, 0x47, 0x35, 0x76, 0xbe, 0x60, 0x98, 0x54, 0x3e, 0xb0,
	0x18, 0xdd, 0x95, 0xbf, 0xd1, 0x67, 0x28, 0xe4, 0x18, 0x48, 0x4c, 0x2f, 0x8b, 0x4f, 0xef, 0x51,
	0x85, 0x28, 0x4c, 0x3e, 0xd1, 0xee, 0x8c, 0xd0, 0xc7, 0xb7, 0xc2, 0x1c, 0x34, 0x4e, 0x28, 0xb7,
	0x18, 0x5c, 0xc3, 0x23, 0x87, 0x70, 0x4f, 0x8f, 0x38, 0x33, 0x9d, 0x4b, 0x83, 0x4a, 0x50, 0xfe,
	0x5a, 0x44, 0xc7, 0x32, 0xa4, 0xbc, 0xa3, 0x94, 0x54, 0xda, 0x5d, 0xdb, 0x73, 0xf6, 0x37, 0x82,
	0x79, 0x10, 0xf2, 0x0e, 0x36, 0x23, 0x34, 0x69, 0xda, 0xda, 0xfd, 0x2f, 0xb5, 0x51, 0x5f, 0x30,
	0x58, 0xbf, 0x5d, 0x10, 0x83, 0x2b, 0x0d, 0xef, 0x57, 0x05, 0x36, 0x27, 0x05, 0x72, 0x0a, 0x55,
	0x23, 0xcd, 0xc4, 0x50, 0x96, 0xf7, 0xb3, 0xa5, 0x1b, 0xf8, 0x19, 0x3f, 0x98, 0x16, 0x23, 0x9f,
	0x60, 0x7b, 0x40, 0x0d, 0x5e, 0xd0, 0xaf, 0xb9, 0xfa, 0xca, 0x2d, 0xd5, 0xcb, 0x72, 0x89, 0x77,
	0x3e, 0x15, 0xe6, 0xea, 0x6d, 0xbd, 0x4f, 0x89, 0x91, 0x73, 0xd8, 0xd1, 0x86, 0x8a, 0x88, 0xaa,
	0xa8, 0x8d, 0x63, 0x96, 0x6e, 0x4b, 0x7a, 0x5d, 0xd5, 0x46, 0x6b, 0xf9, 0x0e, 0xdd, 0x3f, 0xa5,
	0x82, 0x59, 0x75, 0xd2, 0x85, 0x4a, 0x9f, 0x32, 0x6e, 0x15, 0xe6, 0xf7, 0xfc, 0x7c, 0xf9, 0x46,
	0x6f, 0x32, 0x81, 0xa0, 0x50, 0xf2, 0x8e, 0x60, 0x3d, 0x9f, 0xe8, 0x15, 0x54, 0x43, 0x29, 0x34,
	0x86, 0xd6, 0xb0, 0x31, 0xe6, 0x37, 0x3d, 0x7f, 0xa3, 0xa7, 0x09, 0xde, 0x4f, 0x07, 0x76, 0x66,
	0xe6, 0x20, 0x4d, 0xd8, 0x56, 0x78, 0x6e, 0x51, 0x9b, 0x13, 0xc9, 0x6d, 0xbc, 0x98, 0x6e, 0x99,
	0x92, 0x3c, 0x3c, 0x31, 0x13, 0x2c, 0xb6, 0xf1, 0x91, 0xd4, 0xa6, 0x58, 0x93, 0xf9, 0x12, 0x25,
	0x06, 0x79, 0x0c, 0xeb, 0x7d, 0x9a, 0x24, 0x70, 0xe3, 0x8f, 0xda, 0x96, 0xb6, 0xc7, 0x31, 0xe3,
	0xe6, 0x58, 0xef, 0x87, 0x03, 0x95, 0x3c, 0xb0, 0x7f, 0x64, 0x8e, 0x17, 0xb0, 0x69, 0x86, 0x0a,
	0xf5, 0x50, 0xf2, 0x68, 0xa1, 0x37, 0xe7, 0x0a, 0xde, 0x84, 0xd3, 0x8d, 0x62, 0x49, 0x7a, 0xeb,
	0x29, 0xf8, 0xe0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x96, 0xf8, 0x80, 0xb5, 0x06, 0x00,
	0x00,
}
