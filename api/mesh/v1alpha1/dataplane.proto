syntax = "proto3";

package kuma.mesh.v1alpha1;

option go_package = "v1alpha1";

import "mesh/v1alpha1/metrics.proto";

import "validate/validate.proto";

// Dataplane defines configuration of a side-car proxy.
message Dataplane {

  // Networking describes inbound and outbound interfaces of a dataplane.
  message Networking {

    // Ingress allows us to configure dataplane in the Ingress mode. In this
    // mode, dataplane has only inbound interfaces (outbound and gateway
    // prohibited). Every inbound interface matches with services that reside in
    // that cluster.
    message Ingress {
      // AvailableService contains tags that represent unique subset of
      // endpoints
      message AvailableService {
        // tags of the service
        map<string, string> tags = 1;
        // number of instances available for given tags
        uint32 instances = 2;
      }
      repeated AvailableService availableServices = 1;
    }

    // Ingress if not nil, dataplane will be work in the Ingress mode
    Ingress ingress = 6;

    // Public IP on which the dataplane is accessible in the network.
    // Host names and DNS are not allowed.
    string address = 5;

    // Inbound describes a service implemented by the dataplane.
    message Inbound {
      // Port of the inbound interface that will forward requests to the
      // service.
      uint32 port = 3;

      // Port of the service that requests will be forwarded to.
      uint32 servicePort = 4;

      // Address on which inbound listener will be exposed. Defaults to
      // networking.address.
      string address = 5;

      // Tags associated with an application this dataplane is deployed next to,
      // e.g. service=web, version=1.0.
      // `service` tag is mandatory.
      map<string, string> tags = 2 [ (validate.rules).map.min_pairs = 1 ];
    }

    // Outbound describes a service consumed by the dataplane.
    message Outbound {
      // Address on which the service will be available to this dataplane.
      // Defaults to 127.0.0.1
      string address = 3;

      // Port on which the service will be available to this dataplane.
      uint32 port = 4;

      // DEPRECATED: use networking.outbound[].tags
      // Service name.
      string service = 2 [ (validate.rules).string.hostname = true ];

      // Tags
      map<string, string> tags = 5;
    }

    // Gateway describes a service that ingress should not be proxied.
    message Gateway {
      // Tags associated with a gateway (e.g., Kong, Contour, etc) this
      // dataplane is deployed next to, e.g. service=gateway, env=prod.
      // `service` tag is mandatory.
      map<string, string> tags = 1 [ (validate.rules).map.min_pairs = 1 ];
    }

    // TransparentProxying describes configuration for transparent proxying.
    message TransparentProxying {

      // Port on which all traffic is being transparently redirected.
      uint32 redirect_port = 1 [ (validate.rules).uint32 = {lte : 65535} ];

      // List of services that will be access directly via IP:PORT
      repeated string direct_access_services = 2;
    }

    // Gateway describes configuration of gateway of the dataplane.
    Gateway gateway = 3;

    // Inbound describes a list of inbound interfaces of the dataplane.
    repeated Inbound inbound = 1;

    // Outbound describes a list of outbound interfaces of the dataplane.
    repeated Outbound outbound = 2;

    // TransparentProxying describes configuration for transparent proxying.
    TransparentProxying transparent_proxying = 4;
  }

  // Networking describes inbound and outbound interfaces of the dataplane.
  Networking networking = 1;

  // Configuration for metrics that should be collected and exposed by the
  // dataplane.
  //
  // Settings defined here will override their respective defaults
  // defined at a Mesh level.
  MetricsBackend metrics = 2;
}
