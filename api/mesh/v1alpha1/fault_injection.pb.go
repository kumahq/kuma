// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesh/v1alpha1/fault_injection.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// FaultInjection defines the configuration of faults between dataplanes.
type FaultInjection struct {
	// List of selectors to match dataplanes that are sources of traffic.
	Sources []*Selector `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// List of selectors to match services that are destinations of traffic.
	Destinations []*Selector `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Configuration of FaultInjection
	Conf                 *FaultInjection_Conf `protobuf:"bytes,3,opt,name=conf,proto3" json:"conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FaultInjection) Reset()         { *m = FaultInjection{} }
func (m *FaultInjection) String() string { return proto.CompactTextString(m) }
func (*FaultInjection) ProtoMessage()    {}
func (*FaultInjection) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4d722195e1e7eb, []int{0}
}

func (m *FaultInjection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection.Unmarshal(m, b)
}
func (m *FaultInjection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection.Marshal(b, m, deterministic)
}
func (m *FaultInjection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection.Merge(m, src)
}
func (m *FaultInjection) XXX_Size() int {
	return xxx_messageInfo_FaultInjection.Size(m)
}
func (m *FaultInjection) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection proto.InternalMessageInfo

func (m *FaultInjection) GetSources() []*Selector {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *FaultInjection) GetDestinations() []*Selector {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *FaultInjection) GetConf() *FaultInjection_Conf {
	if m != nil {
		return m.Conf
	}
	return nil
}

// Conf defines several types of faults, at least one fault should be
// specified
type FaultInjection_Conf struct {
	// Delay if specified then response from the destination will be delivered
	// with a delay
	Delay *FaultInjection_Conf_Delay `protobuf:"bytes,1,opt,name=delay,proto3" json:"delay,omitempty"`
	// Abort if specified makes source side to receive specified httpStatus code
	Abort *FaultInjection_Conf_Abort `protobuf:"bytes,2,opt,name=abort,proto3" json:"abort,omitempty"`
	// ResponseBandwidth if specified limits the speed of sending response body
	ResponseBandwidth    *FaultInjection_Conf_ResponseBandwidth `protobuf:"bytes,3,opt,name=response_bandwidth,json=responseBandwidth,proto3" json:"response_bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *FaultInjection_Conf) Reset()         { *m = FaultInjection_Conf{} }
func (m *FaultInjection_Conf) String() string { return proto.CompactTextString(m) }
func (*FaultInjection_Conf) ProtoMessage()    {}
func (*FaultInjection_Conf) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4d722195e1e7eb, []int{0, 0}
}

func (m *FaultInjection_Conf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection_Conf.Unmarshal(m, b)
}
func (m *FaultInjection_Conf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection_Conf.Marshal(b, m, deterministic)
}
func (m *FaultInjection_Conf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection_Conf.Merge(m, src)
}
func (m *FaultInjection_Conf) XXX_Size() int {
	return xxx_messageInfo_FaultInjection_Conf.Size(m)
}
func (m *FaultInjection_Conf) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection_Conf.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection_Conf proto.InternalMessageInfo

func (m *FaultInjection_Conf) GetDelay() *FaultInjection_Conf_Delay {
	if m != nil {
		return m.Delay
	}
	return nil
}

func (m *FaultInjection_Conf) GetAbort() *FaultInjection_Conf_Abort {
	if m != nil {
		return m.Abort
	}
	return nil
}

func (m *FaultInjection_Conf) GetResponseBandwidth() *FaultInjection_Conf_ResponseBandwidth {
	if m != nil {
		return m.ResponseBandwidth
	}
	return nil
}

// Delay defines configuration of delaying a response from a destination
type FaultInjection_Conf_Delay struct {
	// Percentage of requests on which delay will be injected, has to be in
	// [0.0 - 100.0] range
	Percentage *wrappers.DoubleValue `protobuf:"bytes,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// The duration during which the response will be delayed
	Value                *duration.Duration `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FaultInjection_Conf_Delay) Reset()         { *m = FaultInjection_Conf_Delay{} }
func (m *FaultInjection_Conf_Delay) String() string { return proto.CompactTextString(m) }
func (*FaultInjection_Conf_Delay) ProtoMessage()    {}
func (*FaultInjection_Conf_Delay) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4d722195e1e7eb, []int{0, 0, 0}
}

func (m *FaultInjection_Conf_Delay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection_Conf_Delay.Unmarshal(m, b)
}
func (m *FaultInjection_Conf_Delay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection_Conf_Delay.Marshal(b, m, deterministic)
}
func (m *FaultInjection_Conf_Delay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection_Conf_Delay.Merge(m, src)
}
func (m *FaultInjection_Conf_Delay) XXX_Size() int {
	return xxx_messageInfo_FaultInjection_Conf_Delay.Size(m)
}
func (m *FaultInjection_Conf_Delay) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection_Conf_Delay.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection_Conf_Delay proto.InternalMessageInfo

func (m *FaultInjection_Conf_Delay) GetPercentage() *wrappers.DoubleValue {
	if m != nil {
		return m.Percentage
	}
	return nil
}

func (m *FaultInjection_Conf_Delay) GetValue() *duration.Duration {
	if m != nil {
		return m.Value
	}
	return nil
}

// Abort defines a configuration of not delivering requests to destination
// service and replacing the responses from destination dataplane by
// predefined status code
type FaultInjection_Conf_Abort struct {
	// Percentage of requests on which abort will be injected, has to be in
	// [0.0 - 100.0] range
	Percentage *wrappers.DoubleValue `protobuf:"bytes,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// HTTP status code which will be returned to source side
	HttpStatus           *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=httpStatus,proto3" json:"httpStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FaultInjection_Conf_Abort) Reset()         { *m = FaultInjection_Conf_Abort{} }
func (m *FaultInjection_Conf_Abort) String() string { return proto.CompactTextString(m) }
func (*FaultInjection_Conf_Abort) ProtoMessage()    {}
func (*FaultInjection_Conf_Abort) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4d722195e1e7eb, []int{0, 0, 1}
}

func (m *FaultInjection_Conf_Abort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection_Conf_Abort.Unmarshal(m, b)
}
func (m *FaultInjection_Conf_Abort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection_Conf_Abort.Marshal(b, m, deterministic)
}
func (m *FaultInjection_Conf_Abort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection_Conf_Abort.Merge(m, src)
}
func (m *FaultInjection_Conf_Abort) XXX_Size() int {
	return xxx_messageInfo_FaultInjection_Conf_Abort.Size(m)
}
func (m *FaultInjection_Conf_Abort) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection_Conf_Abort.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection_Conf_Abort proto.InternalMessageInfo

func (m *FaultInjection_Conf_Abort) GetPercentage() *wrappers.DoubleValue {
	if m != nil {
		return m.Percentage
	}
	return nil
}

func (m *FaultInjection_Conf_Abort) GetHttpStatus() *wrappers.UInt32Value {
	if m != nil {
		return m.HttpStatus
	}
	return nil
}

// ResponseBandwidth defines a configuration to limit the speed of
// responding to the requests
type FaultInjection_Conf_ResponseBandwidth struct {
	// Percentage of requests on which response bandwidth limit will be
	// injected, has to be in [0.0 - 100.0] range
	Percentage *wrappers.DoubleValue `protobuf:"bytes,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Limit is represented by value measure in gbps, mbps, kbps or bps, e.g.
	// 10kbps
	Limit                *wrappers.StringValue `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FaultInjection_Conf_ResponseBandwidth) Reset()         { *m = FaultInjection_Conf_ResponseBandwidth{} }
func (m *FaultInjection_Conf_ResponseBandwidth) String() string { return proto.CompactTextString(m) }
func (*FaultInjection_Conf_ResponseBandwidth) ProtoMessage()    {}
func (*FaultInjection_Conf_ResponseBandwidth) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff4d722195e1e7eb, []int{0, 0, 2}
}

func (m *FaultInjection_Conf_ResponseBandwidth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FaultInjection_Conf_ResponseBandwidth.Unmarshal(m, b)
}
func (m *FaultInjection_Conf_ResponseBandwidth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FaultInjection_Conf_ResponseBandwidth.Marshal(b, m, deterministic)
}
func (m *FaultInjection_Conf_ResponseBandwidth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaultInjection_Conf_ResponseBandwidth.Merge(m, src)
}
func (m *FaultInjection_Conf_ResponseBandwidth) XXX_Size() int {
	return xxx_messageInfo_FaultInjection_Conf_ResponseBandwidth.Size(m)
}
func (m *FaultInjection_Conf_ResponseBandwidth) XXX_DiscardUnknown() {
	xxx_messageInfo_FaultInjection_Conf_ResponseBandwidth.DiscardUnknown(m)
}

var xxx_messageInfo_FaultInjection_Conf_ResponseBandwidth proto.InternalMessageInfo

func (m *FaultInjection_Conf_ResponseBandwidth) GetPercentage() *wrappers.DoubleValue {
	if m != nil {
		return m.Percentage
	}
	return nil
}

func (m *FaultInjection_Conf_ResponseBandwidth) GetLimit() *wrappers.StringValue {
	if m != nil {
		return m.Limit
	}
	return nil
}

func init() {
	proto.RegisterType((*FaultInjection)(nil), "kuma.mesh.v1alpha1.FaultInjection")
	proto.RegisterType((*FaultInjection_Conf)(nil), "kuma.mesh.v1alpha1.FaultInjection.Conf")
	proto.RegisterType((*FaultInjection_Conf_Delay)(nil), "kuma.mesh.v1alpha1.FaultInjection.Conf.Delay")
	proto.RegisterType((*FaultInjection_Conf_Abort)(nil), "kuma.mesh.v1alpha1.FaultInjection.Conf.Abort")
	proto.RegisterType((*FaultInjection_Conf_ResponseBandwidth)(nil), "kuma.mesh.v1alpha1.FaultInjection.Conf.ResponseBandwidth")
}

func init() {
	proto.RegisterFile("mesh/v1alpha1/fault_injection.proto", fileDescriptor_ff4d722195e1e7eb)
}

var fileDescriptor_ff4d722195e1e7eb = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x6b, 0xd4, 0x40,
	0x14, 0xc6, 0x49, 0xdb, 0x54, 0x78, 0x15, 0xa1, 0x73, 0x8a, 0x61, 0x91, 0xa2, 0x07, 0x17, 0xc1,
	0x09, 0xdd, 0x82, 0x20, 0xf6, 0xa0, 0x6d, 0x11, 0x7a, 0xcd, 0xa2, 0x07, 0x2f, 0x65, 0x92, 0xbc,
	0x4d, 0x46, 0xb3, 0x33, 0x71, 0xe6, 0xcd, 0x16, 0x6f, 0x82, 0xf8, 0xcf, 0xf9, 0x57, 0x49, 0x92,
	0x09, 0x35, 0x46, 0x61, 0xcb, 0x9e, 0x42, 0x66, 0xbe, 0xdf, 0xf7, 0xbe, 0xf7, 0xf2, 0x02, 0xcf,
	0xd6, 0x68, 0xab, 0x64, 0x73, 0x2a, 0xea, 0xa6, 0x12, 0xa7, 0xc9, 0x4a, 0xb8, 0x9a, 0x6e, 0xa4,
	0xfa, 0x8c, 0x39, 0x49, 0xad, 0x78, 0x63, 0x34, 0x69, 0xc6, 0xbe, 0xb8, 0xb5, 0xe0, 0xad, 0x92,
	0x0f, 0xca, 0xf8, 0x49, 0xa9, 0x75, 0x59, 0x63, 0xd2, 0x29, 0x32, 0xb7, 0x4a, 0x0a, 0x67, 0xc4,
	0x1d, 0x13, 0xcf, 0xc6, 0xc6, 0x16, 0x6b, 0xcc, 0x49, 0x1b, 0x7f, 0x3b, 0xa1, 0x6f, 0x8d, 0x68,
	0x1a, 0x34, 0xb6, 0xbf, 0x7f, 0xfa, 0xeb, 0x10, 0x1e, 0xbd, 0x6f, 0xb3, 0x5c, 0x0f, 0x51, 0xd8,
	0x2b, 0x78, 0x60, 0xb5, 0x33, 0x39, 0xda, 0x28, 0x38, 0xd9, 0x9f, 0x1f, 0x2d, 0x66, 0x7c, 0x1a,
	0x8b, 0x2f, 0x7d, 0x9d, 0x74, 0x10, 0xb3, 0xb7, 0xf0, 0xb0, 0x40, 0x4b, 0x52, 0x75, 0xe9, 0x6c,
	0xb4, 0xb7, 0x05, 0x3c, 0x22, 0xd8, 0x1b, 0x38, 0xc8, 0xb5, 0x5a, 0x45, 0xfb, 0x27, 0xc1, 0xfc,
	0x68, 0xf1, 0xfc, 0x5f, 0xe4, 0x38, 0x2b, 0xbf, 0xd4, 0x6a, 0x95, 0x76, 0x50, 0xfc, 0x3d, 0x84,
	0x83, 0xf6, 0x95, 0x5d, 0x42, 0x58, 0x60, 0x2d, 0xbe, 0x45, 0x41, 0x67, 0xf3, 0x72, 0x4b, 0x1b,
	0x7e, 0xd5, 0x42, 0x69, 0xcf, 0xb6, 0x26, 0x22, 0xd3, 0x86, 0xa2, 0xbd, 0xfb, 0x99, 0xbc, 0x6b,
	0xa1, 0xb4, 0x67, 0x59, 0x05, 0xcc, 0xa0, 0x6d, 0xb4, 0xb2, 0x78, 0x93, 0x09, 0x55, 0xdc, 0xca,
	0x82, 0x2a, 0xdf, 0xdd, 0xeb, 0x6d, 0x1d, 0x53, 0xef, 0x70, 0x31, 0x18, 0xa4, 0xc7, 0xe6, 0xef,
	0xa3, 0x78, 0x03, 0x61, 0x17, 0x9f, 0x9d, 0x03, 0x34, 0x68, 0x72, 0x54, 0x24, 0x4a, 0xf4, 0x13,
	0x98, 0xf1, 0x7e, 0x09, 0xf8, 0xb0, 0x04, 0xfc, 0x4a, 0xbb, 0xac, 0xc6, 0x8f, 0xa2, 0x76, 0x98,
	0xfe, 0xa1, 0x67, 0x09, 0x84, 0x9b, 0xf6, 0xd0, 0x77, 0xfd, 0x78, 0x0a, 0xfa, 0xdd, 0x4b, 0x7b,
	0x5d, 0xfc, 0x23, 0x80, 0xb0, 0x6b, 0x79, 0xc7, 0xc2, 0xe7, 0x00, 0x15, 0x51, 0xb3, 0x24, 0x41,
	0xce, 0xfa, 0xea, 0x53, 0xfa, 0xc3, 0xb5, 0xa2, 0xb3, 0x85, 0xa7, 0xef, 0xf4, 0xf1, 0xcf, 0x00,
	0x8e, 0x27, 0x63, 0xda, 0x31, 0xd1, 0x02, 0xc2, 0x5a, 0xae, 0x25, 0xfd, 0x37, 0xcc, 0x92, 0x8c,
	0x54, 0x65, 0x0f, 0xf6, 0xd2, 0x8b, 0x17, 0x9f, 0xe6, 0xa5, 0xa4, 0xca, 0x65, 0x3c, 0xd7, 0xeb,
	0xa4, 0xfd, 0xbe, 0xd5, 0xd7, 0xee, 0x91, 0x88, 0x46, 0x26, 0xa3, 0xff, 0x34, 0x3b, 0xec, 0x8c,
	0xce, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xb2, 0x7f, 0x68, 0x18, 0x04, 0x00, 0x00,
}
