// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: api/mesh/v1alpha1/dataplane.proto

package v1alpha1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/kumahq/kuma/api/mesh"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Dataplane_Networking_Inbound_State int32

const (
	// Inbound is ready to serve the traffic.
	Dataplane_Networking_Inbound_Ready Dataplane_Networking_Inbound_State = 0
	// Inbound is not ready to serve the traffic.
	Dataplane_Networking_Inbound_NotReady Dataplane_Networking_Inbound_State = 1
	// Inbound is not created. It cannot be targeted by policies.
	// However, a data plane proxy receives a certificate with identity of
	// this inbound.
	Dataplane_Networking_Inbound_Ignored Dataplane_Networking_Inbound_State = 2
)

// Enum value maps for Dataplane_Networking_Inbound_State.
var (
	Dataplane_Networking_Inbound_State_name = map[int32]string{
		0: "Ready",
		1: "NotReady",
		2: "Ignored",
	}
	Dataplane_Networking_Inbound_State_value = map[string]int32{
		"Ready":    0,
		"NotReady": 1,
		"Ignored":  2,
	}
)

func (x Dataplane_Networking_Inbound_State) Enum() *Dataplane_Networking_Inbound_State {
	p := new(Dataplane_Networking_Inbound_State)
	*p = x
	return p
}

func (x Dataplane_Networking_Inbound_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dataplane_Networking_Inbound_State) Descriptor() protoreflect.EnumDescriptor {
	return file_api_mesh_v1alpha1_dataplane_proto_enumTypes[0].Descriptor()
}

func (Dataplane_Networking_Inbound_State) Type() protoreflect.EnumType {
	return &file_api_mesh_v1alpha1_dataplane_proto_enumTypes[0]
}

func (x Dataplane_Networking_Inbound_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dataplane_Networking_Inbound_State.Descriptor instead.
func (Dataplane_Networking_Inbound_State) EnumDescriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Dataplane_Networking_Gateway_GatewayType int32

const (
	// A `DELEGATED` gateway is an independently deployed proxy that
	// receives inbound traffic that is not proxied by Kuma, and
	// it sends outbound traffic into the data plane proxy.
	Dataplane_Networking_Gateway_DELEGATED Dataplane_Networking_Gateway_GatewayType = 0
	// The `BUILTIN` gateway type configures data plane proxy itself as a
	// gateway.
	Dataplane_Networking_Gateway_BUILTIN Dataplane_Networking_Gateway_GatewayType = 1
)

// Enum value maps for Dataplane_Networking_Gateway_GatewayType.
var (
	Dataplane_Networking_Gateway_GatewayType_name = map[int32]string{
		0: "DELEGATED",
		1: "BUILTIN",
	}
	Dataplane_Networking_Gateway_GatewayType_value = map[string]int32{
		"DELEGATED": 0,
		"BUILTIN":   1,
	}
)

func (x Dataplane_Networking_Gateway_GatewayType) Enum() *Dataplane_Networking_Gateway_GatewayType {
	p := new(Dataplane_Networking_Gateway_GatewayType)
	*p = x
	return p
}

func (x Dataplane_Networking_Gateway_GatewayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dataplane_Networking_Gateway_GatewayType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_mesh_v1alpha1_dataplane_proto_enumTypes[1].Descriptor()
}

func (Dataplane_Networking_Gateway_GatewayType) Type() protoreflect.EnumType {
	return &file_api_mesh_v1alpha1_dataplane_proto_enumTypes[1]
}

func (x Dataplane_Networking_Gateway_GatewayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dataplane_Networking_Gateway_GatewayType.Descriptor instead.
func (Dataplane_Networking_Gateway_GatewayType) EnumDescriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

type Dataplane_Networking_TransparentProxying_IpFamilyMode int32

const (
	// This value is to support backward compatibility and should not be
	// used in new data plane objects.
	Dataplane_Networking_TransparentProxying_UnSpecified Dataplane_Networking_TransparentProxying_IpFamilyMode = 0
	// Enables transparent proxying for both IPv4 and IPv6 traffic, This is
	// the default.
	Dataplane_Networking_TransparentProxying_DualStack Dataplane_Networking_TransparentProxying_IpFamilyMode = 1
	// Enables transparent proxying for IPv4 traffic only.
	Dataplane_Networking_TransparentProxying_IPv4 Dataplane_Networking_TransparentProxying_IpFamilyMode = 2
	// Enables transparent proxying for IPv6 traffic only. This mode is to
	// be supported in the future.
	Dataplane_Networking_TransparentProxying_IPv6 Dataplane_Networking_TransparentProxying_IpFamilyMode = 3
)

// Enum value maps for Dataplane_Networking_TransparentProxying_IpFamilyMode.
var (
	Dataplane_Networking_TransparentProxying_IpFamilyMode_name = map[int32]string{
		0: "UnSpecified",
		1: "DualStack",
		2: "IPv4",
		3: "IPv6",
	}
	Dataplane_Networking_TransparentProxying_IpFamilyMode_value = map[string]int32{
		"UnSpecified": 0,
		"DualStack":   1,
		"IPv4":        2,
		"IPv6":        3,
	}
)

func (x Dataplane_Networking_TransparentProxying_IpFamilyMode) Enum() *Dataplane_Networking_TransparentProxying_IpFamilyMode {
	p := new(Dataplane_Networking_TransparentProxying_IpFamilyMode)
	*p = x
	return p
}

func (x Dataplane_Networking_TransparentProxying_IpFamilyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dataplane_Networking_TransparentProxying_IpFamilyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_mesh_v1alpha1_dataplane_proto_enumTypes[2].Descriptor()
}

func (Dataplane_Networking_TransparentProxying_IpFamilyMode) Type() protoreflect.EnumType {
	return &file_api_mesh_v1alpha1_dataplane_proto_enumTypes[2]
}

func (x Dataplane_Networking_TransparentProxying_IpFamilyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dataplane_Networking_TransparentProxying_IpFamilyMode.Descriptor instead.
func (Dataplane_Networking_TransparentProxying_IpFamilyMode) EnumDescriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

// Dataplane defines a configuration of a side-car proxy.
type Dataplane struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Networking describes inbound and outbound interfaces of the data plane
	// proxy.
	Networking *Dataplane_Networking `protobuf:"bytes,1,opt,name=networking,proto3" json:"networking,omitempty"`
	// Configuration for metrics that should be collected and exposed by the
	// data plane proxy.
	//
	// Settings defined here will override their respective defaults
	// defined at a Mesh level.
	Metrics *MetricsBackend `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// Probes describe a list of endpoints that will be exposed without mTLS.
	// This is useful to expose the health endpoints of the application so the
	// orchestration system (e.g. Kubernetes) can still health check the
	// application.
	//
	// See
	// https://kuma.io/docs/latest/policies/service-health-probes/#virtual-probes
	// for more information.
	// Deprecated: this feature will be removed for Universal; on Kubernetes, it's
	// not needed anymore.
	Probes        *Dataplane_Probes `protobuf:"bytes,3,opt,name=probes,proto3" json:"probes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane) Reset() {
	*x = Dataplane{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane) ProtoMessage() {}

func (x *Dataplane) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane.ProtoReflect.Descriptor instead.
func (*Dataplane) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0}
}

func (x *Dataplane) GetNetworking() *Dataplane_Networking {
	if x != nil {
		return x.Networking
	}
	return nil
}

func (x *Dataplane) GetMetrics() *MetricsBackend {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Dataplane) GetProbes() *Dataplane_Probes {
	if x != nil {
		return x.Probes
	}
	return nil
}

// Networking describes inbound and outbound interfaces of a data plane proxy.
type Dataplane_Networking struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IP on which the data plane proxy is accessible to the control plane and
	// other data plane proxies in the same network. This can also be a
	// hostname, in which case the control plane will periodically resolve it.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// In some situations, a data plane proxy resides in a private network (e.g.
	// Docker) and is not reachable via `address` to other data plane proxies.
	// `advertisedAddress` is configured with a routable address for such data
	// plane proxy so that other proxies in the mesh can connect to it over
	// `advertisedAddress` and not via address.
	//
	// Envoy still binds to the `address`, not `advertisedAddress`.
	AdvertisedAddress string `protobuf:"bytes,7,opt,name=advertisedAddress,proto3" json:"advertisedAddress,omitempty"`
	// Gateway describes a configuration of the gateway of the data plane proxy.
	Gateway *Dataplane_Networking_Gateway `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Inbound describes a list of inbound interfaces of the data plane proxy.
	//
	// Inbound describes a service implemented by the data plane proxy.
	// All incoming traffic to a data plane proxy is going through inbound
	// listeners. For every defined Inbound there is a corresponding Envoy
	// Listener.
	Inbound []*Dataplane_Networking_Inbound `protobuf:"bytes,1,rep,name=inbound,proto3" json:"inbound,omitempty"`
	// Outbound describes a list of services consumed by the data plane proxy.
	// For every defined Outbound, there is a corresponding Envoy Listener.
	Outbound []*Dataplane_Networking_Outbound `protobuf:"bytes,2,rep,name=outbound,proto3" json:"outbound,omitempty"`
	// TransparentProxying describes the configuration for transparent proxying.
	// It is used by default on Kubernetes.
	TransparentProxying *Dataplane_Networking_TransparentProxying `protobuf:"bytes,4,opt,name=transparent_proxying,json=transparentProxying,proto3" json:"transparent_proxying,omitempty"`
	// Admin describes configuration related to Envoy Admin API.
	// Due to security, all the Envoy Admin endpoints are exposed only on
	// localhost. Additionally, Envoy will expose `/ready` endpoint on
	// `networking.address` for health checking systems to be able to check the
	// state of Envoy. The rest of the endpoints exposed on `networking.address`
	// are always protected by mTLS and only meant to be consumed internally by
	// the control plane.
	Admin         *EnvoyAdmin `protobuf:"bytes,8,opt,name=admin,proto3" json:"admin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Networking) Reset() {
	*x = Dataplane_Networking{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking) ProtoMessage() {}

func (x *Dataplane_Networking) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Dataplane_Networking) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Dataplane_Networking) GetAdvertisedAddress() string {
	if x != nil {
		return x.AdvertisedAddress
	}
	return ""
}

func (x *Dataplane_Networking) GetGateway() *Dataplane_Networking_Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *Dataplane_Networking) GetInbound() []*Dataplane_Networking_Inbound {
	if x != nil {
		return x.Inbound
	}
	return nil
}

func (x *Dataplane_Networking) GetOutbound() []*Dataplane_Networking_Outbound {
	if x != nil {
		return x.Outbound
	}
	return nil
}

func (x *Dataplane_Networking) GetTransparentProxying() *Dataplane_Networking_TransparentProxying {
	if x != nil {
		return x.TransparentProxying
	}
	return nil
}

func (x *Dataplane_Networking) GetAdmin() *EnvoyAdmin {
	if x != nil {
		return x.Admin
	}
	return nil
}

type Dataplane_Probes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port on which the probe endpoints will be exposed. This cannot overlap
	// with any other ports.
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// List of endpoints to expose without mTLS.
	Endpoints     []*Dataplane_Probes_Endpoint `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Probes) Reset() {
	*x = Dataplane_Probes{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Probes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Probes) ProtoMessage() {}

func (x *Dataplane_Probes) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Probes.ProtoReflect.Descriptor instead.
func (*Dataplane_Probes) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Dataplane_Probes) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Dataplane_Probes) GetEndpoints() []*Dataplane_Probes_Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// Inbound describes a service implemented by the data plane proxy.
// All incoming traffic to a data plane proxy are going through inbound
// listeners. For every defined Inbound there is a corresponding Envoy
// Listener.
type Dataplane_Networking_Inbound struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port of the inbound interface that will forward requests to the
	// service.
	//
	// When transparent proxying is used, it is a port on which the service is
	// listening to. When transparent proxying is not used, Envoy will bind to
	// this port.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Port of the service that requests will be forwarded to.
	// Defaults to the same value as `port`.
	ServicePort uint32 `protobuf:"varint,4,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
	// Address of the service that requests will be forwarded to.
	// Defaults to 'inbound.address', since Kuma DP should be deployed next
	// to the service.
	ServiceAddress string `protobuf:"bytes,6,opt,name=serviceAddress,proto3" json:"serviceAddress,omitempty"`
	// Address on which inbound listener will be exposed.
	// Defaults to `networking.address`.
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Tags associated with an application this data plane proxy is deployed
	// next to, e.g. `kuma.io/service=web`, `version=1.0`. You can then
	// reference these tags in policies like MeshTrafficPermission.
	// `kuma.io/service` tag is mandatory.
	Tags map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Health describes the status of an inbound.
	// If 'health' is nil we consider data plane proxy as healthy.
	// Unhealthy data plane proxies are excluded from Endpoints Discovery
	// Service (EDS). On Kubernetes, it is filled automatically by the control
	// plane if Pod has readiness probe configured. On Universal, it can be
	// set by the external health checking system, but the most common way is
	// to use service probes.
	//
	// See https://kuma.io/docs/latest/documentation/health for more
	// information.
	Health *Dataplane_Networking_Inbound_Health `protobuf:"bytes,7,opt,name=health,proto3" json:"health,omitempty"`
	// ServiceProbe defines parameters for probing the service next to
	// sidecar. When service probe is defined, Envoy will periodically health
	// check the application next to it and report the status to the control
	// plane. On Kubernetes, Kuma deployments rely on Kubernetes probes so
	// this is not used.
	//
	// See https://kuma.io/docs/latest/documentation/health for more
	// information.
	ServiceProbe *Dataplane_Networking_Inbound_ServiceProbe `protobuf:"bytes,8,opt,name=serviceProbe,proto3" json:"serviceProbe,omitempty"`
	// State describes the current state of the listener.
	State Dataplane_Networking_Inbound_State `protobuf:"varint,9,opt,name=state,proto3,enum=kuma.mesh.v1alpha1.Dataplane_Networking_Inbound_State" json:"state,omitempty"`
	// Name adds another way of referencing this port, usable with MeshService
	Name          string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Networking_Inbound) Reset() {
	*x = Dataplane_Networking_Inbound{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking_Inbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Inbound) ProtoMessage() {}

func (x *Dataplane_Networking_Inbound) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Inbound.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Inbound) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Dataplane_Networking_Inbound) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Dataplane_Networking_Inbound) GetServicePort() uint32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

func (x *Dataplane_Networking_Inbound) GetServiceAddress() string {
	if x != nil {
		return x.ServiceAddress
	}
	return ""
}

func (x *Dataplane_Networking_Inbound) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Dataplane_Networking_Inbound) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dataplane_Networking_Inbound) GetHealth() *Dataplane_Networking_Inbound_Health {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *Dataplane_Networking_Inbound) GetServiceProbe() *Dataplane_Networking_Inbound_ServiceProbe {
	if x != nil {
		return x.ServiceProbe
	}
	return nil
}

func (x *Dataplane_Networking_Inbound) GetState() Dataplane_Networking_Inbound_State {
	if x != nil {
		return x.State
	}
	return Dataplane_Networking_Inbound_Ready
}

func (x *Dataplane_Networking_Inbound) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Outbound describes a service consumed by the data plane proxy.
// For every defined Outbound there is a corresponding Envoy Listener.
type Dataplane_Networking_Outbound struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IP on which the consumed service will be available to this data plane
	// proxy. On Kubernetes, it's usually ClusterIP of a Service or PodIP of a
	// Headless Service. Defaults to 127.0.0.1
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// Port on which the consumed service will be available to this data plane
	// proxy. When transparent proxying is not used, Envoy will bind to this
	// port.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Tags of consumed data plane proxies.
	// `kuma.io/service` tag is required.
	// These tags can then be referenced in `destinations` section of policies
	// like TrafficRoute or in `to` section in policies like MeshAccessLog. It
	// is recommended to only use `kuma.io/service`. If you need to consume
	// specific data plane proxy of a service (for example: `version=v2`) the
	// better practice is to use TrafficRoute.
	Tags map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// BackendRef is a way to target MeshService.
	// Experimental. Do not use on production yet.
	BackendRef    *Dataplane_Networking_Outbound_BackendRef `protobuf:"bytes,6,opt,name=backendRef,proto3" json:"backendRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Networking_Outbound) Reset() {
	*x = Dataplane_Networking_Outbound{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking_Outbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Outbound) ProtoMessage() {}

func (x *Dataplane_Networking_Outbound) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Outbound.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Outbound) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Dataplane_Networking_Outbound) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Dataplane_Networking_Outbound) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Dataplane_Networking_Outbound) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dataplane_Networking_Outbound) GetBackendRef() *Dataplane_Networking_Outbound_BackendRef {
	if x != nil {
		return x.BackendRef
	}
	return nil
}

// Gateway describes a service that ingress should not be proxied.
type Dataplane_Networking_Gateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tags associated with a gateway of this data plane to, e.g.
	// `kuma.io/service=gateway`, `env=prod`. `kuma.io/service` tag is
	// mandatory.
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Type of gateway this data plane proxy manages.
	// There are two types: `DELEGATED` and `BUILTIN`. Defaults to
	// `DELEGATED`.
	//
	// A `DELEGATED` gateway is an independently deployed proxy (e.g., Kong,
	// Contour, etc) that receives inbound traffic that is not proxied by
	// Kuma, and it sends outbound traffic into the data plane proxy.
	//
	// The `BUILTIN` gateway type causes the data plane proxy itself to be
	// configured as a gateway.
	//
	// See https://kuma.io/docs/latest/explore/gateway/ for more information.
	Type          Dataplane_Networking_Gateway_GatewayType `protobuf:"varint,2,opt,name=type,proto3,enum=kuma.mesh.v1alpha1.Dataplane_Networking_Gateway_GatewayType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Networking_Gateway) Reset() {
	*x = Dataplane_Networking_Gateway{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking_Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Gateway) ProtoMessage() {}

func (x *Dataplane_Networking_Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Gateway.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Gateway) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Dataplane_Networking_Gateway) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dataplane_Networking_Gateway) GetType() Dataplane_Networking_Gateway_GatewayType {
	if x != nil {
		return x.Type
	}
	return Dataplane_Networking_Gateway_DELEGATED
}

// TransparentProxying describes configuration for transparent proxying.
type Dataplane_Networking_TransparentProxying struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port on which all inbound traffic is being transparently redirected.
	RedirectPortInbound uint32 `protobuf:"varint,1,opt,name=redirect_port_inbound,json=redirectPortInbound,proto3" json:"redirect_port_inbound,omitempty"`
	// Port on which all outbound traffic is being transparently redirected.
	RedirectPortOutbound uint32 `protobuf:"varint,2,opt,name=redirect_port_outbound,json=redirectPortOutbound,proto3" json:"redirect_port_outbound,omitempty"`
	// List of services that will be accessed directly via IP:PORT
	// Use `*` to indicate direct access to every service in the Mesh.
	// Using `*` to directly access every service is a resource-intensive
	// operation, use it only if needed.
	DirectAccessServices []string `protobuf:"bytes,3,rep,name=direct_access_services,json=directAccessServices,proto3" json:"direct_access_services,omitempty"`
	// List of reachable services (represented by the value of
	// `kuma.io/service`) via transparent proxying. Setting an explicit list
	// can dramatically improve the performance of the mesh. If not specified,
	// all services in the mesh are reachable.
	ReachableServices []string `protobuf:"bytes,5,rep,name=reachable_services,json=reachableServices,proto3" json:"reachable_services,omitempty"`
	// The IP family mode to enable for. Can be "IPv4" or "DualStack".
	IpFamilyMode Dataplane_Networking_TransparentProxying_IpFamilyMode `protobuf:"varint,6,opt,name=ip_family_mode,json=ipFamilyMode,proto3,enum=kuma.mesh.v1alpha1.Dataplane_Networking_TransparentProxying_IpFamilyMode" json:"ip_family_mode,omitempty"`
	// Reachable backend via transparent proxy when running with
	// MeshExternalService, MeshService and MeshMultiZoneService. Setting an
	// explicit list of refs can dramatically improve the performance of the
	// mesh. If not specified, all services in the mesh are reachable.
	ReachableBackends *Dataplane_Networking_TransparentProxying_ReachableBackends `protobuf:"bytes,7,opt,name=reachable_backends,json=reachableBackends,proto3" json:"reachable_backends,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Dataplane_Networking_TransparentProxying) Reset() {
	*x = Dataplane_Networking_TransparentProxying{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking_TransparentProxying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_TransparentProxying) ProtoMessage() {}

func (x *Dataplane_Networking_TransparentProxying) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_TransparentProxying.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_TransparentProxying) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Dataplane_Networking_TransparentProxying) GetRedirectPortInbound() uint32 {
	if x != nil {
		return x.RedirectPortInbound
	}
	return 0
}

func (x *Dataplane_Networking_TransparentProxying) GetRedirectPortOutbound() uint32 {
	if x != nil {
		return x.RedirectPortOutbound
	}
	return 0
}

func (x *Dataplane_Networking_TransparentProxying) GetDirectAccessServices() []string {
	if x != nil {
		return x.DirectAccessServices
	}
	return nil
}

func (x *Dataplane_Networking_TransparentProxying) GetReachableServices() []string {
	if x != nil {
		return x.ReachableServices
	}
	return nil
}

func (x *Dataplane_Networking_TransparentProxying) GetIpFamilyMode() Dataplane_Networking_TransparentProxying_IpFamilyMode {
	if x != nil {
		return x.IpFamilyMode
	}
	return Dataplane_Networking_TransparentProxying_UnSpecified
}

func (x *Dataplane_Networking_TransparentProxying) GetReachableBackends() *Dataplane_Networking_TransparentProxying_ReachableBackends {
	if x != nil {
		return x.ReachableBackends
	}
	return nil
}

// Health describes the status of an inbound
type Dataplane_Networking_Inbound_Health struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ready indicates if the data plane proxy is ready to serve the
	// traffic.
	Ready         bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Networking_Inbound_Health) Reset() {
	*x = Dataplane_Networking_Inbound_Health{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking_Inbound_Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Inbound_Health) ProtoMessage() {}

func (x *Dataplane_Networking_Inbound_Health) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Inbound_Health.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Inbound_Health) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Dataplane_Networking_Inbound_Health) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

// ServiceProbe defines parameters for probing service's port
type Dataplane_Networking_Inbound_ServiceProbe struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Interval between consecutive health checks.
	Interval *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Maximum time to wait for a health check response.
	Timeout *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Number of consecutive unhealthy checks before considering a host
	// unhealthy.
	UnhealthyThreshold *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// Number of consecutive healthy checks before considering a host
	// healthy.
	HealthyThreshold *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// Tcp checker tries to establish tcp connection with destination
	Tcp           *Dataplane_Networking_Inbound_ServiceProbe_Tcp `protobuf:"bytes,5,opt,name=tcp,proto3" json:"tcp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) Reset() {
	*x = Dataplane_Networking_Inbound_ServiceProbe{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Inbound_ServiceProbe) ProtoMessage() {}

func (x *Dataplane_Networking_Inbound_ServiceProbe) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Inbound_ServiceProbe.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Inbound_ServiceProbe) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) GetUnhealthyThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.UnhealthyThreshold
	}
	return nil
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) GetHealthyThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.HealthyThreshold
	}
	return nil
}

func (x *Dataplane_Networking_Inbound_ServiceProbe) GetTcp() *Dataplane_Networking_Inbound_ServiceProbe_Tcp {
	if x != nil {
		return x.Tcp
	}
	return nil
}

type Dataplane_Networking_Inbound_ServiceProbe_Tcp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Networking_Inbound_ServiceProbe_Tcp) Reset() {
	*x = Dataplane_Networking_Inbound_ServiceProbe_Tcp{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking_Inbound_ServiceProbe_Tcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Inbound_ServiceProbe_Tcp) ProtoMessage() {}

func (x *Dataplane_Networking_Inbound_ServiceProbe_Tcp) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Inbound_ServiceProbe_Tcp.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Inbound_ServiceProbe_Tcp) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

type Dataplane_Networking_Outbound_BackendRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Kind is a type of the object to target. Allowed: MeshService
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name of the targeted object
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Port of the targeted object. Required when kind is MeshService.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Labels to select a single object.
	// If no object is selected then outbound is not created.
	// If multiple objects are selected then the oldest one is used.
	Labels        map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Networking_Outbound_BackendRef) Reset() {
	*x = Dataplane_Networking_Outbound_BackendRef{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking_Outbound_BackendRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_Outbound_BackendRef) ProtoMessage() {}

func (x *Dataplane_Networking_Outbound_BackendRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_Outbound_BackendRef.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_Outbound_BackendRef) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *Dataplane_Networking_Outbound_BackendRef) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Dataplane_Networking_Outbound_BackendRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dataplane_Networking_Outbound_BackendRef) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Dataplane_Networking_Outbound_BackendRef) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Dataplane_Networking_TransparentProxying_ReachableBackendRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of the backend: MeshService or MeshExternalService
	//
	//	+required
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name of the backend.
	//
	//	+optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace of the backend. Might be empty
	//
	//	+optional
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Port of the backend.
	//
	//	+optional
	Port *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	// Labels used to select backends
	//
	//	+optional
	Labels        map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackendRef) Reset() {
	*x = Dataplane_Networking_TransparentProxying_ReachableBackendRef{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackendRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_TransparentProxying_ReachableBackendRef) ProtoMessage() {}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackendRef) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_TransparentProxying_ReachableBackendRef.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_TransparentProxying_ReachableBackendRef) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackendRef) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackendRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackendRef) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackendRef) GetPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackendRef) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Dataplane_Networking_TransparentProxying_ReachableBackends struct {
	state         protoimpl.MessageState                                          `protogen:"open.v1"`
	Refs          []*Dataplane_Networking_TransparentProxying_ReachableBackendRef `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackends) Reset() {
	*x = Dataplane_Networking_TransparentProxying_ReachableBackends{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Networking_TransparentProxying_ReachableBackends) ProtoMessage() {}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackends) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Networking_TransparentProxying_ReachableBackends.ProtoReflect.Descriptor instead.
func (*Dataplane_Networking_TransparentProxying_ReachableBackends) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 0, 3, 1}
}

func (x *Dataplane_Networking_TransparentProxying_ReachableBackends) GetRefs() []*Dataplane_Networking_TransparentProxying_ReachableBackendRef {
	if x != nil {
		return x.Refs
	}
	return nil
}

type Dataplane_Probes_Endpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Inbound port is a port of the application from which we expose the
	// endpoint.
	InboundPort uint32 `protobuf:"varint,1,opt,name=inbound_port,json=inboundPort,proto3" json:"inbound_port,omitempty"`
	// Inbound path is a path of the application from which we expose the
	// endpoint. It is recommended to be as specific as possible.
	InboundPath string `protobuf:"bytes,2,opt,name=inbound_path,json=inboundPath,proto3" json:"inbound_path,omitempty"`
	// Path is a path on which we expose inbound path on the probes port.
	Path          string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dataplane_Probes_Endpoint) Reset() {
	*x = Dataplane_Probes_Endpoint{}
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataplane_Probes_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataplane_Probes_Endpoint) ProtoMessage() {}

func (x *Dataplane_Probes_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_dataplane_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataplane_Probes_Endpoint.ProtoReflect.Descriptor instead.
func (*Dataplane_Probes_Endpoint) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Dataplane_Probes_Endpoint) GetInboundPort() uint32 {
	if x != nil {
		return x.InboundPort
	}
	return 0
}

func (x *Dataplane_Probes_Endpoint) GetInboundPath() string {
	if x != nil {
		return x.InboundPath
	}
	return ""
}

func (x *Dataplane_Probes_Endpoint) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_api_mesh_v1alpha1_dataplane_proto protoreflect.FileDescriptor

const file_api_mesh_v1alpha1_dataplane_proto_rawDesc = "" +
	"\n" +
	"!api/mesh/v1alpha1/dataplane.proto\x12\x12kuma.mesh.v1alpha1\x1a\x16api/mesh/options.proto\x1a#api/mesh/v1alpha1/envoy_admin.proto\x1a\x1fapi/mesh/v1alpha1/metrics.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x17validate/validate.proto\"\xfd\"\n" +
	"\tDataplane\x12H\n" +
	"\n" +
	"networking\x18\x01 \x01(\v2(.kuma.mesh.v1alpha1.Dataplane.NetworkingR\n" +
	"networking\x12<\n" +
	"\ametrics\x18\x02 \x01(\v2\".kuma.mesh.v1alpha1.MetricsBackendR\ametrics\x12<\n" +
	"\x06probes\x18\x03 \x01(\v2$.kuma.mesh.v1alpha1.Dataplane.ProbesR\x06probes\x1a\x8b\x1a\n" +
	"\n" +
	"Networking\x12\x18\n" +
	"\aaddress\x18\x05 \x01(\tR\aaddress\x12,\n" +
	"\x11advertisedAddress\x18\a \x01(\tR\x11advertisedAddress\x12J\n" +
	"\agateway\x18\x03 \x01(\v20.kuma.mesh.v1alpha1.Dataplane.Networking.GatewayR\agateway\x12J\n" +
	"\ainbound\x18\x01 \x03(\v20.kuma.mesh.v1alpha1.Dataplane.Networking.InboundR\ainbound\x12M\n" +
	"\boutbound\x18\x02 \x03(\v21.kuma.mesh.v1alpha1.Dataplane.Networking.OutboundR\boutbound\x12o\n" +
	"\x14transparent_proxying\x18\x04 \x01(\v2<.kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxyingR\x13transparentProxying\x124\n" +
	"\x05admin\x18\b \x01(\v2\x1e.kuma.mesh.v1alpha1.EnvoyAdminR\x05admin\x1a\xec\a\n" +
	"\aInbound\x12\x12\n" +
	"\x04port\x18\x03 \x01(\rR\x04port\x12 \n" +
	"\vservicePort\x18\x04 \x01(\rR\vservicePort\x12&\n" +
	"\x0eserviceAddress\x18\x06 \x01(\tR\x0eserviceAddress\x12\x18\n" +
	"\aaddress\x18\x05 \x01(\tR\aaddress\x12X\n" +
	"\x04tags\x18\x02 \x03(\v2:.kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.TagsEntryB\b\xfaB\x05\x9a\x01\x02\b\x01R\x04tags\x12O\n" +
	"\x06health\x18\a \x01(\v27.kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.HealthR\x06health\x12a\n" +
	"\fserviceProbe\x18\b \x01(\v2=.kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbeR\fserviceProbe\x12L\n" +
	"\x05state\x18\t \x01(\x0e26.kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.StateR\x05state\x12\x12\n" +
	"\x04name\x18\n" +
	" \x01(\tR\x04name\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\x1e\n" +
	"\x06Health\x12\x14\n" +
	"\x05ready\x18\x01 \x01(\bR\x05ready\x1a\xf0\x02\n" +
	"\fServiceProbe\x125\n" +
	"\binterval\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\binterval\x123\n" +
	"\atimeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12M\n" +
	"\x13unhealthy_threshold\x18\x03 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x12unhealthyThreshold\x12I\n" +
	"\x11healthy_threshold\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x10healthyThreshold\x12S\n" +
	"\x03tcp\x18\x05 \x01(\v2A.kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.TcpR\x03tcp\x1a\x05\n" +
	"\x03Tcp\"-\n" +
	"\x05State\x12\t\n" +
	"\x05Ready\x10\x00\x12\f\n" +
	"\bNotReady\x10\x01\x12\v\n" +
	"\aIgnored\x10\x02\x1a\x88\x04\n" +
	"\bOutbound\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x04 \x01(\rR\x04port\x12O\n" +
	"\x04tags\x18\x05 \x03(\v2;.kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.TagsEntryR\x04tags\x12\\\n" +
	"\n" +
	"backendRef\x18\x06 \x01(\v2<.kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.BackendRefR\n" +
	"backendRef\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xe5\x01\n" +
	"\n" +
	"BackendRef\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04port\x18\x03 \x01(\rR\x04port\x12`\n" +
	"\x06labels\x18\x04 \x03(\v2H.kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.BackendRef.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\x99\x02\n" +
	"\aGateway\x12X\n" +
	"\x04tags\x18\x01 \x03(\v2:.kuma.mesh.v1alpha1.Dataplane.Networking.Gateway.TagsEntryB\b\xfaB\x05\x9a\x01\x02\b\x01R\x04tags\x12P\n" +
	"\x04type\x18\x02 \x01(\x0e2<.kuma.mesh.v1alpha1.Dataplane.Networking.Gateway.GatewayTypeR\x04type\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\")\n" +
	"\vGatewayType\x12\r\n" +
	"\tDELEGATED\x10\x00\x12\v\n" +
	"\aBUILTIN\x10\x01\x1a\x8a\b\n" +
	"\x13TransparentProxying\x12=\n" +
	"\x15redirect_port_inbound\x18\x01 \x01(\rB\t\xfaB\x06*\x04\x18\xff\xff\x03R\x13redirectPortInbound\x12?\n" +
	"\x16redirect_port_outbound\x18\x02 \x01(\rB\t\xfaB\x06*\x04\x18\xff\xff\x03R\x14redirectPortOutbound\x124\n" +
	"\x16direct_access_services\x18\x03 \x03(\tR\x14directAccessServices\x12-\n" +
	"\x12reachable_services\x18\x05 \x03(\tR\x11reachableServices\x12o\n" +
	"\x0eip_family_mode\x18\x06 \x01(\x0e2I.kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.IpFamilyModeR\fipFamilyMode\x12}\n" +
	"\x12reachable_backends\x18\a \x01(\v2N.kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackendsR\x11reachableBackends\x1a\xbe\x02\n" +
	"\x13ReachableBackendRef\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\x120\n" +
	"\x04port\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x04port\x12t\n" +
	"\x06labels\x18\x05 \x03(\v2\\.kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackendRef.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1ay\n" +
	"\x11ReachableBackends\x12d\n" +
	"\x04refs\x18\x01 \x03(\v2P.kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackendRefR\x04refs\"B\n" +
	"\fIpFamilyMode\x12\x0f\n" +
	"\vUnSpecified\x10\x00\x12\r\n" +
	"\tDualStack\x10\x01\x12\b\n" +
	"\x04IPv4\x10\x02\x12\b\n" +
	"\x04IPv6\x10\x03J\x04\b\x04\x10\x05R\x18redirect_port_inbound_v6J\x04\b\x06\x10\a\x1a\xcf\x01\n" +
	"\x06Probes\x12\x12\n" +
	"\x04port\x18\x01 \x01(\rR\x04port\x12K\n" +
	"\tendpoints\x18\x02 \x03(\v2-.kuma.mesh.v1alpha1.Dataplane.Probes.EndpointR\tendpoints\x1ad\n" +
	"\bEndpoint\x12!\n" +
	"\finbound_port\x18\x01 \x01(\rR\vinboundPort\x12!\n" +
	"\finbound_path\x18\x02 \x01(\tR\vinboundPath\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path:\xc9\x05\xaa\x8c\x89\xa6\x01\xc2\x05\n" +
	"\x11DataplaneResource\x12\tDataplane\"\x04mesh:\v\n" +
	"\tdataplaneR\x16model.ZoneToGlobalFlagX\x01\x8a\x01\x91\x01description=\"Service tag of the first inbound\",JSONPath=`.spec.networking.inbound[0].tags['kuma\\.io/service']`,name=\"kuma.io/service\",type=string\x8a\x01\x92\x01description=\"Service tag of the second inbound\",JSONPath=`.spec.networking.inbound[1].tags['kuma\\.io/service']`,name=\"kuma.io/service\",type=string\x8a\x01\x9c\x01description=\"Service tag of the third inbound\",JSONPath=`.spec.networking.inbound[2].tags['kuma\\.io/service']`,name=\"kuma.io/service\",type=string,priority=1\x8a\x01\x9d\x01description=\"Service tag of the fourth inbound\",JSONPath=`.spec.networking.inbound[3].tags['kuma\\.io/service']`,name=\"kuma.io/service\",type=string,priority=1\x90\x01\x01\x9a\x01\x02dp\xa0\x01\x01B*Z(github.com/kumahq/kuma/api/mesh/v1alpha1b\x06proto3"

var (
	file_api_mesh_v1alpha1_dataplane_proto_rawDescOnce sync.Once
	file_api_mesh_v1alpha1_dataplane_proto_rawDescData []byte
)

func file_api_mesh_v1alpha1_dataplane_proto_rawDescGZIP() []byte {
	file_api_mesh_v1alpha1_dataplane_proto_rawDescOnce.Do(func() {
		file_api_mesh_v1alpha1_dataplane_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_mesh_v1alpha1_dataplane_proto_rawDesc), len(file_api_mesh_v1alpha1_dataplane_proto_rawDesc)))
	})
	return file_api_mesh_v1alpha1_dataplane_proto_rawDescData
}

var file_api_mesh_v1alpha1_dataplane_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_mesh_v1alpha1_dataplane_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_api_mesh_v1alpha1_dataplane_proto_goTypes = []any{
	(Dataplane_Networking_Inbound_State)(0),                    // 0: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.State
	(Dataplane_Networking_Gateway_GatewayType)(0),              // 1: kuma.mesh.v1alpha1.Dataplane.Networking.Gateway.GatewayType
	(Dataplane_Networking_TransparentProxying_IpFamilyMode)(0), // 2: kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.IpFamilyMode
	(*Dataplane)(nil),                                // 3: kuma.mesh.v1alpha1.Dataplane
	(*Dataplane_Networking)(nil),                     // 4: kuma.mesh.v1alpha1.Dataplane.Networking
	(*Dataplane_Probes)(nil),                         // 5: kuma.mesh.v1alpha1.Dataplane.Probes
	(*Dataplane_Networking_Inbound)(nil),             // 6: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound
	(*Dataplane_Networking_Outbound)(nil),            // 7: kuma.mesh.v1alpha1.Dataplane.Networking.Outbound
	(*Dataplane_Networking_Gateway)(nil),             // 8: kuma.mesh.v1alpha1.Dataplane.Networking.Gateway
	(*Dataplane_Networking_TransparentProxying)(nil), // 9: kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying
	nil, // 10: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.TagsEntry
	(*Dataplane_Networking_Inbound_Health)(nil),           // 11: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.Health
	(*Dataplane_Networking_Inbound_ServiceProbe)(nil),     // 12: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe
	(*Dataplane_Networking_Inbound_ServiceProbe_Tcp)(nil), // 13: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.Tcp
	nil, // 14: kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.TagsEntry
	(*Dataplane_Networking_Outbound_BackendRef)(nil), // 15: kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.BackendRef
	nil, // 16: kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.BackendRef.LabelsEntry
	nil, // 17: kuma.mesh.v1alpha1.Dataplane.Networking.Gateway.TagsEntry
	(*Dataplane_Networking_TransparentProxying_ReachableBackendRef)(nil), // 18: kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackendRef
	(*Dataplane_Networking_TransparentProxying_ReachableBackends)(nil),   // 19: kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackends
	nil,                               // 20: kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackendRef.LabelsEntry
	(*Dataplane_Probes_Endpoint)(nil), // 21: kuma.mesh.v1alpha1.Dataplane.Probes.Endpoint
	(*MetricsBackend)(nil),            // 22: kuma.mesh.v1alpha1.MetricsBackend
	(*EnvoyAdmin)(nil),                // 23: kuma.mesh.v1alpha1.EnvoyAdmin
	(*durationpb.Duration)(nil),       // 24: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil),    // 25: google.protobuf.UInt32Value
}
var file_api_mesh_v1alpha1_dataplane_proto_depIdxs = []int32{
	4,  // 0: kuma.mesh.v1alpha1.Dataplane.networking:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking
	22, // 1: kuma.mesh.v1alpha1.Dataplane.metrics:type_name -> kuma.mesh.v1alpha1.MetricsBackend
	5,  // 2: kuma.mesh.v1alpha1.Dataplane.probes:type_name -> kuma.mesh.v1alpha1.Dataplane.Probes
	8,  // 3: kuma.mesh.v1alpha1.Dataplane.Networking.gateway:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Gateway
	6,  // 4: kuma.mesh.v1alpha1.Dataplane.Networking.inbound:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Inbound
	7,  // 5: kuma.mesh.v1alpha1.Dataplane.Networking.outbound:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Outbound
	9,  // 6: kuma.mesh.v1alpha1.Dataplane.Networking.transparent_proxying:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying
	23, // 7: kuma.mesh.v1alpha1.Dataplane.Networking.admin:type_name -> kuma.mesh.v1alpha1.EnvoyAdmin
	21, // 8: kuma.mesh.v1alpha1.Dataplane.Probes.endpoints:type_name -> kuma.mesh.v1alpha1.Dataplane.Probes.Endpoint
	10, // 9: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.tags:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.TagsEntry
	11, // 10: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.health:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.Health
	12, // 11: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.serviceProbe:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe
	0,  // 12: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.state:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.State
	14, // 13: kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.tags:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.TagsEntry
	15, // 14: kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.backendRef:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.BackendRef
	17, // 15: kuma.mesh.v1alpha1.Dataplane.Networking.Gateway.tags:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Gateway.TagsEntry
	1,  // 16: kuma.mesh.v1alpha1.Dataplane.Networking.Gateway.type:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Gateway.GatewayType
	2,  // 17: kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ip_family_mode:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.IpFamilyMode
	19, // 18: kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.reachable_backends:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackends
	24, // 19: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.interval:type_name -> google.protobuf.Duration
	24, // 20: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.timeout:type_name -> google.protobuf.Duration
	25, // 21: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.unhealthy_threshold:type_name -> google.protobuf.UInt32Value
	25, // 22: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.healthy_threshold:type_name -> google.protobuf.UInt32Value
	13, // 23: kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.tcp:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Inbound.ServiceProbe.Tcp
	16, // 24: kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.BackendRef.labels:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.Outbound.BackendRef.LabelsEntry
	25, // 25: kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackendRef.port:type_name -> google.protobuf.UInt32Value
	20, // 26: kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackendRef.labels:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackendRef.LabelsEntry
	18, // 27: kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackends.refs:type_name -> kuma.mesh.v1alpha1.Dataplane.Networking.TransparentProxying.ReachableBackendRef
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_api_mesh_v1alpha1_dataplane_proto_init() }
func file_api_mesh_v1alpha1_dataplane_proto_init() {
	if File_api_mesh_v1alpha1_dataplane_proto != nil {
		return
	}
	file_api_mesh_v1alpha1_envoy_admin_proto_init()
	file_api_mesh_v1alpha1_metrics_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_mesh_v1alpha1_dataplane_proto_rawDesc), len(file_api_mesh_v1alpha1_dataplane_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_mesh_v1alpha1_dataplane_proto_goTypes,
		DependencyIndexes: file_api_mesh_v1alpha1_dataplane_proto_depIdxs,
		EnumInfos:         file_api_mesh_v1alpha1_dataplane_proto_enumTypes,
		MessageInfos:      file_api_mesh_v1alpha1_dataplane_proto_msgTypes,
	}.Build()
	File_api_mesh_v1alpha1_dataplane_proto = out.File
	file_api_mesh_v1alpha1_dataplane_proto_goTypes = nil
	file_api_mesh_v1alpha1_dataplane_proto_depIdxs = nil
}
