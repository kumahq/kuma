// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: mesh/v1alpha1/gateway_route.proto

package v1alpha1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/kumahq/kuma/api/mesh"
	_ "github.com/kumahq/protoc-gen-kumadoc/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GatewayRoute_HttpRoute_Match_Method int32

const (
	GatewayRoute_HttpRoute_Match_NONE    GatewayRoute_HttpRoute_Match_Method = 0
	GatewayRoute_HttpRoute_Match_CONNECT GatewayRoute_HttpRoute_Match_Method = 1
	GatewayRoute_HttpRoute_Match_DELETE  GatewayRoute_HttpRoute_Match_Method = 2
	GatewayRoute_HttpRoute_Match_GET     GatewayRoute_HttpRoute_Match_Method = 3
	GatewayRoute_HttpRoute_Match_HEAD    GatewayRoute_HttpRoute_Match_Method = 4
	GatewayRoute_HttpRoute_Match_OPTIONS GatewayRoute_HttpRoute_Match_Method = 5
	GatewayRoute_HttpRoute_Match_PATCH   GatewayRoute_HttpRoute_Match_Method = 6
	GatewayRoute_HttpRoute_Match_POST    GatewayRoute_HttpRoute_Match_Method = 7
	GatewayRoute_HttpRoute_Match_PUT     GatewayRoute_HttpRoute_Match_Method = 8
	GatewayRoute_HttpRoute_Match_TRACE   GatewayRoute_HttpRoute_Match_Method = 9
)

// Enum value maps for GatewayRoute_HttpRoute_Match_Method.
var (
	GatewayRoute_HttpRoute_Match_Method_name = map[int32]string{
		0: "NONE",
		1: "CONNECT",
		2: "DELETE",
		3: "GET",
		4: "HEAD",
		5: "OPTIONS",
		6: "PATCH",
		7: "POST",
		8: "PUT",
		9: "TRACE",
	}
	GatewayRoute_HttpRoute_Match_Method_value = map[string]int32{
		"NONE":    0,
		"CONNECT": 1,
		"DELETE":  2,
		"GET":     3,
		"HEAD":    4,
		"OPTIONS": 5,
		"PATCH":   6,
		"POST":    7,
		"PUT":     8,
		"TRACE":   9,
	}
)

func (x GatewayRoute_HttpRoute_Match_Method) Enum() *GatewayRoute_HttpRoute_Match_Method {
	p := new(GatewayRoute_HttpRoute_Match_Method)
	*p = x
	return p
}

func (x GatewayRoute_HttpRoute_Match_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayRoute_HttpRoute_Match_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_mesh_v1alpha1_gateway_route_proto_enumTypes[0].Descriptor()
}

func (GatewayRoute_HttpRoute_Match_Method) Type() protoreflect.EnumType {
	return &file_mesh_v1alpha1_gateway_route_proto_enumTypes[0]
}

func (x GatewayRoute_HttpRoute_Match_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Match_Method.Descriptor instead.
func (GatewayRoute_HttpRoute_Match_Method) EnumDescriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

type GatewayRoute_HttpRoute_Match_Path_MatchType int32

const (
	GatewayRoute_HttpRoute_Match_Path_EXACT  GatewayRoute_HttpRoute_Match_Path_MatchType = 0
	GatewayRoute_HttpRoute_Match_Path_PREFIX GatewayRoute_HttpRoute_Match_Path_MatchType = 1
	GatewayRoute_HttpRoute_Match_Path_REGEX  GatewayRoute_HttpRoute_Match_Path_MatchType = 2
)

// Enum value maps for GatewayRoute_HttpRoute_Match_Path_MatchType.
var (
	GatewayRoute_HttpRoute_Match_Path_MatchType_name = map[int32]string{
		0: "EXACT",
		1: "PREFIX",
		2: "REGEX",
	}
	GatewayRoute_HttpRoute_Match_Path_MatchType_value = map[string]int32{
		"EXACT":  0,
		"PREFIX": 1,
		"REGEX":  2,
	}
)

func (x GatewayRoute_HttpRoute_Match_Path_MatchType) Enum() *GatewayRoute_HttpRoute_Match_Path_MatchType {
	p := new(GatewayRoute_HttpRoute_Match_Path_MatchType)
	*p = x
	return p
}

func (x GatewayRoute_HttpRoute_Match_Path_MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayRoute_HttpRoute_Match_Path_MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_mesh_v1alpha1_gateway_route_proto_enumTypes[1].Descriptor()
}

func (GatewayRoute_HttpRoute_Match_Path_MatchType) Type() protoreflect.EnumType {
	return &file_mesh_v1alpha1_gateway_route_proto_enumTypes[1]
}

func (x GatewayRoute_HttpRoute_Match_Path_MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Match_Path_MatchType.Descriptor instead.
func (GatewayRoute_HttpRoute_Match_Path_MatchType) EnumDescriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 0, 0, 0}
}

type GatewayRoute_HttpRoute_Match_Header_MatchType int32

const (
	GatewayRoute_HttpRoute_Match_Header_EXACT GatewayRoute_HttpRoute_Match_Header_MatchType = 0
	GatewayRoute_HttpRoute_Match_Header_REGEX GatewayRoute_HttpRoute_Match_Header_MatchType = 1
)

// Enum value maps for GatewayRoute_HttpRoute_Match_Header_MatchType.
var (
	GatewayRoute_HttpRoute_Match_Header_MatchType_name = map[int32]string{
		0: "EXACT",
		1: "REGEX",
	}
	GatewayRoute_HttpRoute_Match_Header_MatchType_value = map[string]int32{
		"EXACT": 0,
		"REGEX": 1,
	}
)

func (x GatewayRoute_HttpRoute_Match_Header_MatchType) Enum() *GatewayRoute_HttpRoute_Match_Header_MatchType {
	p := new(GatewayRoute_HttpRoute_Match_Header_MatchType)
	*p = x
	return p
}

func (x GatewayRoute_HttpRoute_Match_Header_MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayRoute_HttpRoute_Match_Header_MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_mesh_v1alpha1_gateway_route_proto_enumTypes[2].Descriptor()
}

func (GatewayRoute_HttpRoute_Match_Header_MatchType) Type() protoreflect.EnumType {
	return &file_mesh_v1alpha1_gateway_route_proto_enumTypes[2]
}

func (x GatewayRoute_HttpRoute_Match_Header_MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Match_Header_MatchType.Descriptor instead.
func (GatewayRoute_HttpRoute_Match_Header_MatchType) EnumDescriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 0, 1, 0}
}

type GatewayRoute_HttpRoute_Match_Query_MatchType int32

const (
	GatewayRoute_HttpRoute_Match_Query_EXACT GatewayRoute_HttpRoute_Match_Query_MatchType = 0
	GatewayRoute_HttpRoute_Match_Query_REGEX GatewayRoute_HttpRoute_Match_Query_MatchType = 1
)

// Enum value maps for GatewayRoute_HttpRoute_Match_Query_MatchType.
var (
	GatewayRoute_HttpRoute_Match_Query_MatchType_name = map[int32]string{
		0: "EXACT",
		1: "REGEX",
	}
	GatewayRoute_HttpRoute_Match_Query_MatchType_value = map[string]int32{
		"EXACT": 0,
		"REGEX": 1,
	}
)

func (x GatewayRoute_HttpRoute_Match_Query_MatchType) Enum() *GatewayRoute_HttpRoute_Match_Query_MatchType {
	p := new(GatewayRoute_HttpRoute_Match_Query_MatchType)
	*p = x
	return p
}

func (x GatewayRoute_HttpRoute_Match_Query_MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayRoute_HttpRoute_Match_Query_MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_mesh_v1alpha1_gateway_route_proto_enumTypes[3].Descriptor()
}

func (GatewayRoute_HttpRoute_Match_Query_MatchType) Type() protoreflect.EnumType {
	return &file_mesh_v1alpha1_gateway_route_proto_enumTypes[3]
}

func (x GatewayRoute_HttpRoute_Match_Query_MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Match_Query_MatchType.Descriptor instead.
func (GatewayRoute_HttpRoute_Match_Query_MatchType) EnumDescriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 0, 2, 0}
}

type GatewayRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selectors is used to match this resource to Gateway listener.
	Selectors []*Selector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	// Conf specifies the route configuration.
	Conf *GatewayRoute_Conf `protobuf:"bytes,2,opt,name=conf,proto3" json:"conf,omitempty"`
}

func (x *GatewayRoute) Reset() {
	*x = GatewayRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute) ProtoMessage() {}

func (x *GatewayRoute) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute.ProtoReflect.Descriptor instead.
func (*GatewayRoute) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayRoute) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *GatewayRoute) GetConf() *GatewayRoute_Conf {
	if x != nil {
		return x.Conf
	}
	return nil
}

// Backend selects a target for HTTP request forwarding.
type GatewayRoute_Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Weight is the proportion of requests this backend will receive
	// when a forwarding rules specifies multiple backends. Traffic
	// weight is computed as "weight/sum(all weights)".
	//
	// A weight of 0 means that the destination will be ignored.
	Weight uint32 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	// Destination is a selector to match the individual endpoints to
	// which the gateway will forward.
	Destination map[string]string `protobuf:"bytes,2,rep,name=destination,proto3" json:"destination,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GatewayRoute_Backend) Reset() {
	*x = GatewayRoute_Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_Backend) ProtoMessage() {}

func (x *GatewayRoute_Backend) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_Backend.ProtoReflect.Descriptor instead.
func (*GatewayRoute_Backend) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GatewayRoute_Backend) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *GatewayRoute_Backend) GetDestination() map[string]string {
	if x != nil {
		return x.Destination
	}
	return nil
}

// UDP routes are valid for UDP listeners.
type GatewayRoute_UdpRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*GatewayRoute_UdpRoute_Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *GatewayRoute_UdpRoute) Reset() {
	*x = GatewayRoute_UdpRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_UdpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_UdpRoute) ProtoMessage() {}

func (x *GatewayRoute_UdpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_UdpRoute.ProtoReflect.Descriptor instead.
func (*GatewayRoute_UdpRoute) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GatewayRoute_UdpRoute) GetRules() []*GatewayRoute_UdpRoute_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// TLS routes are valid for listeners that accept connections over TLS.
type GatewayRoute_TcpRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*GatewayRoute_TcpRoute_Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *GatewayRoute_TcpRoute) Reset() {
	*x = GatewayRoute_TcpRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_TcpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_TcpRoute) ProtoMessage() {}

func (x *GatewayRoute_TcpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_TcpRoute.ProtoReflect.Descriptor instead.
func (*GatewayRoute_TcpRoute) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2}
}

func (x *GatewayRoute_TcpRoute) GetRules() []*GatewayRoute_TcpRoute_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// TLS routes are valid for listeners that accept connections over TLS.
// This can be a raw TLS connection, but can also be used to forward
// HTTP and other protocols that layer on top of TLS.
type GatewayRoute_TlsRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostnames lists the server names for which this route is valid. The
	// hostnames are matched against the TLS Server Name Indication extension
	// send by the client.
	Hostnames []string                      `protobuf:"bytes,1,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	Rules     []*GatewayRoute_TlsRoute_Rule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *GatewayRoute_TlsRoute) Reset() {
	*x = GatewayRoute_TlsRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_TlsRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_TlsRoute) ProtoMessage() {}

func (x *GatewayRoute_TlsRoute) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_TlsRoute.ProtoReflect.Descriptor instead.
func (*GatewayRoute_TlsRoute) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 3}
}

func (x *GatewayRoute_TlsRoute) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *GatewayRoute_TlsRoute) GetRules() []*GatewayRoute_TlsRoute_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// HTTP routes are valid for listeners that accept HTTP/1.1 and HTTP/2 over
// both TCP and TLS.
type GatewayRoute_HttpRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostnames lists the server names for which this route is valid. The
	// hostnames are matched against the TLS Server Name Indication extension
	// if this is a TLS session. They are also matched against the HTTP host
	// (authority) header in the client's HTTP request.
	Hostnames []string `protobuf:"bytes,1,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// Rules specifies how the gateway should match and process HTTP requests.
	Rules []*GatewayRoute_HttpRoute_Rule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *GatewayRoute_HttpRoute) Reset() {
	*x = GatewayRoute_HttpRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4}
}

func (x *GatewayRoute_HttpRoute) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *GatewayRoute_HttpRoute) GetRules() []*GatewayRoute_HttpRoute_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type GatewayRoute_Conf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each route resource may contain routing table entries for exactly one
	// protocol type.
	//
	// Types that are assignable to Route:
	//	*GatewayRoute_Conf_Udp
	//	*GatewayRoute_Conf_Tcp
	//	*GatewayRoute_Conf_Tls
	//	*GatewayRoute_Conf_Http
	Route isGatewayRoute_Conf_Route `protobuf_oneof:"route"`
}

func (x *GatewayRoute_Conf) Reset() {
	*x = GatewayRoute_Conf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_Conf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_Conf) ProtoMessage() {}

func (x *GatewayRoute_Conf) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_Conf.ProtoReflect.Descriptor instead.
func (*GatewayRoute_Conf) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 5}
}

func (m *GatewayRoute_Conf) GetRoute() isGatewayRoute_Conf_Route {
	if m != nil {
		return m.Route
	}
	return nil
}

func (x *GatewayRoute_Conf) GetUdp() *GatewayRoute_UdpRoute {
	if x, ok := x.GetRoute().(*GatewayRoute_Conf_Udp); ok {
		return x.Udp
	}
	return nil
}

func (x *GatewayRoute_Conf) GetTcp() *GatewayRoute_TcpRoute {
	if x, ok := x.GetRoute().(*GatewayRoute_Conf_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *GatewayRoute_Conf) GetTls() *GatewayRoute_TlsRoute {
	if x, ok := x.GetRoute().(*GatewayRoute_Conf_Tls); ok {
		return x.Tls
	}
	return nil
}

func (x *GatewayRoute_Conf) GetHttp() *GatewayRoute_HttpRoute {
	if x, ok := x.GetRoute().(*GatewayRoute_Conf_Http); ok {
		return x.Http
	}
	return nil
}

type isGatewayRoute_Conf_Route interface {
	isGatewayRoute_Conf_Route()
}

type GatewayRoute_Conf_Udp struct {
	Udp *GatewayRoute_UdpRoute `protobuf:"bytes,1,opt,name=udp,proto3,oneof"`
}

type GatewayRoute_Conf_Tcp struct {
	Tcp *GatewayRoute_TcpRoute `protobuf:"bytes,2,opt,name=tcp,proto3,oneof"`
}

type GatewayRoute_Conf_Tls struct {
	Tls *GatewayRoute_TlsRoute `protobuf:"bytes,3,opt,name=tls,proto3,oneof"`
}

type GatewayRoute_Conf_Http struct {
	Http *GatewayRoute_HttpRoute `protobuf:"bytes,4,opt,name=http,proto3,oneof"`
}

func (*GatewayRoute_Conf_Udp) isGatewayRoute_Conf_Route() {}

func (*GatewayRoute_Conf_Tcp) isGatewayRoute_Conf_Route() {}

func (*GatewayRoute_Conf_Tls) isGatewayRoute_Conf_Route() {}

func (*GatewayRoute_Conf_Http) isGatewayRoute_Conf_Route() {}

type GatewayRoute_UdpRoute_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayRoute_UdpRoute_Match) Reset() {
	*x = GatewayRoute_UdpRoute_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_UdpRoute_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_UdpRoute_Match) ProtoMessage() {}

func (x *GatewayRoute_UdpRoute_Match) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_UdpRoute_Match.ProtoReflect.Descriptor instead.
func (*GatewayRoute_UdpRoute_Match) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 1, 0}
}

type GatewayRoute_UdpRoute_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches  []*GatewayRoute_UdpRoute_Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	Backends []*GatewayRoute_Backend        `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *GatewayRoute_UdpRoute_Rule) Reset() {
	*x = GatewayRoute_UdpRoute_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_UdpRoute_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_UdpRoute_Rule) ProtoMessage() {}

func (x *GatewayRoute_UdpRoute_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_UdpRoute_Rule.ProtoReflect.Descriptor instead.
func (*GatewayRoute_UdpRoute_Rule) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *GatewayRoute_UdpRoute_Rule) GetMatches() []*GatewayRoute_UdpRoute_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *GatewayRoute_UdpRoute_Rule) GetBackends() []*GatewayRoute_Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

type GatewayRoute_TcpRoute_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayRoute_TcpRoute_Match) Reset() {
	*x = GatewayRoute_TcpRoute_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_TcpRoute_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_TcpRoute_Match) ProtoMessage() {}

func (x *GatewayRoute_TcpRoute_Match) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_TcpRoute_Match.ProtoReflect.Descriptor instead.
func (*GatewayRoute_TcpRoute_Match) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 0}
}

type GatewayRoute_TcpRoute_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches  []*GatewayRoute_TcpRoute_Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	Backends []*GatewayRoute_Backend        `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *GatewayRoute_TcpRoute_Rule) Reset() {
	*x = GatewayRoute_TcpRoute_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_TcpRoute_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_TcpRoute_Rule) ProtoMessage() {}

func (x *GatewayRoute_TcpRoute_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_TcpRoute_Rule.ProtoReflect.Descriptor instead.
func (*GatewayRoute_TcpRoute_Rule) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *GatewayRoute_TcpRoute_Rule) GetMatches() []*GatewayRoute_TcpRoute_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *GatewayRoute_TcpRoute_Rule) GetBackends() []*GatewayRoute_Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

type GatewayRoute_TlsRoute_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayRoute_TlsRoute_Match) Reset() {
	*x = GatewayRoute_TlsRoute_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_TlsRoute_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_TlsRoute_Match) ProtoMessage() {}

func (x *GatewayRoute_TlsRoute_Match) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_TlsRoute_Match.ProtoReflect.Descriptor instead.
func (*GatewayRoute_TlsRoute_Match) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 3, 0}
}

type GatewayRoute_TlsRoute_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches  []*GatewayRoute_TlsRoute_Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	Backends []*GatewayRoute_Backend        `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *GatewayRoute_TlsRoute_Rule) Reset() {
	*x = GatewayRoute_TlsRoute_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_TlsRoute_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_TlsRoute_Rule) ProtoMessage() {}

func (x *GatewayRoute_TlsRoute_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_TlsRoute_Rule.ProtoReflect.Descriptor instead.
func (*GatewayRoute_TlsRoute_Rule) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *GatewayRoute_TlsRoute_Rule) GetMatches() []*GatewayRoute_TlsRoute_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *GatewayRoute_TlsRoute_Rule) GetBackends() []*GatewayRoute_Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

// Match specifies the criteria for when a HTTP request matches a rule.
// The match is only considered successful if all of the specified
// conditions succeed (AND semantics). At least one match condition
// must be given.
type GatewayRoute_HttpRoute_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path            *GatewayRoute_HttpRoute_Match_Path     `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Method          GatewayRoute_HttpRoute_Match_Method    `protobuf:"varint,2,opt,name=method,proto3,enum=kuma.mesh.v1alpha1.GatewayRoute_HttpRoute_Match_Method" json:"method,omitempty"`
	Headers         []*GatewayRoute_HttpRoute_Match_Header `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	QueryParameters []*GatewayRoute_HttpRoute_Match_Query  `protobuf:"bytes,4,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
}

func (x *GatewayRoute_HttpRoute_Match) Reset() {
	*x = GatewayRoute_HttpRoute_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute_Match) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute_Match) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Match.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute_Match) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *GatewayRoute_HttpRoute_Match) GetPath() *GatewayRoute_HttpRoute_Match_Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GatewayRoute_HttpRoute_Match) GetMethod() GatewayRoute_HttpRoute_Match_Method {
	if x != nil {
		return x.Method
	}
	return GatewayRoute_HttpRoute_Match_NONE
}

func (x *GatewayRoute_HttpRoute_Match) GetHeaders() []*GatewayRoute_HttpRoute_Match_Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *GatewayRoute_HttpRoute_Match) GetQueryParameters() []*GatewayRoute_HttpRoute_Match_Query {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

type GatewayRoute_HttpRoute_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//	*GatewayRoute_HttpRoute_Filter_RequestHeader_
	//	*GatewayRoute_HttpRoute_Filter_Mirror_
	//	*GatewayRoute_HttpRoute_Filter_Redirect_
	Filter isGatewayRoute_HttpRoute_Filter_Filter `protobuf_oneof:"filter"`
}

func (x *GatewayRoute_HttpRoute_Filter) Reset() {
	*x = GatewayRoute_HttpRoute_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute_Filter) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Filter.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute_Filter) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (m *GatewayRoute_HttpRoute_Filter) GetFilter() isGatewayRoute_HttpRoute_Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *GatewayRoute_HttpRoute_Filter) GetRequestHeader() *GatewayRoute_HttpRoute_Filter_RequestHeader {
	if x, ok := x.GetFilter().(*GatewayRoute_HttpRoute_Filter_RequestHeader_); ok {
		return x.RequestHeader
	}
	return nil
}

func (x *GatewayRoute_HttpRoute_Filter) GetMirror() *GatewayRoute_HttpRoute_Filter_Mirror {
	if x, ok := x.GetFilter().(*GatewayRoute_HttpRoute_Filter_Mirror_); ok {
		return x.Mirror
	}
	return nil
}

func (x *GatewayRoute_HttpRoute_Filter) GetRedirect() *GatewayRoute_HttpRoute_Filter_Redirect {
	if x, ok := x.GetFilter().(*GatewayRoute_HttpRoute_Filter_Redirect_); ok {
		return x.Redirect
	}
	return nil
}

type isGatewayRoute_HttpRoute_Filter_Filter interface {
	isGatewayRoute_HttpRoute_Filter_Filter()
}

type GatewayRoute_HttpRoute_Filter_RequestHeader_ struct {
	RequestHeader *GatewayRoute_HttpRoute_Filter_RequestHeader `protobuf:"bytes,1,opt,name=request_header,json=requestHeader,proto3,oneof"`
}

type GatewayRoute_HttpRoute_Filter_Mirror_ struct {
	Mirror *GatewayRoute_HttpRoute_Filter_Mirror `protobuf:"bytes,2,opt,name=mirror,proto3,oneof"`
}

type GatewayRoute_HttpRoute_Filter_Redirect_ struct {
	Redirect *GatewayRoute_HttpRoute_Filter_Redirect `protobuf:"bytes,3,opt,name=redirect,proto3,oneof"`
}

func (*GatewayRoute_HttpRoute_Filter_RequestHeader_) isGatewayRoute_HttpRoute_Filter_Filter() {}

func (*GatewayRoute_HttpRoute_Filter_Mirror_) isGatewayRoute_HttpRoute_Filter_Filter() {}

func (*GatewayRoute_HttpRoute_Filter_Redirect_) isGatewayRoute_HttpRoute_Filter_Filter() {}

type GatewayRoute_HttpRoute_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Matches are checked in order. If any match is successful, the
	// rule is selected (OR semantics).
	Matches []*GatewayRoute_HttpRoute_Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	// Filters are request processing steps that are applied to
	// matched requests.
	Filters []*GatewayRoute_HttpRoute_Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// Backends is the set of services to which the gateway will
	// forward requests.
	Backends []*GatewayRoute_Backend `protobuf:"bytes,3,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *GatewayRoute_HttpRoute_Rule) Reset() {
	*x = GatewayRoute_HttpRoute_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute_Rule) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Rule.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute_Rule) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (x *GatewayRoute_HttpRoute_Rule) GetMatches() []*GatewayRoute_HttpRoute_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *GatewayRoute_HttpRoute_Rule) GetFilters() []*GatewayRoute_HttpRoute_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GatewayRoute_HttpRoute_Rule) GetBackends() []*GatewayRoute_Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

// Path matches may be "EXACT", "PREFIX", or "REGEX" matches. If
// the match type is not specified, "EXACT" is the default.
type GatewayRoute_HttpRoute_Match_Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match GatewayRoute_HttpRoute_Match_Path_MatchType `protobuf:"varint,1,opt,name=match,proto3,enum=kuma.mesh.v1alpha1.GatewayRoute_HttpRoute_Match_Path_MatchType" json:"match,omitempty"`
	// Value is the path to match against. For EXACT and PREFIX match
	// types, it must be a HTTP URI path. For the REGEX match type,
	// it must be a RE2 regular expression.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GatewayRoute_HttpRoute_Match_Path) Reset() {
	*x = GatewayRoute_HttpRoute_Match_Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute_Match_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute_Match_Path) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute_Match_Path) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Match_Path.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute_Match_Path) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (x *GatewayRoute_HttpRoute_Match_Path) GetMatch() GatewayRoute_HttpRoute_Match_Path_MatchType {
	if x != nil {
		return x.Match
	}
	return GatewayRoute_HttpRoute_Match_Path_EXACT
}

func (x *GatewayRoute_HttpRoute_Match_Path) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Header matches a value in a HTTP request header. Not that if
// the header is defined to have multiple values, a REGEX match
// must be used to match a specific value.
type GatewayRoute_HttpRoute_Match_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match GatewayRoute_HttpRoute_Match_Header_MatchType `protobuf:"varint,1,opt,name=match,proto3,enum=kuma.mesh.v1alpha1.GatewayRoute_HttpRoute_Match_Header_MatchType" json:"match,omitempty"`
	// Name of the HTTP header containing the value to match.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Value that the HTTP header value should be matched against.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GatewayRoute_HttpRoute_Match_Header) Reset() {
	*x = GatewayRoute_HttpRoute_Match_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute_Match_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute_Match_Header) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute_Match_Header) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Match_Header.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute_Match_Header) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 0, 1}
}

func (x *GatewayRoute_HttpRoute_Match_Header) GetMatch() GatewayRoute_HttpRoute_Match_Header_MatchType {
	if x != nil {
		return x.Match
	}
	return GatewayRoute_HttpRoute_Match_Header_EXACT
}

func (x *GatewayRoute_HttpRoute_Match_Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GatewayRoute_HttpRoute_Match_Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Query matches against HTTP request query parameters.
type GatewayRoute_HttpRoute_Match_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match GatewayRoute_HttpRoute_Match_Query_MatchType `protobuf:"varint,1,opt,name=match,proto3,enum=kuma.mesh.v1alpha1.GatewayRoute_HttpRoute_Match_Query_MatchType" json:"match,omitempty"`
	// Name of the query parameter containing the value to match.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Value that the query parameter value should be matched against.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GatewayRoute_HttpRoute_Match_Query) Reset() {
	*x = GatewayRoute_HttpRoute_Match_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute_Match_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute_Match_Query) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute_Match_Query) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Match_Query.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute_Match_Query) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 0, 2}
}

func (x *GatewayRoute_HttpRoute_Match_Query) GetMatch() GatewayRoute_HttpRoute_Match_Query_MatchType {
	if x != nil {
		return x.Match
	}
	return GatewayRoute_HttpRoute_Match_Query_EXACT
}

func (x *GatewayRoute_HttpRoute_Match_Query) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GatewayRoute_HttpRoute_Match_Query) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GatewayRoute_HttpRoute_Filter_RequestHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set    []*GatewayRoute_HttpRoute_Filter_RequestHeader_Header `protobuf:"bytes,1,rep,name=set,proto3" json:"set,omitempty"`
	Add    []*GatewayRoute_HttpRoute_Filter_RequestHeader_Header `protobuf:"bytes,2,rep,name=add,proto3" json:"add,omitempty"`
	Remove []string                                              `protobuf:"bytes,3,rep,name=remove,proto3" json:"remove,omitempty"`
}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader) Reset() {
	*x = GatewayRoute_HttpRoute_Filter_RequestHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute_Filter_RequestHeader) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Filter_RequestHeader.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute_Filter_RequestHeader) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 1, 0}
}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader) GetSet() []*GatewayRoute_HttpRoute_Filter_RequestHeader_Header {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader) GetAdd() []*GatewayRoute_HttpRoute_Filter_RequestHeader_Header {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader) GetRemove() []string {
	if x != nil {
		return x.Remove
	}
	return nil
}

// The mirror filter sends a percentage of HTTP requests to the
// given backend. The gateway ignores any responses to these requests.
type GatewayRoute_HttpRoute_Filter_Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backend denotes the service to which requests will be mirrored. The
	// "weight" field must not be given.
	Backend *GatewayRoute_Backend `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	// Percentage specifies the percentage of requests to mirror to
	// the backend (in the range 0.0 - 100.0, inclusive).
	Percentage *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *GatewayRoute_HttpRoute_Filter_Mirror) Reset() {
	*x = GatewayRoute_HttpRoute_Filter_Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute_Filter_Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute_Filter_Mirror) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute_Filter_Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Filter_Mirror.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute_Filter_Mirror) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 1, 1}
}

func (x *GatewayRoute_HttpRoute_Filter_Mirror) GetBackend() *GatewayRoute_Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *GatewayRoute_HttpRoute_Filter_Mirror) GetPercentage() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Percentage
	}
	return nil
}

// The redirect filter responds to the HTTP request immediately,
// without forwarding it to any backend. The response is a HTTP
// redirect message.
type GatewayRoute_HttpRoute_Filter_Redirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scheme for the redirect URL. Usually "http" or "https".
	Scheme string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// The hostname to redirect to.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The port to redirect to.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// The HTTP response status code. This must be in the range 300 - 308.
	StatusCode uint32 `protobuf:"varint,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *GatewayRoute_HttpRoute_Filter_Redirect) Reset() {
	*x = GatewayRoute_HttpRoute_Filter_Redirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute_Filter_Redirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute_Filter_Redirect) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute_Filter_Redirect) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Filter_Redirect.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute_Filter_Redirect) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 1, 2}
}

func (x *GatewayRoute_HttpRoute_Filter_Redirect) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *GatewayRoute_HttpRoute_Filter_Redirect) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GatewayRoute_HttpRoute_Filter_Redirect) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GatewayRoute_HttpRoute_Filter_Redirect) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type GatewayRoute_HttpRoute_Filter_RequestHeader_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader_Header) Reset() {
	*x = GatewayRoute_HttpRoute_Filter_RequestHeader_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRoute_HttpRoute_Filter_RequestHeader_Header) ProtoMessage() {}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader_Header) ProtoReflect() protoreflect.Message {
	mi := &file_mesh_v1alpha1_gateway_route_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRoute_HttpRoute_Filter_RequestHeader_Header.ProtoReflect.Descriptor instead.
func (*GatewayRoute_HttpRoute_Filter_RequestHeader_Header) Descriptor() ([]byte, []int) {
	return file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 4, 1, 0, 0}
}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader_Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GatewayRoute_HttpRoute_Filter_RequestHeader_Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_mesh_v1alpha1_gateway_route_proto protoreflect.FileDescriptor

var file_mesh_v1alpha1_gateway_route_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcc, 0x1f, 0x0a, 0x0c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x04, 0x63,
	0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x6d, 0x61,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x6e, 0x66, 0x1a, 0xe6, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x12, 0x24, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0c, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x75, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x75,
	0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x18, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x11, 0x9a,
	0x01, 0x0e, 0x08, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x2a, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3e, 0x0a,
	0x10, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x95, 0x02,
	0x0a, 0x08, 0x55, 0x64, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x75, 0x6d, 0x61,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x64, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x07,
	0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xa5, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x49, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x64, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x3a,
	0x04, 0x88, 0xb5, 0x18, 0x01, 0x1a, 0x95, 0x02, 0x0a, 0x08, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x07, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a,
	0xa5, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x75, 0x6d, 0x61,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x63, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42,
	0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x1a, 0xb3, 0x02,
	0x0a, 0x08, 0x54, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x6c, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x07, 0x0a, 0x05,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xa5, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x49,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x54, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75,
	0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x3a, 0x04, 0x88,
	0xb5, 0x18, 0x01, 0x1a, 0xeb, 0x12, 0x0a, 0x09, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x53, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42,
	0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x1a, 0xa1, 0x08, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x49,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b,
	0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6b, 0x75, 0x6d, 0x61,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x51, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x75,
	0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x61, 0x0a,
	0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0xb7, 0x01, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x55, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x09, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43,
	0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x02, 0x1a, 0xca, 0x01, 0x0a, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x88, 0xb5,
	0x18, 0x01, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x01, 0x1a, 0xc8, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x56, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x40, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x21, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58,
	0x10, 0x01, 0x22, 0x74, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f,
	0x53, 0x54, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x09, 0x1a, 0xc2, 0x07, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75,
	0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a,
	0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x58, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x1a, 0xab, 0x02, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6b, 0x75, 0x6d,
	0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x61, 0x64,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x1a, 0x4e, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xac, 0x01, 0x0a, 0x06, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42,
	0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42,
	0x0b, 0x12, 0x09, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x88,
	0xb5, 0x18, 0x01, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x10, 0xff, 0xff, 0x03, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0x88, 0xb5, 0x18, 0x01, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0xfa, 0x42, 0x05, 0x2a, 0x03, 0x28, 0xac, 0x02, 0xfa,
	0x42, 0x05, 0x2a, 0x03, 0x18, 0xb4, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x81, 0x02,
	0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x4b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a,
	0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x0c, 0x88, 0xb5, 0x18, 0x01, 0xfa,
	0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x73, 0x1a, 0x8e, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3d, 0x0a, 0x03, 0x75, 0x64,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x64, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x03, 0x75, 0x64, 0x70, 0x12, 0x3d, 0x0a, 0x03, 0x74, 0x63, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x3d, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x3a, 0x5b, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x16, 0x0a, 0x14, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x0e, 0x12, 0x0c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x06, 0x22, 0x04, 0x6d, 0x65, 0x73, 0x68,
	0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x02, 0x30, 0x01, 0xaa, 0x8c, 0x89, 0xa6, 0x01, 0x11, 0x3a, 0x0f,
	0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x42,
	0x4f, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75,
	0x6d, 0x61, 0x68, 0x71, 0x2f, 0x6b, 0x75, 0x6d, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x8a, 0xb5, 0x18, 0x21, 0x50,
	0x01, 0xa2, 0x01, 0x0c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0xf2, 0x01, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mesh_v1alpha1_gateway_route_proto_rawDescOnce sync.Once
	file_mesh_v1alpha1_gateway_route_proto_rawDescData = file_mesh_v1alpha1_gateway_route_proto_rawDesc
)

func file_mesh_v1alpha1_gateway_route_proto_rawDescGZIP() []byte {
	file_mesh_v1alpha1_gateway_route_proto_rawDescOnce.Do(func() {
		file_mesh_v1alpha1_gateway_route_proto_rawDescData = protoimpl.X.CompressGZIP(file_mesh_v1alpha1_gateway_route_proto_rawDescData)
	})
	return file_mesh_v1alpha1_gateway_route_proto_rawDescData
}

var file_mesh_v1alpha1_gateway_route_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mesh_v1alpha1_gateway_route_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_mesh_v1alpha1_gateway_route_proto_goTypes = []interface{}{
	(GatewayRoute_HttpRoute_Match_Method)(0),                   // 0: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Method
	(GatewayRoute_HttpRoute_Match_Path_MatchType)(0),           // 1: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Path.MatchType
	(GatewayRoute_HttpRoute_Match_Header_MatchType)(0),         // 2: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Header.MatchType
	(GatewayRoute_HttpRoute_Match_Query_MatchType)(0),          // 3: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Query.MatchType
	(*GatewayRoute)(nil),                                       // 4: kuma.mesh.v1alpha1.GatewayRoute
	(*GatewayRoute_Backend)(nil),                               // 5: kuma.mesh.v1alpha1.GatewayRoute.Backend
	(*GatewayRoute_UdpRoute)(nil),                              // 6: kuma.mesh.v1alpha1.GatewayRoute.UdpRoute
	(*GatewayRoute_TcpRoute)(nil),                              // 7: kuma.mesh.v1alpha1.GatewayRoute.TcpRoute
	(*GatewayRoute_TlsRoute)(nil),                              // 8: kuma.mesh.v1alpha1.GatewayRoute.TlsRoute
	(*GatewayRoute_HttpRoute)(nil),                             // 9: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute
	(*GatewayRoute_Conf)(nil),                                  // 10: kuma.mesh.v1alpha1.GatewayRoute.Conf
	nil,                                                        // 11: kuma.mesh.v1alpha1.GatewayRoute.Backend.DestinationEntry
	(*GatewayRoute_UdpRoute_Match)(nil),                        // 12: kuma.mesh.v1alpha1.GatewayRoute.UdpRoute.Match
	(*GatewayRoute_UdpRoute_Rule)(nil),                         // 13: kuma.mesh.v1alpha1.GatewayRoute.UdpRoute.Rule
	(*GatewayRoute_TcpRoute_Match)(nil),                        // 14: kuma.mesh.v1alpha1.GatewayRoute.TcpRoute.Match
	(*GatewayRoute_TcpRoute_Rule)(nil),                         // 15: kuma.mesh.v1alpha1.GatewayRoute.TcpRoute.Rule
	(*GatewayRoute_TlsRoute_Match)(nil),                        // 16: kuma.mesh.v1alpha1.GatewayRoute.TlsRoute.Match
	(*GatewayRoute_TlsRoute_Rule)(nil),                         // 17: kuma.mesh.v1alpha1.GatewayRoute.TlsRoute.Rule
	(*GatewayRoute_HttpRoute_Match)(nil),                       // 18: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match
	(*GatewayRoute_HttpRoute_Filter)(nil),                      // 19: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter
	(*GatewayRoute_HttpRoute_Rule)(nil),                        // 20: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Rule
	(*GatewayRoute_HttpRoute_Match_Path)(nil),                  // 21: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Path
	(*GatewayRoute_HttpRoute_Match_Header)(nil),                // 22: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Header
	(*GatewayRoute_HttpRoute_Match_Query)(nil),                 // 23: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Query
	(*GatewayRoute_HttpRoute_Filter_RequestHeader)(nil),        // 24: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.RequestHeader
	(*GatewayRoute_HttpRoute_Filter_Mirror)(nil),               // 25: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.Mirror
	(*GatewayRoute_HttpRoute_Filter_Redirect)(nil),             // 26: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.Redirect
	(*GatewayRoute_HttpRoute_Filter_RequestHeader_Header)(nil), // 27: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.RequestHeader.Header
	(*Selector)(nil),                                           // 28: kuma.mesh.v1alpha1.Selector
	(*wrapperspb.DoubleValue)(nil),                             // 29: google.protobuf.DoubleValue
}
var file_mesh_v1alpha1_gateway_route_proto_depIdxs = []int32{
	28, // 0: kuma.mesh.v1alpha1.GatewayRoute.selectors:type_name -> kuma.mesh.v1alpha1.Selector
	10, // 1: kuma.mesh.v1alpha1.GatewayRoute.conf:type_name -> kuma.mesh.v1alpha1.GatewayRoute.Conf
	11, // 2: kuma.mesh.v1alpha1.GatewayRoute.Backend.destination:type_name -> kuma.mesh.v1alpha1.GatewayRoute.Backend.DestinationEntry
	13, // 3: kuma.mesh.v1alpha1.GatewayRoute.UdpRoute.rules:type_name -> kuma.mesh.v1alpha1.GatewayRoute.UdpRoute.Rule
	15, // 4: kuma.mesh.v1alpha1.GatewayRoute.TcpRoute.rules:type_name -> kuma.mesh.v1alpha1.GatewayRoute.TcpRoute.Rule
	17, // 5: kuma.mesh.v1alpha1.GatewayRoute.TlsRoute.rules:type_name -> kuma.mesh.v1alpha1.GatewayRoute.TlsRoute.Rule
	20, // 6: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.rules:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Rule
	6,  // 7: kuma.mesh.v1alpha1.GatewayRoute.Conf.udp:type_name -> kuma.mesh.v1alpha1.GatewayRoute.UdpRoute
	7,  // 8: kuma.mesh.v1alpha1.GatewayRoute.Conf.tcp:type_name -> kuma.mesh.v1alpha1.GatewayRoute.TcpRoute
	8,  // 9: kuma.mesh.v1alpha1.GatewayRoute.Conf.tls:type_name -> kuma.mesh.v1alpha1.GatewayRoute.TlsRoute
	9,  // 10: kuma.mesh.v1alpha1.GatewayRoute.Conf.http:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute
	12, // 11: kuma.mesh.v1alpha1.GatewayRoute.UdpRoute.Rule.matches:type_name -> kuma.mesh.v1alpha1.GatewayRoute.UdpRoute.Match
	5,  // 12: kuma.mesh.v1alpha1.GatewayRoute.UdpRoute.Rule.backends:type_name -> kuma.mesh.v1alpha1.GatewayRoute.Backend
	14, // 13: kuma.mesh.v1alpha1.GatewayRoute.TcpRoute.Rule.matches:type_name -> kuma.mesh.v1alpha1.GatewayRoute.TcpRoute.Match
	5,  // 14: kuma.mesh.v1alpha1.GatewayRoute.TcpRoute.Rule.backends:type_name -> kuma.mesh.v1alpha1.GatewayRoute.Backend
	16, // 15: kuma.mesh.v1alpha1.GatewayRoute.TlsRoute.Rule.matches:type_name -> kuma.mesh.v1alpha1.GatewayRoute.TlsRoute.Match
	5,  // 16: kuma.mesh.v1alpha1.GatewayRoute.TlsRoute.Rule.backends:type_name -> kuma.mesh.v1alpha1.GatewayRoute.Backend
	21, // 17: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.path:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Path
	0,  // 18: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.method:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Method
	22, // 19: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.headers:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Header
	23, // 20: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.query_parameters:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Query
	24, // 21: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.request_header:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.RequestHeader
	25, // 22: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.mirror:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.Mirror
	26, // 23: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.redirect:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.Redirect
	18, // 24: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Rule.matches:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match
	19, // 25: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Rule.filters:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter
	5,  // 26: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Rule.backends:type_name -> kuma.mesh.v1alpha1.GatewayRoute.Backend
	1,  // 27: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Path.match:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Path.MatchType
	2,  // 28: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Header.match:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Header.MatchType
	3,  // 29: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Query.match:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Match.Query.MatchType
	27, // 30: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.RequestHeader.set:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.RequestHeader.Header
	27, // 31: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.RequestHeader.add:type_name -> kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.RequestHeader.Header
	5,  // 32: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.Mirror.backend:type_name -> kuma.mesh.v1alpha1.GatewayRoute.Backend
	29, // 33: kuma.mesh.v1alpha1.GatewayRoute.HttpRoute.Filter.Mirror.percentage:type_name -> google.protobuf.DoubleValue
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_mesh_v1alpha1_gateway_route_proto_init() }
func file_mesh_v1alpha1_gateway_route_proto_init() {
	if File_mesh_v1alpha1_gateway_route_proto != nil {
		return
	}
	file_mesh_v1alpha1_selector_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_UdpRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_TcpRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_TlsRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_Conf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_UdpRoute_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_UdpRoute_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_TcpRoute_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_TcpRoute_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_TlsRoute_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_TlsRoute_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute_Match_Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute_Match_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute_Match_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute_Filter_RequestHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute_Filter_Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute_Filter_Redirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesh_v1alpha1_gateway_route_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRoute_HttpRoute_Filter_RequestHeader_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mesh_v1alpha1_gateway_route_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*GatewayRoute_Conf_Udp)(nil),
		(*GatewayRoute_Conf_Tcp)(nil),
		(*GatewayRoute_Conf_Tls)(nil),
		(*GatewayRoute_Conf_Http)(nil),
	}
	file_mesh_v1alpha1_gateway_route_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*GatewayRoute_HttpRoute_Filter_RequestHeader_)(nil),
		(*GatewayRoute_HttpRoute_Filter_Mirror_)(nil),
		(*GatewayRoute_HttpRoute_Filter_Redirect_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mesh_v1alpha1_gateway_route_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mesh_v1alpha1_gateway_route_proto_goTypes,
		DependencyIndexes: file_mesh_v1alpha1_gateway_route_proto_depIdxs,
		EnumInfos:         file_mesh_v1alpha1_gateway_route_proto_enumTypes,
		MessageInfos:      file_mesh_v1alpha1_gateway_route_proto_msgTypes,
	}.Build()
	File_mesh_v1alpha1_gateway_route_proto = out.File
	file_mesh_v1alpha1_gateway_route_proto_rawDesc = nil
	file_mesh_v1alpha1_gateway_route_proto_goTypes = nil
	file_mesh_v1alpha1_gateway_route_proto_depIdxs = nil
}
