// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/mesh/v1alpha1/gateway_route.proto

package v1alpha1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/kumahq/kuma/api/mesh"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeshGatewayRoute_HttpRoute_Match_Path_MatchType int32

const (
	MeshGatewayRoute_HttpRoute_Match_Path_EXACT  MeshGatewayRoute_HttpRoute_Match_Path_MatchType = 0
	MeshGatewayRoute_HttpRoute_Match_Path_PREFIX MeshGatewayRoute_HttpRoute_Match_Path_MatchType = 1
	MeshGatewayRoute_HttpRoute_Match_Path_REGEX  MeshGatewayRoute_HttpRoute_Match_Path_MatchType = 2
)

// Enum value maps for MeshGatewayRoute_HttpRoute_Match_Path_MatchType.
var (
	MeshGatewayRoute_HttpRoute_Match_Path_MatchType_name = map[int32]string{
		0: "EXACT",
		1: "PREFIX",
		2: "REGEX",
	}
	MeshGatewayRoute_HttpRoute_Match_Path_MatchType_value = map[string]int32{
		"EXACT":  0,
		"PREFIX": 1,
		"REGEX":  2,
	}
)

func (x MeshGatewayRoute_HttpRoute_Match_Path_MatchType) Enum() *MeshGatewayRoute_HttpRoute_Match_Path_MatchType {
	p := new(MeshGatewayRoute_HttpRoute_Match_Path_MatchType)
	*p = x
	return p
}

func (x MeshGatewayRoute_HttpRoute_Match_Path_MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeshGatewayRoute_HttpRoute_Match_Path_MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_mesh_v1alpha1_gateway_route_proto_enumTypes[0].Descriptor()
}

func (MeshGatewayRoute_HttpRoute_Match_Path_MatchType) Type() protoreflect.EnumType {
	return &file_api_mesh_v1alpha1_gateway_route_proto_enumTypes[0]
}

func (x MeshGatewayRoute_HttpRoute_Match_Path_MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Match_Path_MatchType.Descriptor instead.
func (MeshGatewayRoute_HttpRoute_Match_Path_MatchType) EnumDescriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0}
}

type MeshGatewayRoute_HttpRoute_Match_Header_MatchType int32

const (
	MeshGatewayRoute_HttpRoute_Match_Header_EXACT   MeshGatewayRoute_HttpRoute_Match_Header_MatchType = 0
	MeshGatewayRoute_HttpRoute_Match_Header_REGEX   MeshGatewayRoute_HttpRoute_Match_Header_MatchType = 1
	MeshGatewayRoute_HttpRoute_Match_Header_ABSENT  MeshGatewayRoute_HttpRoute_Match_Header_MatchType = 2
	MeshGatewayRoute_HttpRoute_Match_Header_PRESENT MeshGatewayRoute_HttpRoute_Match_Header_MatchType = 3
)

// Enum value maps for MeshGatewayRoute_HttpRoute_Match_Header_MatchType.
var (
	MeshGatewayRoute_HttpRoute_Match_Header_MatchType_name = map[int32]string{
		0: "EXACT",
		1: "REGEX",
		2: "ABSENT",
		3: "PRESENT",
	}
	MeshGatewayRoute_HttpRoute_Match_Header_MatchType_value = map[string]int32{
		"EXACT":   0,
		"REGEX":   1,
		"ABSENT":  2,
		"PRESENT": 3,
	}
)

func (x MeshGatewayRoute_HttpRoute_Match_Header_MatchType) Enum() *MeshGatewayRoute_HttpRoute_Match_Header_MatchType {
	p := new(MeshGatewayRoute_HttpRoute_Match_Header_MatchType)
	*p = x
	return p
}

func (x MeshGatewayRoute_HttpRoute_Match_Header_MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeshGatewayRoute_HttpRoute_Match_Header_MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_mesh_v1alpha1_gateway_route_proto_enumTypes[1].Descriptor()
}

func (MeshGatewayRoute_HttpRoute_Match_Header_MatchType) Type() protoreflect.EnumType {
	return &file_api_mesh_v1alpha1_gateway_route_proto_enumTypes[1]
}

func (x MeshGatewayRoute_HttpRoute_Match_Header_MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Match_Header_MatchType.Descriptor instead.
func (MeshGatewayRoute_HttpRoute_Match_Header_MatchType) EnumDescriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 0, 1, 0}
}

type MeshGatewayRoute_HttpRoute_Match_Query_MatchType int32

const (
	MeshGatewayRoute_HttpRoute_Match_Query_EXACT MeshGatewayRoute_HttpRoute_Match_Query_MatchType = 0
	MeshGatewayRoute_HttpRoute_Match_Query_REGEX MeshGatewayRoute_HttpRoute_Match_Query_MatchType = 1
)

// Enum value maps for MeshGatewayRoute_HttpRoute_Match_Query_MatchType.
var (
	MeshGatewayRoute_HttpRoute_Match_Query_MatchType_name = map[int32]string{
		0: "EXACT",
		1: "REGEX",
	}
	MeshGatewayRoute_HttpRoute_Match_Query_MatchType_value = map[string]int32{
		"EXACT": 0,
		"REGEX": 1,
	}
)

func (x MeshGatewayRoute_HttpRoute_Match_Query_MatchType) Enum() *MeshGatewayRoute_HttpRoute_Match_Query_MatchType {
	p := new(MeshGatewayRoute_HttpRoute_Match_Query_MatchType)
	*p = x
	return p
}

func (x MeshGatewayRoute_HttpRoute_Match_Query_MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeshGatewayRoute_HttpRoute_Match_Query_MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_mesh_v1alpha1_gateway_route_proto_enumTypes[2].Descriptor()
}

func (MeshGatewayRoute_HttpRoute_Match_Query_MatchType) Type() protoreflect.EnumType {
	return &file_api_mesh_v1alpha1_gateway_route_proto_enumTypes[2]
}

func (x MeshGatewayRoute_HttpRoute_Match_Query_MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Match_Query_MatchType.Descriptor instead.
func (MeshGatewayRoute_HttpRoute_Match_Query_MatchType) EnumDescriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 0, 2, 0}
}

type MeshGatewayRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Selectors is used to match this resource to MeshGateway listener.
	Selectors []*Selector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	// Conf specifies the route configuration.
	Conf          *MeshGatewayRoute_Conf `protobuf:"bytes,2,opt,name=conf,proto3" json:"conf,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute) Reset() {
	*x = MeshGatewayRoute{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute) ProtoMessage() {}

func (x *MeshGatewayRoute) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0}
}

func (x *MeshGatewayRoute) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *MeshGatewayRoute) GetConf() *MeshGatewayRoute_Conf {
	if x != nil {
		return x.Conf
	}
	return nil
}

// Backend selects a target for HTTP request forwarding.
type MeshGatewayRoute_Backend struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Weight is the proportion of requests this backend will receive
	// when a forwarding rules specifies multiple backends. Traffic
	// weight is computed as "weight/sum(all weights)".
	//
	// A weight of 0 means that the destination will be ignored.
	Weight uint32 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	// Destination is a selector to match the individual endpoints to
	// which the gateway will forward.
	Destination   map[string]string `protobuf:"bytes,2,rep,name=destination,proto3" json:"destination,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_Backend) Reset() {
	*x = MeshGatewayRoute_Backend{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_Backend) ProtoMessage() {}

func (x *MeshGatewayRoute_Backend) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_Backend.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_Backend) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MeshGatewayRoute_Backend) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *MeshGatewayRoute_Backend) GetDestination() map[string]string {
	if x != nil {
		return x.Destination
	}
	return nil
}

// TCP routes are valid for listeners that accept connections over TCP.
type MeshGatewayRoute_TcpRoute struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Rules         []*MeshGatewayRoute_TcpRoute_Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_TcpRoute) Reset() {
	*x = MeshGatewayRoute_TcpRoute{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_TcpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_TcpRoute) ProtoMessage() {}

func (x *MeshGatewayRoute_TcpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_TcpRoute.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_TcpRoute) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MeshGatewayRoute_TcpRoute) GetRules() []*MeshGatewayRoute_TcpRoute_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// HTTP routes are valid for listeners that accept HTTP/1.1 and HTTP/2 over
// both TCP and TLS.
type MeshGatewayRoute_HttpRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hostnames lists the server names for which this route is valid. The
	// hostnames are matched against the TLS Server Name Indication extension
	// if this is a TLS session. They are also matched against the HTTP host
	// (authority) header in the client's HTTP request.
	Hostnames []string `protobuf:"bytes,1,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// Rules specifies how the gateway should match and process HTTP requests.
	Rules         []*MeshGatewayRoute_HttpRoute_Rule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute) Reset() {
	*x = MeshGatewayRoute_HttpRoute{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MeshGatewayRoute_HttpRoute) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute) GetRules() []*MeshGatewayRoute_HttpRoute_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type MeshGatewayRoute_Conf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Each route resource may contain routing table entries for exactly one
	// protocol type.
	//
	// Types that are valid to be assigned to Route:
	//
	//	*MeshGatewayRoute_Conf_Tcp
	//	*MeshGatewayRoute_Conf_Http
	Route         isMeshGatewayRoute_Conf_Route `protobuf_oneof:"route"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_Conf) Reset() {
	*x = MeshGatewayRoute_Conf{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_Conf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_Conf) ProtoMessage() {}

func (x *MeshGatewayRoute_Conf) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_Conf.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_Conf) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MeshGatewayRoute_Conf) GetRoute() isMeshGatewayRoute_Conf_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MeshGatewayRoute_Conf) GetTcp() *MeshGatewayRoute_TcpRoute {
	if x != nil {
		if x, ok := x.Route.(*MeshGatewayRoute_Conf_Tcp); ok {
			return x.Tcp
		}
	}
	return nil
}

func (x *MeshGatewayRoute_Conf) GetHttp() *MeshGatewayRoute_HttpRoute {
	if x != nil {
		if x, ok := x.Route.(*MeshGatewayRoute_Conf_Http); ok {
			return x.Http
		}
	}
	return nil
}

type isMeshGatewayRoute_Conf_Route interface {
	isMeshGatewayRoute_Conf_Route()
}

type MeshGatewayRoute_Conf_Tcp struct {
	Tcp *MeshGatewayRoute_TcpRoute `protobuf:"bytes,2,opt,name=tcp,proto3,oneof"`
}

type MeshGatewayRoute_Conf_Http struct {
	Http *MeshGatewayRoute_HttpRoute `protobuf:"bytes,4,opt,name=http,proto3,oneof"`
}

func (*MeshGatewayRoute_Conf_Tcp) isMeshGatewayRoute_Conf_Route() {}

func (*MeshGatewayRoute_Conf_Http) isMeshGatewayRoute_Conf_Route() {}

type MeshGatewayRoute_TcpRoute_Rule struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Backends      []*MeshGatewayRoute_Backend `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_TcpRoute_Rule) Reset() {
	*x = MeshGatewayRoute_TcpRoute_Rule{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_TcpRoute_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_TcpRoute_Rule) ProtoMessage() {}

func (x *MeshGatewayRoute_TcpRoute_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_TcpRoute_Rule.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_TcpRoute_Rule) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *MeshGatewayRoute_TcpRoute_Rule) GetBackends() []*MeshGatewayRoute_Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

// Match specifies the criteria for when a HTTP request matches a rule.
// The match is only considered successful if all of the specified
// conditions succeed (AND semantics). At least one match condition
// must be given.
type MeshGatewayRoute_HttpRoute_Match struct {
	state           protoimpl.MessageState                     `protogen:"open.v1"`
	Path            *MeshGatewayRoute_HttpRoute_Match_Path     `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Method          HttpMethod                                 `protobuf:"varint,2,opt,name=method,proto3,enum=kuma.mesh.v1alpha1.HttpMethod" json:"method,omitempty"`
	Headers         []*MeshGatewayRoute_HttpRoute_Match_Header `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	QueryParameters []*MeshGatewayRoute_HttpRoute_Match_Query  `protobuf:"bytes,4,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Match) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Match{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Match) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Match) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Match.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Match) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *MeshGatewayRoute_HttpRoute_Match) GetPath() *MeshGatewayRoute_HttpRoute_Match_Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Match) GetMethod() HttpMethod {
	if x != nil {
		return x.Method
	}
	return HttpMethod_NONE
}

func (x *MeshGatewayRoute_HttpRoute_Match) GetHeaders() []*MeshGatewayRoute_HttpRoute_Match_Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Match) GetQueryParameters() []*MeshGatewayRoute_HttpRoute_Match_Query {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

type MeshGatewayRoute_HttpRoute_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Filter:
	//
	//	*MeshGatewayRoute_HttpRoute_Filter_RequestHeader
	//	*MeshGatewayRoute_HttpRoute_Filter_Mirror_
	//	*MeshGatewayRoute_HttpRoute_Filter_Redirect_
	//	*MeshGatewayRoute_HttpRoute_Filter_Rewrite_
	//	*MeshGatewayRoute_HttpRoute_Filter_ResponseHeader
	Filter        isMeshGatewayRoute_HttpRoute_Filter_Filter `protobuf_oneof:"filter"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Filter) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Filter{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Filter) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Filter.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Filter) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *MeshGatewayRoute_HttpRoute_Filter) GetFilter() isMeshGatewayRoute_HttpRoute_Filter_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Filter) GetRequestHeader() *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter {
	if x != nil {
		if x, ok := x.Filter.(*MeshGatewayRoute_HttpRoute_Filter_RequestHeader); ok {
			return x.RequestHeader
		}
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Filter) GetMirror() *MeshGatewayRoute_HttpRoute_Filter_Mirror {
	if x != nil {
		if x, ok := x.Filter.(*MeshGatewayRoute_HttpRoute_Filter_Mirror_); ok {
			return x.Mirror
		}
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Filter) GetRedirect() *MeshGatewayRoute_HttpRoute_Filter_Redirect {
	if x != nil {
		if x, ok := x.Filter.(*MeshGatewayRoute_HttpRoute_Filter_Redirect_); ok {
			return x.Redirect
		}
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Filter) GetRewrite() *MeshGatewayRoute_HttpRoute_Filter_Rewrite {
	if x != nil {
		if x, ok := x.Filter.(*MeshGatewayRoute_HttpRoute_Filter_Rewrite_); ok {
			return x.Rewrite
		}
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Filter) GetResponseHeader() *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter {
	if x != nil {
		if x, ok := x.Filter.(*MeshGatewayRoute_HttpRoute_Filter_ResponseHeader); ok {
			return x.ResponseHeader
		}
	}
	return nil
}

type isMeshGatewayRoute_HttpRoute_Filter_Filter interface {
	isMeshGatewayRoute_HttpRoute_Filter_Filter()
}

type MeshGatewayRoute_HttpRoute_Filter_RequestHeader struct {
	RequestHeader *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter `protobuf:"bytes,1,opt,name=request_header,json=requestHeader,proto3,oneof"`
}

type MeshGatewayRoute_HttpRoute_Filter_Mirror_ struct {
	Mirror *MeshGatewayRoute_HttpRoute_Filter_Mirror `protobuf:"bytes,2,opt,name=mirror,proto3,oneof"`
}

type MeshGatewayRoute_HttpRoute_Filter_Redirect_ struct {
	Redirect *MeshGatewayRoute_HttpRoute_Filter_Redirect `protobuf:"bytes,3,opt,name=redirect,proto3,oneof"`
}

type MeshGatewayRoute_HttpRoute_Filter_Rewrite_ struct {
	Rewrite *MeshGatewayRoute_HttpRoute_Filter_Rewrite `protobuf:"bytes,4,opt,name=rewrite,proto3,oneof"`
}

type MeshGatewayRoute_HttpRoute_Filter_ResponseHeader struct {
	ResponseHeader *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter `protobuf:"bytes,5,opt,name=response_header,json=responseHeader,proto3,oneof"`
}

func (*MeshGatewayRoute_HttpRoute_Filter_RequestHeader) isMeshGatewayRoute_HttpRoute_Filter_Filter() {
}

func (*MeshGatewayRoute_HttpRoute_Filter_Mirror_) isMeshGatewayRoute_HttpRoute_Filter_Filter() {}

func (*MeshGatewayRoute_HttpRoute_Filter_Redirect_) isMeshGatewayRoute_HttpRoute_Filter_Filter() {}

func (*MeshGatewayRoute_HttpRoute_Filter_Rewrite_) isMeshGatewayRoute_HttpRoute_Filter_Filter() {}

func (*MeshGatewayRoute_HttpRoute_Filter_ResponseHeader) isMeshGatewayRoute_HttpRoute_Filter_Filter() {
}

type MeshGatewayRoute_HttpRoute_Rule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matches are checked in order. If any match is successful, the
	// rule is selected (OR semantics).
	Matches []*MeshGatewayRoute_HttpRoute_Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	// Filters are request processing steps that are applied to
	// matched requests.
	//
	// If the redirect filter is specified, it must be the only
	// filter given.
	Filters []*MeshGatewayRoute_HttpRoute_Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// Backends is the set of services to which the gateway will
	// forward requests. If a redirect filter is specified, no
	// backends are allowed. Otherwise, at least one backend
	// must be given.
	Backends      []*MeshGatewayRoute_Backend `protobuf:"bytes,3,rep,name=backends,proto3" json:"backends,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Rule) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Rule{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Rule) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Rule.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Rule) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *MeshGatewayRoute_HttpRoute_Rule) GetMatches() []*MeshGatewayRoute_HttpRoute_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Rule) GetFilters() []*MeshGatewayRoute_HttpRoute_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Rule) GetBackends() []*MeshGatewayRoute_Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

// Path matches may be "EXACT", "PREFIX", or "REGEX" matches. If
// the match type is not specified, "EXACT" is the default.
type MeshGatewayRoute_HttpRoute_Match_Path struct {
	state protoimpl.MessageState                          `protogen:"open.v1"`
	Match MeshGatewayRoute_HttpRoute_Match_Path_MatchType `protobuf:"varint,1,opt,name=match,proto3,enum=kuma.mesh.v1alpha1.MeshGatewayRoute_HttpRoute_Match_Path_MatchType" json:"match,omitempty"`
	// Value is the path to match against. For EXACT and PREFIX match
	// types, it must be a HTTP URI path. For the REGEX match type,
	// it must be a RE2 regular expression.
	// Note that a PREFIX match succeeds only if the prefix is the
	// the entire path or is followed by a /. I.e. a prefix of the
	// path in terms of path elements.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Match_Path) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Match_Path{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Match_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Match_Path) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Match_Path) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Match_Path.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Match_Path) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *MeshGatewayRoute_HttpRoute_Match_Path) GetMatch() MeshGatewayRoute_HttpRoute_Match_Path_MatchType {
	if x != nil {
		return x.Match
	}
	return MeshGatewayRoute_HttpRoute_Match_Path_EXACT
}

func (x *MeshGatewayRoute_HttpRoute_Match_Path) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Header matches a value in a HTTP request header. Not that if
// the header is defined to have multiple values, a REGEX match
// must be used to match a specific value.
type MeshGatewayRoute_HttpRoute_Match_Header struct {
	state protoimpl.MessageState                            `protogen:"open.v1"`
	Match MeshGatewayRoute_HttpRoute_Match_Header_MatchType `protobuf:"varint,1,opt,name=match,proto3,enum=kuma.mesh.v1alpha1.MeshGatewayRoute_HttpRoute_Match_Header_MatchType" json:"match,omitempty"`
	// Name of the HTTP header containing the value to match.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Value that the HTTP header value should be matched against.
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Match_Header) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Match_Header{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Match_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Match_Header) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Match_Header) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Match_Header.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Match_Header) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

func (x *MeshGatewayRoute_HttpRoute_Match_Header) GetMatch() MeshGatewayRoute_HttpRoute_Match_Header_MatchType {
	if x != nil {
		return x.Match
	}
	return MeshGatewayRoute_HttpRoute_Match_Header_EXACT
}

func (x *MeshGatewayRoute_HttpRoute_Match_Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeshGatewayRoute_HttpRoute_Match_Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Query matches against HTTP request query parameters.
type MeshGatewayRoute_HttpRoute_Match_Query struct {
	state protoimpl.MessageState                           `protogen:"open.v1"`
	Match MeshGatewayRoute_HttpRoute_Match_Query_MatchType `protobuf:"varint,1,opt,name=match,proto3,enum=kuma.mesh.v1alpha1.MeshGatewayRoute_HttpRoute_Match_Query_MatchType" json:"match,omitempty"`
	// Name of the query parameter containing the value to match.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Value that the query parameter value should be matched against.
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Match_Query) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Match_Query{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Match_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Match_Query) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Match_Query) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Match_Query.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Match_Query) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 0, 2}
}

func (x *MeshGatewayRoute_HttpRoute_Match_Query) GetMatch() MeshGatewayRoute_HttpRoute_Match_Query_MatchType {
	if x != nil {
		return x.Match
	}
	return MeshGatewayRoute_HttpRoute_Match_Query_EXACT
}

func (x *MeshGatewayRoute_HttpRoute_Match_Query) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeshGatewayRoute_HttpRoute_Match_Query) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type MeshGatewayRoute_HttpRoute_Filter_HeaderFilter struct {
	state         protoimpl.MessageState                                   `protogen:"open.v1"`
	Set           []*MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header `protobuf:"bytes,1,rep,name=set,proto3" json:"set,omitempty"`
	Add           []*MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header `protobuf:"bytes,2,rep,name=add,proto3" json:"add,omitempty"`
	Remove        []string                                                 `protobuf:"bytes,3,rep,name=remove,proto3" json:"remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Filter_HeaderFilter{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Filter_HeaderFilter) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Filter_HeaderFilter.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Filter_HeaderFilter) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 1, 0}
}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter) GetSet() []*MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter) GetAdd() []*MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter) GetRemove() []string {
	if x != nil {
		return x.Remove
	}
	return nil
}

// The mirror filter sends a percentage of HTTP requests to the
// given backend. The gateway ignores any responses to these requests.
type MeshGatewayRoute_HttpRoute_Filter_Mirror struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Backend denotes the service to which requests will be mirrored. The
	// "weight" field must not be given.
	Backend *MeshGatewayRoute_Backend `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty"`
	// Percentage specifies the percentage of requests to mirror to
	// the backend (in the range 0.0 - 100.0, inclusive).
	Percentage    *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Mirror) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Filter_Mirror{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Filter_Mirror) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Filter_Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Filter_Mirror.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Filter_Mirror) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 1, 1}
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Mirror) GetBackend() *MeshGatewayRoute_Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Mirror) GetPercentage() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Percentage
	}
	return nil
}

type MeshGatewayRoute_HttpRoute_Filter_Rewrite struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Path:
	//
	//	*MeshGatewayRoute_HttpRoute_Filter_Rewrite_ReplaceFull
	//	*MeshGatewayRoute_HttpRoute_Filter_Rewrite_ReplacePrefixMatch
	Path isMeshGatewayRoute_HttpRoute_Filter_Rewrite_Path `protobuf_oneof:"path"`
	// Option to indicate that during forwarding, the host header should
	// be swapped with the hostname of the upstream host chosen by the
	// Envoy's cluster manager. BE AWARE:
	// - it's mutually exclusive with request_header filter which
	// explicitly
	//
	//	replaces "host" header
	HostToBackendHostname bool `protobuf:"varint,3,opt,name=host_to_backend_hostname,json=hostToBackendHostname,proto3" json:"host_to_backend_hostname,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Rewrite) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Filter_Rewrite{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Rewrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Filter_Rewrite) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Filter_Rewrite) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Filter_Rewrite.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Filter_Rewrite) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 1, 2}
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Rewrite) GetPath() isMeshGatewayRoute_HttpRoute_Filter_Rewrite_Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Rewrite) GetReplaceFull() string {
	if x != nil {
		if x, ok := x.Path.(*MeshGatewayRoute_HttpRoute_Filter_Rewrite_ReplaceFull); ok {
			return x.ReplaceFull
		}
	}
	return ""
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Rewrite) GetReplacePrefixMatch() string {
	if x != nil {
		if x, ok := x.Path.(*MeshGatewayRoute_HttpRoute_Filter_Rewrite_ReplacePrefixMatch); ok {
			return x.ReplacePrefixMatch
		}
	}
	return ""
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Rewrite) GetHostToBackendHostname() bool {
	if x != nil {
		return x.HostToBackendHostname
	}
	return false
}

type isMeshGatewayRoute_HttpRoute_Filter_Rewrite_Path interface {
	isMeshGatewayRoute_HttpRoute_Filter_Rewrite_Path()
}

type MeshGatewayRoute_HttpRoute_Filter_Rewrite_ReplaceFull struct {
	ReplaceFull string `protobuf:"bytes,1,opt,name=replace_full,json=replaceFull,proto3,oneof"`
}

type MeshGatewayRoute_HttpRoute_Filter_Rewrite_ReplacePrefixMatch struct {
	// Note that rewriting "/prefix" to "/" will do the right thing:
	// - the path "/prefix" is rewritten to "/"
	// - the path "/prefix/rest" is rewritten to "/rest"
	ReplacePrefixMatch string `protobuf:"bytes,2,opt,name=replace_prefix_match,json=replacePrefixMatch,proto3,oneof"`
}

func (*MeshGatewayRoute_HttpRoute_Filter_Rewrite_ReplaceFull) isMeshGatewayRoute_HttpRoute_Filter_Rewrite_Path() {
}

func (*MeshGatewayRoute_HttpRoute_Filter_Rewrite_ReplacePrefixMatch) isMeshGatewayRoute_HttpRoute_Filter_Rewrite_Path() {
}

// The redirect filter responds to the HTTP request immediately,
// without forwarding it to any backend. The response is a HTTP
// redirect message.
type MeshGatewayRoute_HttpRoute_Filter_Redirect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The scheme for the redirect URL. Usually "http" or "https".
	Scheme string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// The hostname to redirect to.
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The port to redirect to.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// The HTTP response status code. This must be in the range 300 - 308.
	StatusCode    uint32                                     `protobuf:"varint,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Path          *MeshGatewayRoute_HttpRoute_Filter_Rewrite `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Redirect) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Filter_Redirect{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Redirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Filter_Redirect) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Filter_Redirect) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Filter_Redirect.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Filter_Redirect) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 1, 3}
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Redirect) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Redirect) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Redirect) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Redirect) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *MeshGatewayRoute_HttpRoute_Filter_Redirect) GetPath() *MeshGatewayRoute_HttpRoute_Filter_Rewrite {
	if x != nil {
		return x.Path
	}
	return nil
}

type MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header) Reset() {
	*x = MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header{}
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header) ProtoMessage() {}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header) ProtoReflect() protoreflect.Message {
	mi := &file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header.ProtoReflect.Descriptor instead.
func (*MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header) Descriptor() ([]byte, []int) {
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP(), []int{0, 2, 1, 0, 0}
}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_api_mesh_v1alpha1_gateway_route_proto protoreflect.FileDescriptor

const file_api_mesh_v1alpha1_gateway_route_proto_rawDesc = "" +
	"\n" +
	"%api/mesh/v1alpha1/gateway_route.proto\x12\x12kuma.mesh.v1alpha1\x1a\x16api/mesh/options.proto\x1a#api/mesh/v1alpha1/http_method.proto\x1a api/mesh/v1alpha1/selector.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x17validate/validate.proto\"\xeb\x1b\n" +
	"\x10MeshGatewayRoute\x12D\n" +
	"\tselectors\x18\x01 \x03(\v2\x1c.kuma.mesh.v1alpha1.SelectorB\b\xfaB\x05\x92\x01\x02\b\x01R\tselectors\x12G\n" +
	"\x04conf\x18\x02 \x01(\v2).kuma.mesh.v1alpha1.MeshGatewayRoute.ConfB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x04conf\x1a\xe2\x01\n" +
	"\aBackend\x12 \n" +
	"\x06weight\x18\x01 \x01(\rB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06weight\x12u\n" +
	"\vdestination\x18\x02 \x03(\v2=.kuma.mesh.v1alpha1.MeshGatewayRoute.Backend.DestinationEntryB\x14\xfaB\x11\x9a\x01\x0e\b\x01\"\x04r\x02\x10\x01*\x04r\x02\x10\x01R\vdestination\x1a>\n" +
	"\x10DestinationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xba\x01\n" +
	"\bTcpRoute\x12R\n" +
	"\x05rules\x18\x01 \x03(\v22.kuma.mesh.v1alpha1.MeshGatewayRoute.TcpRoute.RuleB\b\xfaB\x05\x92\x01\x02\b\x01R\x05rules\x1aZ\n" +
	"\x04Rule\x12R\n" +
	"\bbackends\x18\x02 \x03(\v2,.kuma.mesh.v1alpha1.MeshGatewayRoute.BackendB\b\xfaB\x05\x92\x01\x02\b\x01R\bbackends\x1a\xa3\x15\n" +
	"\tHttpRoute\x12\x1c\n" +
	"\thostnames\x18\x01 \x03(\tR\thostnames\x12S\n" +
	"\x05rules\x18\x02 \x03(\v23.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.RuleB\b\xfaB\x05\x92\x01\x02\b\x01R\x05rules\x1a\xac\a\n" +
	"\x05Match\x12M\n" +
	"\x04path\x18\x01 \x01(\v29.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.PathR\x04path\x126\n" +
	"\x06method\x18\x02 \x01(\x0e2\x1e.kuma.mesh.v1alpha1.HttpMethodR\x06method\x12U\n" +
	"\aheaders\x18\x03 \x03(\v2;.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.HeaderR\aheaders\x12e\n" +
	"\x10query_parameters\x18\x04 \x03(\v2:.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.QueryR\x0fqueryParameters\x1a\xb4\x01\n" +
	"\x04Path\x12Y\n" +
	"\x05match\x18\x01 \x01(\x0e2C.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Path.MatchTypeR\x05match\x12\"\n" +
	"\x05value\x18\x02 \x01(\tB\f\xfaB\t\x8a\x01\x02\x10\x01r\x02\x10\x01R\x05value\"-\n" +
	"\tMatchType\x12\t\n" +
	"\x05EXACT\x10\x00\x12\n" +
	"\n" +
	"\x06PREFIX\x10\x01\x12\t\n" +
	"\x05REGEX\x10\x02\x1a\xdf\x01\n" +
	"\x06Header\x12[\n" +
	"\x05match\x18\x01 \x01(\x0e2E.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Header.MatchTypeR\x05match\x12\x1c\n" +
	"\x04name\x18\x02 \x01(\tB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x04name\x12\x1e\n" +
	"\x05value\x18\x03 \x01(\tB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05value\":\n" +
	"\tMatchType\x12\t\n" +
	"\x05EXACT\x10\x00\x12\t\n" +
	"\x05REGEX\x10\x01\x12\n" +
	"\n" +
	"\x06ABSENT\x10\x02\x12\v\n" +
	"\aPRESENT\x10\x03\x1a\xc4\x01\n" +
	"\x05Query\x12Z\n" +
	"\x05match\x18\x01 \x01(\x0e2D.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Query.MatchTypeR\x05match\x12\x1c\n" +
	"\x04name\x18\x02 \x01(\tB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x04name\x12\x1e\n" +
	"\x05value\x18\x03 \x01(\tB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05value\"!\n" +
	"\tMatchType\x12\t\n" +
	"\x05EXACT\x10\x00\x12\t\n" +
	"\x05REGEX\x10\x01\x1a\xf5\n" +
	"\n" +
	"\x06Filter\x12k\n" +
	"\x0erequest_header\x18\x01 \x01(\v2B.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilterH\x00R\rrequestHeader\x12V\n" +
	"\x06mirror\x18\x02 \x01(\v2<.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.MirrorH\x00R\x06mirror\x12\\\n" +
	"\bredirect\x18\x03 \x01(\v2>.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.RedirectH\x00R\bredirect\x12Y\n" +
	"\arewrite\x18\x04 \x01(\v2=.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.RewriteH\x00R\arewrite\x12m\n" +
	"\x0fresponse_header\x18\x05 \x01(\v2B.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilterH\x00R\x0eresponseHeader\x1a\xa8\x02\n" +
	"\fHeaderFilter\x12[\n" +
	"\x03set\x18\x01 \x03(\v2I.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilter.HeaderR\x03set\x12[\n" +
	"\x03add\x18\x02 \x03(\v2I.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilter.HeaderR\x03add\x12\x16\n" +
	"\x06remove\x18\x03 \x03(\tR\x06remove\x1aF\n" +
	"\x06Header\x12\x1c\n" +
	"\x04name\x18\x01 \x01(\tB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x04name\x12\x1e\n" +
	"\x05value\x18\x02 \x01(\tB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05value\x1a\xa8\x01\n" +
	"\x06Mirror\x12P\n" +
	"\abackend\x18\x01 \x01(\v2,.kuma.mesh.v1alpha1.MeshGatewayRoute.BackendB\b\xfaB\x05\x8a\x01\x02\x10\x01R\abackend\x12L\n" +
	"\n" +
	"percentage\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueB\x0e\xfaB\v\x12\t\x19\x00\x00\x00\x00\x00\x00Y@R\n" +
	"percentage\x1a\xa3\x01\n" +
	"\aRewrite\x12#\n" +
	"\freplace_full\x18\x01 \x01(\tH\x00R\vreplaceFull\x122\n" +
	"\x14replace_prefix_match\x18\x02 \x01(\tH\x00R\x12replacePrefixMatch\x127\n" +
	"\x18host_to_backend_hostname\x18\x03 \x01(\bR\x15hostToBackendHostnameB\x06\n" +
	"\x04path\x1a\xf7\x01\n" +
	"\bRedirect\x12 \n" +
	"\x06scheme\x18\x01 \x01(\tB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06scheme\x12$\n" +
	"\bhostname\x18\x02 \x01(\tB\b\xfaB\x05\x8a\x01\x02\x10\x01R\bhostname\x12\x1d\n" +
	"\x04port\x18\x03 \x01(\rB\t\xfaB\x06*\x04\x10\xff\xff\x03R\x04port\x121\n" +
	"\vstatus_code\x18\x04 \x01(\rB\x10\xfaB\r\x8a\x01\x02\x10\x01*\x06\x18\xb4\x02(\xac\x02R\n" +
	"statusCode\x12Q\n" +
	"\x04path\x18\x05 \x01(\v2=.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.RewriteR\x04pathB\b\n" +
	"\x06filter\x1a\xfb\x01\n" +
	"\x04Rule\x12X\n" +
	"\amatches\x18\x01 \x03(\v24.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.MatchB\b\xfaB\x05\x92\x01\x02\b\x01R\amatches\x12O\n" +
	"\afilters\x18\x02 \x03(\v25.kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.FilterR\afilters\x12H\n" +
	"\bbackends\x18\x03 \x03(\v2,.kuma.mesh.v1alpha1.MeshGatewayRoute.BackendR\bbackends\x1a\x98\x01\n" +
	"\x04Conf\x12A\n" +
	"\x03tcp\x18\x02 \x01(\v2-.kuma.mesh.v1alpha1.MeshGatewayRoute.TcpRouteH\x00R\x03tcp\x12D\n" +
	"\x04http\x18\x04 \x01(\v2..kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRouteH\x00R\x04httpB\a\n" +
	"\x05route:e\xaa\x8c\x89\xa6\x01_\n" +
	"\x18MeshGatewayRouteResource\x12\x10MeshGatewayRoute\"\x04mesh:\x12\n" +
	"\x10meshgatewayrouteR\x17model.GlobalToZonesFlagB*Z(github.com/kumahq/kuma/api/mesh/v1alpha1b\x06proto3"

var (
	file_api_mesh_v1alpha1_gateway_route_proto_rawDescOnce sync.Once
	file_api_mesh_v1alpha1_gateway_route_proto_rawDescData []byte
)

func file_api_mesh_v1alpha1_gateway_route_proto_rawDescGZIP() []byte {
	file_api_mesh_v1alpha1_gateway_route_proto_rawDescOnce.Do(func() {
		file_api_mesh_v1alpha1_gateway_route_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_mesh_v1alpha1_gateway_route_proto_rawDesc), len(file_api_mesh_v1alpha1_gateway_route_proto_rawDesc)))
	})
	return file_api_mesh_v1alpha1_gateway_route_proto_rawDescData
}

var file_api_mesh_v1alpha1_gateway_route_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_mesh_v1alpha1_gateway_route_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_api_mesh_v1alpha1_gateway_route_proto_goTypes = []any{
	(MeshGatewayRoute_HttpRoute_Match_Path_MatchType)(0),          // 0: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Path.MatchType
	(MeshGatewayRoute_HttpRoute_Match_Header_MatchType)(0),        // 1: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Header.MatchType
	(MeshGatewayRoute_HttpRoute_Match_Query_MatchType)(0),         // 2: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Query.MatchType
	(*MeshGatewayRoute)(nil),                                      // 3: kuma.mesh.v1alpha1.MeshGatewayRoute
	(*MeshGatewayRoute_Backend)(nil),                              // 4: kuma.mesh.v1alpha1.MeshGatewayRoute.Backend
	(*MeshGatewayRoute_TcpRoute)(nil),                             // 5: kuma.mesh.v1alpha1.MeshGatewayRoute.TcpRoute
	(*MeshGatewayRoute_HttpRoute)(nil),                            // 6: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute
	(*MeshGatewayRoute_Conf)(nil),                                 // 7: kuma.mesh.v1alpha1.MeshGatewayRoute.Conf
	nil,                                                           // 8: kuma.mesh.v1alpha1.MeshGatewayRoute.Backend.DestinationEntry
	(*MeshGatewayRoute_TcpRoute_Rule)(nil),                        // 9: kuma.mesh.v1alpha1.MeshGatewayRoute.TcpRoute.Rule
	(*MeshGatewayRoute_HttpRoute_Match)(nil),                      // 10: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match
	(*MeshGatewayRoute_HttpRoute_Filter)(nil),                     // 11: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter
	(*MeshGatewayRoute_HttpRoute_Rule)(nil),                       // 12: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Rule
	(*MeshGatewayRoute_HttpRoute_Match_Path)(nil),                 // 13: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Path
	(*MeshGatewayRoute_HttpRoute_Match_Header)(nil),               // 14: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Header
	(*MeshGatewayRoute_HttpRoute_Match_Query)(nil),                // 15: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Query
	(*MeshGatewayRoute_HttpRoute_Filter_HeaderFilter)(nil),        // 16: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilter
	(*MeshGatewayRoute_HttpRoute_Filter_Mirror)(nil),              // 17: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.Mirror
	(*MeshGatewayRoute_HttpRoute_Filter_Rewrite)(nil),             // 18: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.Rewrite
	(*MeshGatewayRoute_HttpRoute_Filter_Redirect)(nil),            // 19: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.Redirect
	(*MeshGatewayRoute_HttpRoute_Filter_HeaderFilter_Header)(nil), // 20: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilter.Header
	(*Selector)(nil),                                              // 21: kuma.mesh.v1alpha1.Selector
	(HttpMethod)(0),                                               // 22: kuma.mesh.v1alpha1.HttpMethod
	(*wrapperspb.DoubleValue)(nil),                                // 23: google.protobuf.DoubleValue
}
var file_api_mesh_v1alpha1_gateway_route_proto_depIdxs = []int32{
	21, // 0: kuma.mesh.v1alpha1.MeshGatewayRoute.selectors:type_name -> kuma.mesh.v1alpha1.Selector
	7,  // 1: kuma.mesh.v1alpha1.MeshGatewayRoute.conf:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.Conf
	8,  // 2: kuma.mesh.v1alpha1.MeshGatewayRoute.Backend.destination:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.Backend.DestinationEntry
	9,  // 3: kuma.mesh.v1alpha1.MeshGatewayRoute.TcpRoute.rules:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.TcpRoute.Rule
	12, // 4: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.rules:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Rule
	5,  // 5: kuma.mesh.v1alpha1.MeshGatewayRoute.Conf.tcp:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.TcpRoute
	6,  // 6: kuma.mesh.v1alpha1.MeshGatewayRoute.Conf.http:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute
	4,  // 7: kuma.mesh.v1alpha1.MeshGatewayRoute.TcpRoute.Rule.backends:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.Backend
	13, // 8: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.path:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Path
	22, // 9: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.method:type_name -> kuma.mesh.v1alpha1.HttpMethod
	14, // 10: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.headers:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Header
	15, // 11: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.query_parameters:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Query
	16, // 12: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.request_header:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilter
	17, // 13: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.mirror:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.Mirror
	19, // 14: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.redirect:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.Redirect
	18, // 15: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.rewrite:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.Rewrite
	16, // 16: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.response_header:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilter
	10, // 17: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Rule.matches:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match
	11, // 18: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Rule.filters:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter
	4,  // 19: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Rule.backends:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.Backend
	0,  // 20: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Path.match:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Path.MatchType
	1,  // 21: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Header.match:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Header.MatchType
	2,  // 22: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Query.match:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Match.Query.MatchType
	20, // 23: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilter.set:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilter.Header
	20, // 24: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilter.add:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.HeaderFilter.Header
	4,  // 25: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.Mirror.backend:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.Backend
	23, // 26: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.Mirror.percentage:type_name -> google.protobuf.DoubleValue
	18, // 27: kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.Redirect.path:type_name -> kuma.mesh.v1alpha1.MeshGatewayRoute.HttpRoute.Filter.Rewrite
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_api_mesh_v1alpha1_gateway_route_proto_init() }
func file_api_mesh_v1alpha1_gateway_route_proto_init() {
	if File_api_mesh_v1alpha1_gateway_route_proto != nil {
		return
	}
	file_api_mesh_v1alpha1_http_method_proto_init()
	file_api_mesh_v1alpha1_selector_proto_init()
	file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[4].OneofWrappers = []any{
		(*MeshGatewayRoute_Conf_Tcp)(nil),
		(*MeshGatewayRoute_Conf_Http)(nil),
	}
	file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[8].OneofWrappers = []any{
		(*MeshGatewayRoute_HttpRoute_Filter_RequestHeader)(nil),
		(*MeshGatewayRoute_HttpRoute_Filter_Mirror_)(nil),
		(*MeshGatewayRoute_HttpRoute_Filter_Redirect_)(nil),
		(*MeshGatewayRoute_HttpRoute_Filter_Rewrite_)(nil),
		(*MeshGatewayRoute_HttpRoute_Filter_ResponseHeader)(nil),
	}
	file_api_mesh_v1alpha1_gateway_route_proto_msgTypes[15].OneofWrappers = []any{
		(*MeshGatewayRoute_HttpRoute_Filter_Rewrite_ReplaceFull)(nil),
		(*MeshGatewayRoute_HttpRoute_Filter_Rewrite_ReplacePrefixMatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_mesh_v1alpha1_gateway_route_proto_rawDesc), len(file_api_mesh_v1alpha1_gateway_route_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_mesh_v1alpha1_gateway_route_proto_goTypes,
		DependencyIndexes: file_api_mesh_v1alpha1_gateway_route_proto_depIdxs,
		EnumInfos:         file_api_mesh_v1alpha1_gateway_route_proto_enumTypes,
		MessageInfos:      file_api_mesh_v1alpha1_gateway_route_proto_msgTypes,
	}.Build()
	File_api_mesh_v1alpha1_gateway_route_proto = out.File
	file_api_mesh_v1alpha1_gateway_route_proto_goTypes = nil
	file_api_mesh_v1alpha1_gateway_route_proto_depIdxs = nil
}
