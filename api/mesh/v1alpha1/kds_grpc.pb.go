// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.0
// source: api/mesh/v1alpha1/kds.proto

package v1alpha1

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GlobalKDSService_StreamXDSConfigs_FullMethodName = "/kuma.mesh.v1alpha1.GlobalKDSService/StreamXDSConfigs"
	GlobalKDSService_StreamStats_FullMethodName      = "/kuma.mesh.v1alpha1.GlobalKDSService/StreamStats"
	GlobalKDSService_StreamClusters_FullMethodName   = "/kuma.mesh.v1alpha1.GlobalKDSService/StreamClusters"
	GlobalKDSService_HealthCheck_FullMethodName      = "/kuma.mesh.v1alpha1.GlobalKDSService/HealthCheck"
)

// GlobalKDSServiceClient is the client API for GlobalKDSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalKDSServiceClient interface {
	// StreamXDSConfigs is logically a service exposed by Zone CP so Global CP can
	// execute Config Dumps. It is however represented by bi-directional streaming
	// to leverage existing connection from Zone CP to Global CP.
	StreamXDSConfigs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[XDSConfigResponse, XDSConfigRequest], error)
	// StreamStats is logically a service exposed by Zone CP so Global CP can
	// execute kuma-dp stats requests. It is however represented by bi-directional
	// streaming to leverage existing connection from Zone CP to Global CP.
	StreamStats(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StatsResponse, StatsRequest], error)
	// StreamStats is logically a service exposed by Zone CP so Global CP can
	// execute kuma-dp clusters request. It is however represented by
	// bi-directional streaming to leverage existing connection from Zone CP to
	// Global CP.
	StreamClusters(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClustersResponse, ClustersRequest], error)
	// HealthCheck allows us to implement a health check that works across
	// proxies, unlike HTTP/2 PING frames.
	HealthCheck(ctx context.Context, in *ZoneHealthCheckRequest, opts ...grpc.CallOption) (*ZoneHealthCheckResponse, error)
}

type globalKDSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalKDSServiceClient(cc grpc.ClientConnInterface) GlobalKDSServiceClient {
	return &globalKDSServiceClient{cc}
}

func (c *globalKDSServiceClient) StreamXDSConfigs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[XDSConfigResponse, XDSConfigRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GlobalKDSService_ServiceDesc.Streams[0], GlobalKDSService_StreamXDSConfigs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[XDSConfigResponse, XDSConfigRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GlobalKDSService_StreamXDSConfigsClient = grpc.BidiStreamingClient[XDSConfigResponse, XDSConfigRequest]

func (c *globalKDSServiceClient) StreamStats(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StatsResponse, StatsRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GlobalKDSService_ServiceDesc.Streams[1], GlobalKDSService_StreamStats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StatsResponse, StatsRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GlobalKDSService_StreamStatsClient = grpc.BidiStreamingClient[StatsResponse, StatsRequest]

func (c *globalKDSServiceClient) StreamClusters(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClustersResponse, ClustersRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GlobalKDSService_ServiceDesc.Streams[2], GlobalKDSService_StreamClusters_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClustersResponse, ClustersRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GlobalKDSService_StreamClustersClient = grpc.BidiStreamingClient[ClustersResponse, ClustersRequest]

func (c *globalKDSServiceClient) HealthCheck(ctx context.Context, in *ZoneHealthCheckRequest, opts ...grpc.CallOption) (*ZoneHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ZoneHealthCheckResponse)
	err := c.cc.Invoke(ctx, GlobalKDSService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalKDSServiceServer is the server API for GlobalKDSService service.
// All implementations must embed UnimplementedGlobalKDSServiceServer
// for forward compatibility.
type GlobalKDSServiceServer interface {
	// StreamXDSConfigs is logically a service exposed by Zone CP so Global CP can
	// execute Config Dumps. It is however represented by bi-directional streaming
	// to leverage existing connection from Zone CP to Global CP.
	StreamXDSConfigs(grpc.BidiStreamingServer[XDSConfigResponse, XDSConfigRequest]) error
	// StreamStats is logically a service exposed by Zone CP so Global CP can
	// execute kuma-dp stats requests. It is however represented by bi-directional
	// streaming to leverage existing connection from Zone CP to Global CP.
	StreamStats(grpc.BidiStreamingServer[StatsResponse, StatsRequest]) error
	// StreamStats is logically a service exposed by Zone CP so Global CP can
	// execute kuma-dp clusters request. It is however represented by
	// bi-directional streaming to leverage existing connection from Zone CP to
	// Global CP.
	StreamClusters(grpc.BidiStreamingServer[ClustersResponse, ClustersRequest]) error
	// HealthCheck allows us to implement a health check that works across
	// proxies, unlike HTTP/2 PING frames.
	HealthCheck(context.Context, *ZoneHealthCheckRequest) (*ZoneHealthCheckResponse, error)
	mustEmbedUnimplementedGlobalKDSServiceServer()
}

// UnimplementedGlobalKDSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGlobalKDSServiceServer struct{}

func (UnimplementedGlobalKDSServiceServer) StreamXDSConfigs(grpc.BidiStreamingServer[XDSConfigResponse, XDSConfigRequest]) error {
	return status.Errorf(codes.Unimplemented, "method StreamXDSConfigs not implemented")
}
func (UnimplementedGlobalKDSServiceServer) StreamStats(grpc.BidiStreamingServer[StatsResponse, StatsRequest]) error {
	return status.Errorf(codes.Unimplemented, "method StreamStats not implemented")
}
func (UnimplementedGlobalKDSServiceServer) StreamClusters(grpc.BidiStreamingServer[ClustersResponse, ClustersRequest]) error {
	return status.Errorf(codes.Unimplemented, "method StreamClusters not implemented")
}
func (UnimplementedGlobalKDSServiceServer) HealthCheck(context.Context, *ZoneHealthCheckRequest) (*ZoneHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedGlobalKDSServiceServer) mustEmbedUnimplementedGlobalKDSServiceServer() {}
func (UnimplementedGlobalKDSServiceServer) testEmbeddedByValue()                          {}

// UnsafeGlobalKDSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalKDSServiceServer will
// result in compilation errors.
type UnsafeGlobalKDSServiceServer interface {
	mustEmbedUnimplementedGlobalKDSServiceServer()
}

func RegisterGlobalKDSServiceServer(s grpc.ServiceRegistrar, srv GlobalKDSServiceServer) {
	// If the following call pancis, it indicates UnimplementedGlobalKDSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GlobalKDSService_ServiceDesc, srv)
}

func _GlobalKDSService_StreamXDSConfigs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GlobalKDSServiceServer).StreamXDSConfigs(&grpc.GenericServerStream[XDSConfigResponse, XDSConfigRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GlobalKDSService_StreamXDSConfigsServer = grpc.BidiStreamingServer[XDSConfigResponse, XDSConfigRequest]

func _GlobalKDSService_StreamStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GlobalKDSServiceServer).StreamStats(&grpc.GenericServerStream[StatsResponse, StatsRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GlobalKDSService_StreamStatsServer = grpc.BidiStreamingServer[StatsResponse, StatsRequest]

func _GlobalKDSService_StreamClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GlobalKDSServiceServer).StreamClusters(&grpc.GenericServerStream[ClustersResponse, ClustersRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GlobalKDSService_StreamClustersServer = grpc.BidiStreamingServer[ClustersResponse, ClustersRequest]

func _GlobalKDSService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalKDSServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalKDSService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalKDSServiceServer).HealthCheck(ctx, req.(*ZoneHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalKDSService_ServiceDesc is the grpc.ServiceDesc for GlobalKDSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalKDSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kuma.mesh.v1alpha1.GlobalKDSService",
	HandlerType: (*GlobalKDSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _GlobalKDSService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamXDSConfigs",
			Handler:       _GlobalKDSService_StreamXDSConfigs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamStats",
			Handler:       _GlobalKDSService_StreamStats_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamClusters",
			Handler:       _GlobalKDSService_StreamClusters_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/mesh/v1alpha1/kds.proto",
}

const (
	KDSSyncService_GlobalToZoneSync_FullMethodName = "/kuma.mesh.v1alpha1.KDSSyncService/GlobalToZoneSync"
	KDSSyncService_ZoneToGlobalSync_FullMethodName = "/kuma.mesh.v1alpha1.KDSSyncService/ZoneToGlobalSync"
)

// KDSSyncServiceClient is the client API for KDSSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// KDSSyncService is a service exposed by the control-plane for the
// synchronization of the resources between zone and global control-plane.
type KDSSyncServiceClient interface {
	// GlobalToZoneSync is logically a service exposed by global control-plane
	// that allows zone control plane to connect and synchronize resources from
	// the global control-plane to the zone control-plane. It uses delta xDS from
	// go-control-plane and responds only with the changes to the resources.
	GlobalToZoneSync(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v3.DeltaDiscoveryRequest, v3.DeltaDiscoveryResponse], error)
	// ZoneToGlobalSync is logically a service exposed by global control-plane
	// that allows zone control plane to connect and synchronize resources to
	// the global control-plane. It uses delta xDS from go-control-plane and
	// responds only with the changes to the resources.
	ZoneToGlobalSync(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v3.DeltaDiscoveryResponse, v3.DeltaDiscoveryRequest], error)
}

type kDSSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKDSSyncServiceClient(cc grpc.ClientConnInterface) KDSSyncServiceClient {
	return &kDSSyncServiceClient{cc}
}

func (c *kDSSyncServiceClient) GlobalToZoneSync(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v3.DeltaDiscoveryRequest, v3.DeltaDiscoveryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KDSSyncService_ServiceDesc.Streams[0], KDSSyncService_GlobalToZoneSync_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v3.DeltaDiscoveryRequest, v3.DeltaDiscoveryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KDSSyncService_GlobalToZoneSyncClient = grpc.BidiStreamingClient[v3.DeltaDiscoveryRequest, v3.DeltaDiscoveryResponse]

func (c *kDSSyncServiceClient) ZoneToGlobalSync(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v3.DeltaDiscoveryResponse, v3.DeltaDiscoveryRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KDSSyncService_ServiceDesc.Streams[1], KDSSyncService_ZoneToGlobalSync_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v3.DeltaDiscoveryResponse, v3.DeltaDiscoveryRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KDSSyncService_ZoneToGlobalSyncClient = grpc.BidiStreamingClient[v3.DeltaDiscoveryResponse, v3.DeltaDiscoveryRequest]

// KDSSyncServiceServer is the server API for KDSSyncService service.
// All implementations must embed UnimplementedKDSSyncServiceServer
// for forward compatibility.
//
// KDSSyncService is a service exposed by the control-plane for the
// synchronization of the resources between zone and global control-plane.
type KDSSyncServiceServer interface {
	// GlobalToZoneSync is logically a service exposed by global control-plane
	// that allows zone control plane to connect and synchronize resources from
	// the global control-plane to the zone control-plane. It uses delta xDS from
	// go-control-plane and responds only with the changes to the resources.
	GlobalToZoneSync(grpc.BidiStreamingServer[v3.DeltaDiscoveryRequest, v3.DeltaDiscoveryResponse]) error
	// ZoneToGlobalSync is logically a service exposed by global control-plane
	// that allows zone control plane to connect and synchronize resources to
	// the global control-plane. It uses delta xDS from go-control-plane and
	// responds only with the changes to the resources.
	ZoneToGlobalSync(grpc.BidiStreamingServer[v3.DeltaDiscoveryResponse, v3.DeltaDiscoveryRequest]) error
	mustEmbedUnimplementedKDSSyncServiceServer()
}

// UnimplementedKDSSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKDSSyncServiceServer struct{}

func (UnimplementedKDSSyncServiceServer) GlobalToZoneSync(grpc.BidiStreamingServer[v3.DeltaDiscoveryRequest, v3.DeltaDiscoveryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GlobalToZoneSync not implemented")
}
func (UnimplementedKDSSyncServiceServer) ZoneToGlobalSync(grpc.BidiStreamingServer[v3.DeltaDiscoveryResponse, v3.DeltaDiscoveryRequest]) error {
	return status.Errorf(codes.Unimplemented, "method ZoneToGlobalSync not implemented")
}
func (UnimplementedKDSSyncServiceServer) mustEmbedUnimplementedKDSSyncServiceServer() {}
func (UnimplementedKDSSyncServiceServer) testEmbeddedByValue()                        {}

// UnsafeKDSSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KDSSyncServiceServer will
// result in compilation errors.
type UnsafeKDSSyncServiceServer interface {
	mustEmbedUnimplementedKDSSyncServiceServer()
}

func RegisterKDSSyncServiceServer(s grpc.ServiceRegistrar, srv KDSSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedKDSSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KDSSyncService_ServiceDesc, srv)
}

func _KDSSyncService_GlobalToZoneSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KDSSyncServiceServer).GlobalToZoneSync(&grpc.GenericServerStream[v3.DeltaDiscoveryRequest, v3.DeltaDiscoveryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KDSSyncService_GlobalToZoneSyncServer = grpc.BidiStreamingServer[v3.DeltaDiscoveryRequest, v3.DeltaDiscoveryResponse]

func _KDSSyncService_ZoneToGlobalSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KDSSyncServiceServer).ZoneToGlobalSync(&grpc.GenericServerStream[v3.DeltaDiscoveryResponse, v3.DeltaDiscoveryRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KDSSyncService_ZoneToGlobalSyncServer = grpc.BidiStreamingServer[v3.DeltaDiscoveryResponse, v3.DeltaDiscoveryRequest]

// KDSSyncService_ServiceDesc is the grpc.ServiceDesc for KDSSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KDSSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kuma.mesh.v1alpha1.KDSSyncService",
	HandlerType: (*KDSSyncServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GlobalToZoneSync",
			Handler:       _KDSSyncService_GlobalToZoneSync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ZoneToGlobalSync",
			Handler:       _KDSSyncService_ZoneToGlobalSync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/mesh/v1alpha1/kds.proto",
}
