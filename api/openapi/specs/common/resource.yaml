components:
  schemas:
    ResourceTypeDescription:
      description: Description of a resource type, this is useful for dynamically generated clients and the gui
      type: object
      required: [name, scope, readOnly, path, singularDisplayName, pluralDisplayName, includeInFederation]
      properties:
        name:
          description: the name of the resource type
          type: string
        scope:
          type: string
          enum: [Global, Mesh]
        readOnly:
          type: boolean
        path:
          description: the path to use for accessing this resource. If scope is `Global` then it will be `/<path>` otherwise it will be `/meshes/<path>`
          type: string
        singularDisplayName:
          type: string
        pluralDisplayName:
          type: string
        includeInFederation:
          description: description resources of this type should be included in federetion-with-policies export profile (especially useful for moving from non-federated to federated or migrating to a new global).
          type: boolean
        policy:
          $ref: "#/components/schemas/PolicyDescription"
    PolicyDescription:
      type: object
      required: [hasToTargetRef, hasFromTargetRef, isTargetRef, isFromAsRules]
      description: information about a policy
      properties:
        isTargetRef:
          description: whether this policy uses targetRef matching
          type: boolean
        hasToTargetRef:
          description: indicates that this policy can be used as an outbound policy
          type: boolean
        hasFromTargetRef:
          description: indicates that this policy can be used as an inbound policy
          type: boolean
        isFromAsRules:
          description: If set to `true`, performs a backward compatibility conversion from the deprecated 'from' array to the new 'rules' array. This ensures older policies remain functional under the updated schema.
          type: boolean
    Meta:
      type: object
      required: [type, mesh, name, labels]
      properties:
        type:
          type: string
          example: Dataplane
          description: the type of this resource
        mesh:
          type: string
          example: default
          description: the mesh this resource is part of
        name:
          type: string
          example: my-resource
          description: the name of the resource
        labels:
          type: object
          additionalProperties:
            type: string
          example:
            "k8s.kuma.io/namespace": "kuma-system"
            "kuma.io/display-name": "mtp"
            "kuma.io/mesh": "default"
            "kuma.io/origin": "zone"
          description: the label of the resource
    InspectRule:
      type: object
      required: [type]
      properties:
        type:
          type: string
          example: MeshRetry
          description: the type of the policy
        proxyRule:
          $ref: '#/components/schemas/ProxyRule'
        toRules:
          type: array
          description: a set of rules for the outbounds of this proxy. The field is not set when 'meshService.mode' on Mesh is set to 'Exclusive'.
          items:
            $ref: '#/components/schemas/Rule'
        toResourceRules:
          type: array
          description: a set of rules for the outbounds produced by real resources (i.e MeshService, MeshExternalService, MeshMultiZoneService).
          items:
            $ref: '#/components/schemas/ResourceRule'
        fromRules:
          type: array
          description: a set of rules for each inbound of this proxy
          items:
            $ref: '#/components/schemas/FromRule'
        inboundRules:
          type: array
          description: a set of rules for each inbound port of the proxy. When the policy descriptor has 'isFromAsRules' set to true, this field supersedes 'fromRules' and should be used instead.
          items:
            $ref: '#/components/schemas/InboundRulesEntry'
        warnings:
          type: array
          description: a set of warnings to show in policy matching
          example: ["Mesh is not Mtls enabled this policy will have no effect"]
          items:
            type: string
    FromRule:
     type: object
     required: [rules, inbound]
     properties:
       inbound:
         $ref: '#/components/schemas/Inbound'
       rules:
         type: array
         items:
           $ref: '#/components/schemas/Rule'
    InboundRulesEntry:
      type: object
      required: [inbound, rules]
      properties:
        inbound:
          $ref: '#/components/schemas/Inbound'
        rules:
          type: array
          description: The 'rules' field is an array to allow for future expansion when 'matches' conditions are added. Currently, it contains a single item.
          items:
            $ref: '#/components/schemas/InboundRule'
    InboundRule:
      type: object
      required: [conf, origin]
      properties:
        conf:
          description: The final computed configuration for the data plane proxy, derived by merging all policies whose 'targetRef' field matches the proxy. The merging process follows [RFC 7396 (JSON Merge Patch)](https://datatracker.ietf.org/doc/html/rfc7396), with the order of merging influenced by factors such as where the policy was applied (e.g., custom namespace, system, or global control plane), policy role, and targetRef specificity.
          type: array
          items:
            type: object
            additionalProperties: true
            x-go-type: 'interface{}'
        origin:
          type: array
          description: The list of policies that contributed to the 'conf'. The order is important as it reflects in what order confs were merged to get the resulting 'conf'.
          items:
            $ref: '#/components/schemas/ResourceRuleOrigin'
    Inbound:
      type: object
      required: [tags, port]
      properties:
        name:
          type: string
        tags:
          type: object
          additionalProperties: 
            type: string
          x-go-type: 'map[string]string'
        port:
          type: integer
    DataplaneInbound:
      type: object
      required: [ kri, port, protocol ]
      properties:
        kri:
          type: string
        port:
          type: integer
          x-go-type: 'int32'
        protocol:
          type: string
    DataplaneOutbound:
      type: object
      required: [ kri, port, protocol ]
      properties:
        kri:
          type: string
        port:
          type: integer
          x-go-type: 'int32'
        protocol:
          type: string
    PoliciesList:
      type: object
      required: [ policies ]
      properties:
        policies:
          type: array
          description: The final computed configuration, derived by merging all policies whose 'targetRef' field matches the proxy. The merging process follows [RFC 7396 (JSON Merge Patch)](https://datatracker.ietf.org/doc/html/rfc7396), with the order of merging influenced by factors such as where the policy was applied (e.g., custom namespace, system, or global control plane), policy role, and targetRef specificity.
          items:
            $ref: '#/components/schemas/PolicyConf'
    PolicyConf:
      type: object
      required: [ kind, conf, origins ]
      properties:
        kind:
          type: string
        conf:
          description: The final computed configuration for the data plane proxy, derived by merging all policies whose 'targetRef' field matches the proxy. The merging process follows [RFC 7396 (JSON Merge Patch)](https://datatracker.ietf.org/doc/html/rfc7396), with the order of merging influenced by factors such as where the policy was applied (e.g., custom namespace, system, or global control plane), policy role, and targetRef specificity.
          type: object
          additionalProperties: true
          x-go-type: 'interface{}'
        origins:
          type: array
          description: The list of policies KRI that contributed to the 'conf'. The order is important as it reflects in what order confs were merged to get the resulting 'conf'.
          items:
            $ref: "#/components/schemas/PolicyOrigin"
    InboundPoliciesList:
      type: object
      required: [ policies ]
      properties:
        policies:
          type: array
          description: The final computed configuration, derived by merging all policies whose 'targetRef' field matches the proxy. The merging process follows [RFC 7396 (JSON Merge Patch)](https://datatracker.ietf.org/doc/html/rfc7396), with the order of merging influenced by factors such as where the policy was applied (e.g., custom namespace, system, or global control plane), policy role, and targetRef specificity.
          items:
            $ref: '#/components/schemas/InboundPolicyConf'
    InboundPolicyConf:
      type: object
      required: [ kind, rules, origins ]
      properties:
        kind:
          type: string
        rules:
          type: array
          items:
            type: object
            required: [ conf ]
            properties:
              conf:
                description: The final computed configuration for the data plane proxy, derived by merging all policies whose 'targetRef' field matches the proxy. The merging process follows [RFC 7396 (JSON Merge Patch)](https://datatracker.ietf.org/doc/html/rfc7396), with the order of merging influenced by factors such as where the policy was applied (e.g., custom namespace, system, or global control plane), policy role, and targetRef specificity.
                type: object
                additionalProperties: true
                x-go-type: 'interface{}'
        origins:
          type: array
          description: The list of policies KRI that contributed to the 'conf'. The order is important as it reflects in what order confs were merged to get the resulting 'conf'.
          items:
            $ref: "#/components/schemas/PolicyOrigin"
    RoutesList:
      type: object
      required: [ routes ]
      properties:
        routes:
          type: array
          description: Computed list of routes
          items:
            $ref: '#/components/schemas/RouteConf'
    RouteConf:
      type: object
      required: [ kind, rules, origin ]
      properties:
        kind:
          type: string
        rules:
          type: array
          description: Computed list of routing rules
          items:
            type: object
            required: [ kri, conf, matches ]
            properties:
              kri:
                type: string
              matches:
                type: array
                description: List of matches for which this rule will apply
                items:
                  type: object
                  additionalProperties: true
                  x-go-type: 'interface{}'
              conf:
                description: The final computed configuration for the data plane proxy, derived by merging all policies whose 'targetRef' field matches the proxy. The merging process follows [RFC 7396 (JSON Merge Patch)](https://datatracker.ietf.org/doc/html/rfc7396), with the order of merging influenced by factors such as where the policy was applied (e.g., custom namespace, system, or global control plane), policy role, and targetRef specificity.
                type: object
                additionalProperties: true
                x-go-type: 'interface{}'
        origins:
          $ref: "#/components/schemas/PolicyOrigin"
    PolicyOrigin:
      type: object
      required: [ kri ]
      description: The list of policies KRI that contributed to the 'conf'. The order is important as it reflects in what order confs were merged to get the resulting 'conf'.
      properties:
        kri:
          type: string
    ProxyRule:
      description: a rule that affects the entire proxy
      type: object
      required: [conf, origin]
      properties:
        conf:
          description: The actual conf generated
          type: object
          additionalProperties: true
          x-go-type: 'interface{}'
        origin:
          type: array
          items:
            $ref: '#/components/schemas/Meta'
    Rule:
      type: object
      required: [matchers, conf, origin]
      properties:
        matchers:
          type: array
          items:
            $ref: '#/components/schemas/RuleMatcher'
        conf:
          description: The actual conf generated
          type: object
          additionalProperties: true
          x-go-type: 'interface{}'
        origin:
          type: array
          items:
            $ref: '#/components/schemas/Meta'
    RuleMatcher:
      type: object
      required: [key, value, not]
      description: A matcher to select which traffic this conf applies to
      properties:
        key:
          type: string
          description: the key to match against
          example: kuma.io/service
        value:
          type: string
          description: the value for the key to match against
          example: my-cool-service
        not:
          type: boolean
          description: whether we check on the absence of this key:value pair
    ResourceRule:
      type: object
      required: [resourceMeta, conf, origin]
      properties:
        resourceMeta:
          $ref: '#/components/schemas/Meta'
        resourceSectionName:
          type: string
        conf:
          description: The actual conf generated
          type: array
          items:
            type: object
            additionalProperties: true
            x-go-type: 'interface{}'
        origin:
          type: array
          description: The list of policies that contributed to the 'conf'. The order is important as it reflects in what order confs were merged to get the resulting 'conf'.
          items:
            $ref: '#/components/schemas/ResourceRuleOrigin'
    ResourceRuleOrigin:
      type: object
      properties:
        resourceMeta:
          $ref: '#/components/schemas/Meta'
        ruleIndex:
          description: index of the to-item in the policy
          type: integer
    HttpMatch:
      type: object
      required: [hash, match]
      properties:
        hash:
          type: string
        match:
          type: object
          x-go-type: interface{}
