syntax = "proto3";

package kuma.system.v1alpha1;

option go_package = "github.com/kumahq/kuma/api/system/v1alpha1";

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

// ZoneInsight defines the observed state of a Remote Kuma CP.
message ZoneInsight {

  // List of KDS subscriptions created by a given Remote Kuma CP.
  repeated KDSSubscription subscriptions = 1;
}

// KDSSubscription describes a single KDS subscription
// created by a Remote to the Global.
// Ideally, there should be only one such subscription per Remote lifecycle.
// Presence of multiple subscriptions might indicate one of the following
// events:
// - transient loss of network connection between Remote and Global Control
// Planes
// - Remote Kuma CP restarts (i.e. hot restart or crash)
// - Global Kuma CP restarts (i.e. rolling update or crash)
// - etc
message KDSSubscription {

  // Unique id per KDS subscription.
  string id = 1 [ (validate.rules).string.min_len = 1 ];

  // Global CP instance that handled given subscription.
  string global_instance_id = 2 [ (validate.rules).string.min_len = 1 ];

  // Time when a given Remote connected to the Global.
  google.protobuf.Timestamp connect_time = 3
      [ (validate.rules).timestamp.required = true ];

  // Time when a given Remote disconnected from the Global.
  google.protobuf.Timestamp disconnect_time = 4;

  // Status of the KDS subscription.
  KDSSubscriptionStatus status = 5 [ (validate.rules).message.required = true ];

  // Version of Remote Kuma CP.
  Version version = 6;
}

// KDSSubscriptionStatus defines status of an KDS subscription.
message KDSSubscriptionStatus {

  // Time when status of a given KDS subscription was most recently updated.
  google.protobuf.Timestamp last_update_time = 1;

  // Total defines an aggregate over individual KDS stats.
  KDSServiceStats total = 2;

  map<string, KDSServiceStats> stat = 3;
}

// DiscoveryServiceStats defines all stats over a single xDS service.
message KDSServiceStats {

  // Number of xDS responses sent to the Dataplane.
  uint64 responses_sent = 1;

  // Number of xDS responses ACKed by the Dataplane.
  uint64 responses_acknowledged = 2;

  // Number of xDS responses NACKed by the Dataplane.
  uint64 responses_rejected = 3;
}

// Version defines version of Kuma ControlPlane
message Version {

  // Version of Remote Kuma CP
  KumaCpVersion kumaCp = 1;
}

// KumaCpVersion describes details of Kuma ControlPlane version
message KumaCpVersion {

  // Version number of Kuma ControlPlane
  string version = 1;

  // Git tag of Kuma ControlPlane version
  string gitTag = 2;

  // Git commit of Kuma ControlPlane version
  string gitCommit = 3;

  // Build date of Kuma ControlPlane version
  string buildDate = 4;
}
