// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/system/v1alpha1/zone_insight.proto

package v1alpha1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/kumahq/kuma/api/mesh"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ZoneInsight defines the observed state of a Zone Kuma CP.
type ZoneInsight struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of KDS subscriptions created by a given Zone Kuma CP.
	Subscriptions []*KDSSubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// Statistics about Envoy Admin Streams
	// Deprecated: use kds_streams instead.
	EnvoyAdminStreams *EnvoyAdminStreams `protobuf:"bytes,2,opt,name=envoy_admin_streams,json=envoyAdminStreams,proto3" json:"envoy_admin_streams,omitempty"`
	HealthCheck       *HealthCheck       `protobuf:"bytes,3,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	// Information about kds streams that are estabilished between global and zone
	KdsStreams    *KDSStreams `protobuf:"bytes,4,opt,name=kds_streams,json=kdsStreams,proto3" json:"kds_streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ZoneInsight) Reset() {
	*x = ZoneInsight{}
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZoneInsight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneInsight) ProtoMessage() {}

func (x *ZoneInsight) ProtoReflect() protoreflect.Message {
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneInsight.ProtoReflect.Descriptor instead.
func (*ZoneInsight) Descriptor() ([]byte, []int) {
	return file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP(), []int{0}
}

func (x *ZoneInsight) GetSubscriptions() []*KDSSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *ZoneInsight) GetEnvoyAdminStreams() *EnvoyAdminStreams {
	if x != nil {
		return x.EnvoyAdminStreams
	}
	return nil
}

func (x *ZoneInsight) GetHealthCheck() *HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *ZoneInsight) GetKdsStreams() *KDSStreams {
	if x != nil {
		return x.KdsStreams
	}
	return nil
}

type EnvoyAdminStreams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Global instance ID that handles XDS Config Dump streams.
	ConfigDumpGlobalInstanceId string `protobuf:"bytes,1,opt,name=config_dump_global_instance_id,json=configDumpGlobalInstanceId,proto3" json:"config_dump_global_instance_id,omitempty"`
	// Global instance ID that handles Stats streams.
	StatsGlobalInstanceId string `protobuf:"bytes,2,opt,name=stats_global_instance_id,json=statsGlobalInstanceId,proto3" json:"stats_global_instance_id,omitempty"`
	// Global instance ID that handles Clusters streams.
	ClustersGlobalInstanceId string `protobuf:"bytes,3,opt,name=clusters_global_instance_id,json=clustersGlobalInstanceId,proto3" json:"clusters_global_instance_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *EnvoyAdminStreams) Reset() {
	*x = EnvoyAdminStreams{}
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvoyAdminStreams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvoyAdminStreams) ProtoMessage() {}

func (x *EnvoyAdminStreams) ProtoReflect() protoreflect.Message {
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvoyAdminStreams.ProtoReflect.Descriptor instead.
func (*EnvoyAdminStreams) Descriptor() ([]byte, []int) {
	return file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP(), []int{1}
}

func (x *EnvoyAdminStreams) GetConfigDumpGlobalInstanceId() string {
	if x != nil {
		return x.ConfigDumpGlobalInstanceId
	}
	return ""
}

func (x *EnvoyAdminStreams) GetStatsGlobalInstanceId() string {
	if x != nil {
		return x.StatsGlobalInstanceId
	}
	return ""
}

func (x *EnvoyAdminStreams) GetClustersGlobalInstanceId() string {
	if x != nil {
		return x.ClustersGlobalInstanceId
	}
	return ""
}

type KDSStreams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Details of stream that handles Clusters stream.
	Clusters *KDSStream `protobuf:"bytes,1,opt,name=clusters,proto3" json:"clusters,omitempty"`
	// Details of stream that handles XDS Config Dump stream.
	ConfigDump *KDSStream `protobuf:"bytes,2,opt,name=config_dump,json=configDump,proto3" json:"config_dump,omitempty"`
	// Details of stream that handles Stats stream.
	Stats *KDSStream `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
	// Details of stream that handles global to zone resource sync stream.
	GlobalToZone *KDSStream `protobuf:"bytes,4,opt,name=global_to_zone,json=globalToZone,proto3" json:"global_to_zone,omitempty"`
	// Details of stream that handles zone to global resource sync stream.
	ZoneToGlobal  *KDSStream `protobuf:"bytes,5,opt,name=zone_to_global,json=zoneToGlobal,proto3" json:"zone_to_global,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KDSStreams) Reset() {
	*x = KDSStreams{}
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KDSStreams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KDSStreams) ProtoMessage() {}

func (x *KDSStreams) ProtoReflect() protoreflect.Message {
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KDSStreams.ProtoReflect.Descriptor instead.
func (*KDSStreams) Descriptor() ([]byte, []int) {
	return file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP(), []int{2}
}

func (x *KDSStreams) GetClusters() *KDSStream {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *KDSStreams) GetConfigDump() *KDSStream {
	if x != nil {
		return x.ConfigDump
	}
	return nil
}

func (x *KDSStreams) GetStats() *KDSStream {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *KDSStreams) GetGlobalToZone() *KDSStream {
	if x != nil {
		return x.GlobalToZone
	}
	return nil
}

func (x *KDSStreams) GetZoneToGlobal() *KDSStream {
	if x != nil {
		return x.ZoneToGlobal
	}
	return nil
}

type KDSStream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Global instance ID that handles the stream.
	GlobalInstanceId string `protobuf:"bytes,1,opt,name=global_instance_id,json=globalInstanceId,proto3" json:"global_instance_id,omitempty"`
	// Time when the stream was open.
	ConnectTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=connect_time,json=connectTime,proto3" json:"connect_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KDSStream) Reset() {
	*x = KDSStream{}
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KDSStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KDSStream) ProtoMessage() {}

func (x *KDSStream) ProtoReflect() protoreflect.Message {
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KDSStream.ProtoReflect.Descriptor instead.
func (*KDSStream) Descriptor() ([]byte, []int) {
	return file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP(), []int{3}
}

func (x *KDSStream) GetGlobalInstanceId() string {
	if x != nil {
		return x.GlobalInstanceId
	}
	return ""
}

func (x *KDSStream) GetConnectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ConnectTime
	}
	return nil
}

// KDSSubscription describes a single KDS subscription
// created by a Zone to the Global.
// Ideally, there should be only one such subscription per Zone lifecycle.
// Presence of multiple subscriptions might indicate one of the following
// events:
// - transient loss of network connection between Zone and Global Control
// Planes
// - Zone Kuma CP restarts (i.e. hot restart or crash)
// - Global Kuma CP restarts (i.e. rolling update or crash)
// - etc
type KDSSubscription struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique id per KDS subscription.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Global CP instance that handled given subscription.
	GlobalInstanceId string `protobuf:"bytes,2,opt,name=global_instance_id,json=globalInstanceId,proto3" json:"global_instance_id,omitempty"`
	// Time when a given Zone connected to the Global.
	ConnectTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=connect_time,json=connectTime,proto3" json:"connect_time,omitempty"`
	// Time when a given Zone disconnected from the Global.
	DisconnectTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=disconnect_time,json=disconnectTime,proto3" json:"disconnect_time,omitempty"`
	// Status of the KDS subscription.
	Status *KDSSubscriptionStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Version of Zone Kuma CP.
	Version *Version `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	// Generation is an integer number which is periodically increased by the
	// status sink
	Generation uint32 `protobuf:"varint,7,opt,name=generation,proto3" json:"generation,omitempty"`
	// Config of Zone Kuma CP
	Config string `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
	// Indicates if subscription provided auth token
	AuthTokenProvided bool `protobuf:"varint,9,opt,name=auth_token_provided,json=authTokenProvided,proto3" json:"auth_token_provided,omitempty"`
	// Zone CP instance that handled the given subscription (This is the leader at
	// time of connection).
	ZoneInstanceId string `protobuf:"bytes,10,opt,name=zone_instance_id,json=zoneInstanceId,proto3" json:"zone_instance_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KDSSubscription) Reset() {
	*x = KDSSubscription{}
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KDSSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KDSSubscription) ProtoMessage() {}

func (x *KDSSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KDSSubscription.ProtoReflect.Descriptor instead.
func (*KDSSubscription) Descriptor() ([]byte, []int) {
	return file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP(), []int{4}
}

func (x *KDSSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KDSSubscription) GetGlobalInstanceId() string {
	if x != nil {
		return x.GlobalInstanceId
	}
	return ""
}

func (x *KDSSubscription) GetConnectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ConnectTime
	}
	return nil
}

func (x *KDSSubscription) GetDisconnectTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DisconnectTime
	}
	return nil
}

func (x *KDSSubscription) GetStatus() *KDSSubscriptionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *KDSSubscription) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *KDSSubscription) GetGeneration() uint32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *KDSSubscription) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *KDSSubscription) GetAuthTokenProvided() bool {
	if x != nil {
		return x.AuthTokenProvided
	}
	return false
}

func (x *KDSSubscription) GetZoneInstanceId() string {
	if x != nil {
		return x.ZoneInstanceId
	}
	return ""
}

// KDSSubscriptionStatus defines status of an KDS subscription.
type KDSSubscriptionStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time when status of a given KDS subscription was most recently updated.
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	// Total defines an aggregate over individual KDS stats.
	Total         *KDSServiceStats            `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
	Stat          map[string]*KDSServiceStats `protobuf:"bytes,3,rep,name=stat,proto3" json:"stat,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KDSSubscriptionStatus) Reset() {
	*x = KDSSubscriptionStatus{}
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KDSSubscriptionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KDSSubscriptionStatus) ProtoMessage() {}

func (x *KDSSubscriptionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KDSSubscriptionStatus.ProtoReflect.Descriptor instead.
func (*KDSSubscriptionStatus) Descriptor() ([]byte, []int) {
	return file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP(), []int{5}
}

func (x *KDSSubscriptionStatus) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *KDSSubscriptionStatus) GetTotal() *KDSServiceStats {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *KDSSubscriptionStatus) GetStat() map[string]*KDSServiceStats {
	if x != nil {
		return x.Stat
	}
	return nil
}

// DiscoveryServiceStats defines all stats over a single xDS service.
type KDSServiceStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of xDS responses sent to the Dataplane.
	ResponsesSent uint64 `protobuf:"varint,1,opt,name=responses_sent,json=responsesSent,proto3" json:"responses_sent,omitempty"`
	// Number of xDS responses ACKed by the Dataplane.
	ResponsesAcknowledged uint64 `protobuf:"varint,2,opt,name=responses_acknowledged,json=responsesAcknowledged,proto3" json:"responses_acknowledged,omitempty"`
	// Number of xDS responses NACKed by the Dataplane.
	ResponsesRejected uint64 `protobuf:"varint,3,opt,name=responses_rejected,json=responsesRejected,proto3" json:"responses_rejected,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *KDSServiceStats) Reset() {
	*x = KDSServiceStats{}
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KDSServiceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KDSServiceStats) ProtoMessage() {}

func (x *KDSServiceStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KDSServiceStats.ProtoReflect.Descriptor instead.
func (*KDSServiceStats) Descriptor() ([]byte, []int) {
	return file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP(), []int{6}
}

func (x *KDSServiceStats) GetResponsesSent() uint64 {
	if x != nil {
		return x.ResponsesSent
	}
	return 0
}

func (x *KDSServiceStats) GetResponsesAcknowledged() uint64 {
	if x != nil {
		return x.ResponsesAcknowledged
	}
	return 0
}

func (x *KDSServiceStats) GetResponsesRejected() uint64 {
	if x != nil {
		return x.ResponsesRejected
	}
	return 0
}

// Version defines version of Kuma ControlPlane
type Version struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of Zone Kuma CP
	KumaCp        *KumaCpVersion `protobuf:"bytes,1,opt,name=kumaCp,proto3" json:"kumaCp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP(), []int{7}
}

func (x *Version) GetKumaCp() *KumaCpVersion {
	if x != nil {
		return x.KumaCp
	}
	return nil
}

// KumaCpVersion describes details of Kuma ControlPlane version
type KumaCpVersion struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version number of Kuma ControlPlane
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Git tag of Kuma ControlPlane version
	GitTag string `protobuf:"bytes,2,opt,name=gitTag,proto3" json:"gitTag,omitempty"`
	// Git commit of Kuma ControlPlane version
	GitCommit string `protobuf:"bytes,3,opt,name=gitCommit,proto3" json:"gitCommit,omitempty"`
	// Build date of Kuma ControlPlane version
	BuildDate string `protobuf:"bytes,4,opt,name=buildDate,proto3" json:"buildDate,omitempty"`
	// True iff this Zone CP version is compatible with Global CP
	KumaCpGlobalCompatible bool `protobuf:"varint,5,opt,name=kumaCpGlobalCompatible,proto3" json:"kumaCpGlobalCompatible,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *KumaCpVersion) Reset() {
	*x = KumaCpVersion{}
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KumaCpVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KumaCpVersion) ProtoMessage() {}

func (x *KumaCpVersion) ProtoReflect() protoreflect.Message {
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KumaCpVersion.ProtoReflect.Descriptor instead.
func (*KumaCpVersion) Descriptor() ([]byte, []int) {
	return file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP(), []int{8}
}

func (x *KumaCpVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *KumaCpVersion) GetGitTag() string {
	if x != nil {
		return x.GitTag
	}
	return ""
}

func (x *KumaCpVersion) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *KumaCpVersion) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

func (x *KumaCpVersion) GetKumaCpGlobalCompatible() bool {
	if x != nil {
		return x.KumaCpGlobalCompatible
	}
	return false
}

// HealthCheck holds information about the received zone health check
type HealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time last health check received
	Time          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_system_v1alpha1_zone_insight_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP(), []int{9}
}

func (x *HealthCheck) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_api_system_v1alpha1_zone_insight_proto protoreflect.FileDescriptor

const file_api_system_v1alpha1_zone_insight_proto_rawDesc = "" +
	"\n" +
	"&api/system/v1alpha1/zone_insight.proto\x12\x14kuma.system.v1alpha1\x1a\x16api/mesh/options.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x17validate/validate.proto\"\xb9\x03\n" +
	"\vZoneInsight\x12K\n" +
	"\rsubscriptions\x18\x01 \x03(\v2%.kuma.system.v1alpha1.KDSSubscriptionR\rsubscriptions\x12W\n" +
	"\x13envoy_admin_streams\x18\x02 \x01(\v2'.kuma.system.v1alpha1.EnvoyAdminStreamsR\x11envoyAdminStreams\x12D\n" +
	"\fhealth_check\x18\x03 \x01(\v2!.kuma.system.v1alpha1.HealthCheckR\vhealthCheck\x12A\n" +
	"\vkds_streams\x18\x04 \x01(\v2 .kuma.system.v1alpha1.KDSStreamsR\n" +
	"kdsStreams:{\xaa\x8c\x89\xa6\x01u\n" +
	"\x13ZoneInsightResource\x12\vZoneInsight\x18\x01\"\x06system:\x10\n" +
	"\fzone-insight\x18\x01R5model.ProvidedByGlobalFlag | model.ProvidedByZoneFlag\"\xcf\x01\n" +
	"\x11EnvoyAdminStreams\x12B\n" +
	"\x1econfig_dump_global_instance_id\x18\x01 \x01(\tR\x1aconfigDumpGlobalInstanceId\x127\n" +
	"\x18stats_global_instance_id\x18\x02 \x01(\tR\x15statsGlobalInstanceId\x12=\n" +
	"\x1bclusters_global_instance_id\x18\x03 \x01(\tR\x18clustersGlobalInstanceId\"\xd0\x02\n" +
	"\n" +
	"KDSStreams\x12;\n" +
	"\bclusters\x18\x01 \x01(\v2\x1f.kuma.system.v1alpha1.KDSStreamR\bclusters\x12@\n" +
	"\vconfig_dump\x18\x02 \x01(\v2\x1f.kuma.system.v1alpha1.KDSStreamR\n" +
	"configDump\x125\n" +
	"\x05stats\x18\x03 \x01(\v2\x1f.kuma.system.v1alpha1.KDSStreamR\x05stats\x12E\n" +
	"\x0eglobal_to_zone\x18\x04 \x01(\v2\x1f.kuma.system.v1alpha1.KDSStreamR\fglobalToZone\x12E\n" +
	"\x0ezone_to_global\x18\x05 \x01(\v2\x1f.kuma.system.v1alpha1.KDSStreamR\fzoneToGlobal\"x\n" +
	"\tKDSStream\x12,\n" +
	"\x12global_instance_id\x18\x01 \x01(\tR\x10globalInstanceId\x12=\n" +
	"\fconnect_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\vconnectTime\"\x89\x04\n" +
	"\x0fKDSSubscription\x12\x17\n" +
	"\x02id\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x02id\x125\n" +
	"\x12global_instance_id\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x10globalInstanceId\x12G\n" +
	"\fconnect_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\b\xfaB\x05\xb2\x01\x02\b\x01R\vconnectTime\x12C\n" +
	"\x0fdisconnect_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x0edisconnectTime\x12M\n" +
	"\x06status\x18\x05 \x01(\v2+.kuma.system.v1alpha1.KDSSubscriptionStatusB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06status\x127\n" +
	"\aversion\x18\x06 \x01(\v2\x1d.kuma.system.v1alpha1.VersionR\aversion\x12\x1e\n" +
	"\n" +
	"generation\x18\a \x01(\rR\n" +
	"generation\x12\x16\n" +
	"\x06config\x18\b \x01(\tR\x06config\x12.\n" +
	"\x13auth_token_provided\x18\t \x01(\bR\x11authTokenProvided\x12(\n" +
	"\x10zone_instance_id\x18\n" +
	" \x01(\tR\x0ezoneInstanceId\"\xc5\x02\n" +
	"\x15KDSSubscriptionStatus\x12D\n" +
	"\x10last_update_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x0elastUpdateTime\x12;\n" +
	"\x05total\x18\x02 \x01(\v2%.kuma.system.v1alpha1.KDSServiceStatsR\x05total\x12I\n" +
	"\x04stat\x18\x03 \x03(\v25.kuma.system.v1alpha1.KDSSubscriptionStatus.StatEntryR\x04stat\x1a^\n" +
	"\tStatEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12;\n" +
	"\x05value\x18\x02 \x01(\v2%.kuma.system.v1alpha1.KDSServiceStatsR\x05value:\x028\x01\"\x9e\x01\n" +
	"\x0fKDSServiceStats\x12%\n" +
	"\x0eresponses_sent\x18\x01 \x01(\x04R\rresponsesSent\x125\n" +
	"\x16responses_acknowledged\x18\x02 \x01(\x04R\x15responsesAcknowledged\x12-\n" +
	"\x12responses_rejected\x18\x03 \x01(\x04R\x11responsesRejected\"F\n" +
	"\aVersion\x12;\n" +
	"\x06kumaCp\x18\x01 \x01(\v2#.kuma.system.v1alpha1.KumaCpVersionR\x06kumaCp\"\xb5\x01\n" +
	"\rKumaCpVersion\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x16\n" +
	"\x06gitTag\x18\x02 \x01(\tR\x06gitTag\x12\x1c\n" +
	"\tgitCommit\x18\x03 \x01(\tR\tgitCommit\x12\x1c\n" +
	"\tbuildDate\x18\x04 \x01(\tR\tbuildDate\x126\n" +
	"\x16kumaCpGlobalCompatible\x18\x05 \x01(\bR\x16kumaCpGlobalCompatible\"=\n" +
	"\vHealthCheck\x12.\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04timeB,Z*github.com/kumahq/kuma/api/system/v1alpha1b\x06proto3"

var (
	file_api_system_v1alpha1_zone_insight_proto_rawDescOnce sync.Once
	file_api_system_v1alpha1_zone_insight_proto_rawDescData []byte
)

func file_api_system_v1alpha1_zone_insight_proto_rawDescGZIP() []byte {
	file_api_system_v1alpha1_zone_insight_proto_rawDescOnce.Do(func() {
		file_api_system_v1alpha1_zone_insight_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_system_v1alpha1_zone_insight_proto_rawDesc), len(file_api_system_v1alpha1_zone_insight_proto_rawDesc)))
	})
	return file_api_system_v1alpha1_zone_insight_proto_rawDescData
}

var file_api_system_v1alpha1_zone_insight_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_system_v1alpha1_zone_insight_proto_goTypes = []any{
	(*ZoneInsight)(nil),           // 0: kuma.system.v1alpha1.ZoneInsight
	(*EnvoyAdminStreams)(nil),     // 1: kuma.system.v1alpha1.EnvoyAdminStreams
	(*KDSStreams)(nil),            // 2: kuma.system.v1alpha1.KDSStreams
	(*KDSStream)(nil),             // 3: kuma.system.v1alpha1.KDSStream
	(*KDSSubscription)(nil),       // 4: kuma.system.v1alpha1.KDSSubscription
	(*KDSSubscriptionStatus)(nil), // 5: kuma.system.v1alpha1.KDSSubscriptionStatus
	(*KDSServiceStats)(nil),       // 6: kuma.system.v1alpha1.KDSServiceStats
	(*Version)(nil),               // 7: kuma.system.v1alpha1.Version
	(*KumaCpVersion)(nil),         // 8: kuma.system.v1alpha1.KumaCpVersion
	(*HealthCheck)(nil),           // 9: kuma.system.v1alpha1.HealthCheck
	nil,                           // 10: kuma.system.v1alpha1.KDSSubscriptionStatus.StatEntry
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_api_system_v1alpha1_zone_insight_proto_depIdxs = []int32{
	4,  // 0: kuma.system.v1alpha1.ZoneInsight.subscriptions:type_name -> kuma.system.v1alpha1.KDSSubscription
	1,  // 1: kuma.system.v1alpha1.ZoneInsight.envoy_admin_streams:type_name -> kuma.system.v1alpha1.EnvoyAdminStreams
	9,  // 2: kuma.system.v1alpha1.ZoneInsight.health_check:type_name -> kuma.system.v1alpha1.HealthCheck
	2,  // 3: kuma.system.v1alpha1.ZoneInsight.kds_streams:type_name -> kuma.system.v1alpha1.KDSStreams
	3,  // 4: kuma.system.v1alpha1.KDSStreams.clusters:type_name -> kuma.system.v1alpha1.KDSStream
	3,  // 5: kuma.system.v1alpha1.KDSStreams.config_dump:type_name -> kuma.system.v1alpha1.KDSStream
	3,  // 6: kuma.system.v1alpha1.KDSStreams.stats:type_name -> kuma.system.v1alpha1.KDSStream
	3,  // 7: kuma.system.v1alpha1.KDSStreams.global_to_zone:type_name -> kuma.system.v1alpha1.KDSStream
	3,  // 8: kuma.system.v1alpha1.KDSStreams.zone_to_global:type_name -> kuma.system.v1alpha1.KDSStream
	11, // 9: kuma.system.v1alpha1.KDSStream.connect_time:type_name -> google.protobuf.Timestamp
	11, // 10: kuma.system.v1alpha1.KDSSubscription.connect_time:type_name -> google.protobuf.Timestamp
	11, // 11: kuma.system.v1alpha1.KDSSubscription.disconnect_time:type_name -> google.protobuf.Timestamp
	5,  // 12: kuma.system.v1alpha1.KDSSubscription.status:type_name -> kuma.system.v1alpha1.KDSSubscriptionStatus
	7,  // 13: kuma.system.v1alpha1.KDSSubscription.version:type_name -> kuma.system.v1alpha1.Version
	11, // 14: kuma.system.v1alpha1.KDSSubscriptionStatus.last_update_time:type_name -> google.protobuf.Timestamp
	6,  // 15: kuma.system.v1alpha1.KDSSubscriptionStatus.total:type_name -> kuma.system.v1alpha1.KDSServiceStats
	10, // 16: kuma.system.v1alpha1.KDSSubscriptionStatus.stat:type_name -> kuma.system.v1alpha1.KDSSubscriptionStatus.StatEntry
	8,  // 17: kuma.system.v1alpha1.Version.kumaCp:type_name -> kuma.system.v1alpha1.KumaCpVersion
	11, // 18: kuma.system.v1alpha1.HealthCheck.time:type_name -> google.protobuf.Timestamp
	6,  // 19: kuma.system.v1alpha1.KDSSubscriptionStatus.StatEntry.value:type_name -> kuma.system.v1alpha1.KDSServiceStats
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_api_system_v1alpha1_zone_insight_proto_init() }
func file_api_system_v1alpha1_zone_insight_proto_init() {
	if File_api_system_v1alpha1_zone_insight_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_system_v1alpha1_zone_insight_proto_rawDesc), len(file_api_system_v1alpha1_zone_insight_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_system_v1alpha1_zone_insight_proto_goTypes,
		DependencyIndexes: file_api_system_v1alpha1_zone_insight_proto_depIdxs,
		MessageInfos:      file_api_system_v1alpha1_zone_insight_proto_msgTypes,
	}.Build()
	File_api_system_v1alpha1_zone_insight_proto = out.File
	file_api_system_v1alpha1_zone_insight_proto_goTypes = nil
	file_api_system_v1alpha1_zone_insight_proto_depIdxs = nil
}
