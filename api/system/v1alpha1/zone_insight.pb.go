// Code generated by protoc-gen-go. DO NOT EDIT.
// source: system/v1alpha1/zone_insight.proto

package v1alpha1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ZoneInsight defines the observed state of a Remote Kuma CP.
type ZoneInsight struct {
	// List of KDS subscriptions created by a given Remote Kuma CP.
	Subscriptions        []*KDSSubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ZoneInsight) Reset()         { *m = ZoneInsight{} }
func (m *ZoneInsight) String() string { return proto.CompactTextString(m) }
func (*ZoneInsight) ProtoMessage()    {}
func (*ZoneInsight) Descriptor() ([]byte, []int) {
	return fileDescriptor_557f55c8870024f9, []int{0}
}

func (m *ZoneInsight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZoneInsight.Unmarshal(m, b)
}
func (m *ZoneInsight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZoneInsight.Marshal(b, m, deterministic)
}
func (m *ZoneInsight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneInsight.Merge(m, src)
}
func (m *ZoneInsight) XXX_Size() int {
	return xxx_messageInfo_ZoneInsight.Size(m)
}
func (m *ZoneInsight) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneInsight.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneInsight proto.InternalMessageInfo

func (m *ZoneInsight) GetSubscriptions() []*KDSSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

// KDSSubscription describes a single KDS subscription
// created by a Remote to the Global.
// Ideally, there should be only one such subscription per Remote lifecycle.
// Presence of multiple subscriptions might indicate one of the following
// events:
// - transient loss of network connection between Remote and Global Control
// Planes
// - Remote Kuma CP restarts (i.e. hot restart or crash)
// - Global Kuma CP restarts (i.e. rolling update or crash)
// - etc
type KDSSubscription struct {
	// Unique id per KDS subscription.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Global CP instance that handled given subscription.
	GlobalInstanceId string `protobuf:"bytes,2,opt,name=global_instance_id,json=globalInstanceId,proto3" json:"global_instance_id,omitempty"`
	// Time when a given Remote connected to the Global.
	ConnectTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=connect_time,json=connectTime,proto3" json:"connect_time,omitempty"`
	// Time when a given Remote disconnected from the Global.
	DisconnectTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=disconnect_time,json=disconnectTime,proto3" json:"disconnect_time,omitempty"`
	// Status of the KDS subscription.
	Status               *KDSSubscriptionStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *KDSSubscription) Reset()         { *m = KDSSubscription{} }
func (m *KDSSubscription) String() string { return proto.CompactTextString(m) }
func (*KDSSubscription) ProtoMessage()    {}
func (*KDSSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_557f55c8870024f9, []int{1}
}

func (m *KDSSubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KDSSubscription.Unmarshal(m, b)
}
func (m *KDSSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KDSSubscription.Marshal(b, m, deterministic)
}
func (m *KDSSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KDSSubscription.Merge(m, src)
}
func (m *KDSSubscription) XXX_Size() int {
	return xxx_messageInfo_KDSSubscription.Size(m)
}
func (m *KDSSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_KDSSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_KDSSubscription proto.InternalMessageInfo

func (m *KDSSubscription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *KDSSubscription) GetGlobalInstanceId() string {
	if m != nil {
		return m.GlobalInstanceId
	}
	return ""
}

func (m *KDSSubscription) GetConnectTime() *timestamp.Timestamp {
	if m != nil {
		return m.ConnectTime
	}
	return nil
}

func (m *KDSSubscription) GetDisconnectTime() *timestamp.Timestamp {
	if m != nil {
		return m.DisconnectTime
	}
	return nil
}

func (m *KDSSubscription) GetStatus() *KDSSubscriptionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// KDSSubscriptionStatus defines status of an KDS subscription.
type KDSSubscriptionStatus struct {
	// Time when status of a given KDS subscription was most recently updated.
	LastUpdateTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	// Total defines an aggregate over individual KDS stats.
	Total                *KDSServiceStats `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
	Mesh                 *KDSServiceStats `protobuf:"bytes,3,opt,name=mesh,proto3" json:"mesh,omitempty"`
	Ingress              *KDSServiceStats `protobuf:"bytes,4,opt,name=ingress,proto3" json:"ingress,omitempty"`
	CircuitBreaker       *KDSServiceStats `protobuf:"bytes,5,opt,name=circuitBreaker,proto3" json:"circuitBreaker,omitempty"`
	FaultInjection       *KDSServiceStats `protobuf:"bytes,6,opt,name=faultInjection,proto3" json:"faultInjection,omitempty"`
	HealthCheck          *KDSServiceStats `protobuf:"bytes,7,opt,name=healthCheck,proto3" json:"healthCheck,omitempty"`
	TrafficLog           *KDSServiceStats `protobuf:"bytes,8,opt,name=trafficLog,proto3" json:"trafficLog,omitempty"`
	TrafficPermission    *KDSServiceStats `protobuf:"bytes,9,opt,name=trafficPermission,proto3" json:"trafficPermission,omitempty"`
	TrafficRoute         *KDSServiceStats `protobuf:"bytes,10,opt,name=trafficRoute,proto3" json:"trafficRoute,omitempty"`
	TrafficTrace         *KDSServiceStats `protobuf:"bytes,11,opt,name=trafficTrace,proto3" json:"trafficTrace,omitempty"`
	ProxyTemplate        *KDSServiceStats `protobuf:"bytes,12,opt,name=proxyTemplate,proto3" json:"proxyTemplate,omitempty"`
	Secret               *KDSServiceStats `protobuf:"bytes,13,opt,name=secret,proto3" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *KDSSubscriptionStatus) Reset()         { *m = KDSSubscriptionStatus{} }
func (m *KDSSubscriptionStatus) String() string { return proto.CompactTextString(m) }
func (*KDSSubscriptionStatus) ProtoMessage()    {}
func (*KDSSubscriptionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_557f55c8870024f9, []int{2}
}

func (m *KDSSubscriptionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KDSSubscriptionStatus.Unmarshal(m, b)
}
func (m *KDSSubscriptionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KDSSubscriptionStatus.Marshal(b, m, deterministic)
}
func (m *KDSSubscriptionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KDSSubscriptionStatus.Merge(m, src)
}
func (m *KDSSubscriptionStatus) XXX_Size() int {
	return xxx_messageInfo_KDSSubscriptionStatus.Size(m)
}
func (m *KDSSubscriptionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KDSSubscriptionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KDSSubscriptionStatus proto.InternalMessageInfo

func (m *KDSSubscriptionStatus) GetLastUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdateTime
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetTotal() *KDSServiceStats {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetMesh() *KDSServiceStats {
	if m != nil {
		return m.Mesh
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetIngress() *KDSServiceStats {
	if m != nil {
		return m.Ingress
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetCircuitBreaker() *KDSServiceStats {
	if m != nil {
		return m.CircuitBreaker
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetFaultInjection() *KDSServiceStats {
	if m != nil {
		return m.FaultInjection
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetHealthCheck() *KDSServiceStats {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetTrafficLog() *KDSServiceStats {
	if m != nil {
		return m.TrafficLog
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetTrafficPermission() *KDSServiceStats {
	if m != nil {
		return m.TrafficPermission
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetTrafficRoute() *KDSServiceStats {
	if m != nil {
		return m.TrafficRoute
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetTrafficTrace() *KDSServiceStats {
	if m != nil {
		return m.TrafficTrace
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetProxyTemplate() *KDSServiceStats {
	if m != nil {
		return m.ProxyTemplate
	}
	return nil
}

func (m *KDSSubscriptionStatus) GetSecret() *KDSServiceStats {
	if m != nil {
		return m.Secret
	}
	return nil
}

// DiscoveryServiceStats defines all stats over a single xDS service.
type KDSServiceStats struct {
	// Number of xDS responses sent to the Dataplane.
	ResponsesSent uint64 `protobuf:"varint,1,opt,name=responses_sent,json=responsesSent,proto3" json:"responses_sent,omitempty"`
	// Number of xDS responses ACKed by the Dataplane.
	ResponsesAcknowledged uint64 `protobuf:"varint,2,opt,name=responses_acknowledged,json=responsesAcknowledged,proto3" json:"responses_acknowledged,omitempty"`
	// Number of xDS responses NACKed by the Dataplane.
	ResponsesRejected    uint64   `protobuf:"varint,3,opt,name=responses_rejected,json=responsesRejected,proto3" json:"responses_rejected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KDSServiceStats) Reset()         { *m = KDSServiceStats{} }
func (m *KDSServiceStats) String() string { return proto.CompactTextString(m) }
func (*KDSServiceStats) ProtoMessage()    {}
func (*KDSServiceStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_557f55c8870024f9, []int{3}
}

func (m *KDSServiceStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KDSServiceStats.Unmarshal(m, b)
}
func (m *KDSServiceStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KDSServiceStats.Marshal(b, m, deterministic)
}
func (m *KDSServiceStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KDSServiceStats.Merge(m, src)
}
func (m *KDSServiceStats) XXX_Size() int {
	return xxx_messageInfo_KDSServiceStats.Size(m)
}
func (m *KDSServiceStats) XXX_DiscardUnknown() {
	xxx_messageInfo_KDSServiceStats.DiscardUnknown(m)
}

var xxx_messageInfo_KDSServiceStats proto.InternalMessageInfo

func (m *KDSServiceStats) GetResponsesSent() uint64 {
	if m != nil {
		return m.ResponsesSent
	}
	return 0
}

func (m *KDSServiceStats) GetResponsesAcknowledged() uint64 {
	if m != nil {
		return m.ResponsesAcknowledged
	}
	return 0
}

func (m *KDSServiceStats) GetResponsesRejected() uint64 {
	if m != nil {
		return m.ResponsesRejected
	}
	return 0
}

func init() {
	proto.RegisterType((*ZoneInsight)(nil), "kuma.system.v1alpha1.ZoneInsight")
	proto.RegisterType((*KDSSubscription)(nil), "kuma.system.v1alpha1.KDSSubscription")
	proto.RegisterType((*KDSSubscriptionStatus)(nil), "kuma.system.v1alpha1.KDSSubscriptionStatus")
	proto.RegisterType((*KDSServiceStats)(nil), "kuma.system.v1alpha1.KDSServiceStats")
}

func init() {
	proto.RegisterFile("system/v1alpha1/zone_insight.proto", fileDescriptor_557f55c8870024f9)
}

var fileDescriptor_557f55c8870024f9 = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0x91, 0xe3, 0xd8, 0xce, 0x38, 0x7f, 0x97, 0xa6, 0x11, 0xb9, 0x34, 0x18, 0x02, 0x81,
	0x52, 0x99, 0xa4, 0xe4, 0x50, 0x4a, 0x29, 0x75, 0x52, 0x82, 0x49, 0x03, 0x45, 0x4e, 0x2f, 0xb9,
	0x98, 0xf5, 0x6a, 0x2c, 0x6f, 0x2d, 0xed, 0x8a, 0xdd, 0x55, 0xda, 0xf4, 0x11, 0xfa, 0x10, 0x7d,
	0x88, 0x5e, 0x0b, 0x7d, 0xb0, 0x9c, 0x8a, 0x56, 0x72, 0x6c, 0xa7, 0xa1, 0xb1, 0x7a, 0xb3, 0x35,
	0xdf, 0xef, 0xdb, 0x99, 0x4f, 0xda, 0x81, 0x96, 0xbe, 0xd1, 0x06, 0xe3, 0xf6, 0xf5, 0x21, 0x8d,
	0x92, 0x11, 0x3d, 0x6c, 0x7f, 0x93, 0x02, 0xfb, 0x5c, 0x68, 0x1e, 0x8e, 0x8c, 0x97, 0x28, 0x69,
	0x24, 0x79, 0x32, 0x4e, 0x63, 0xea, 0xe5, 0x42, 0x6f, 0x22, 0xdc, 0x7d, 0x16, 0x4a, 0x19, 0x46,
	0xd8, 0xb6, 0x9a, 0x41, 0x3a, 0x6c, 0x1b, 0x1e, 0xa3, 0x36, 0x34, 0x4e, 0x72, 0x6c, 0x77, 0xe7,
	0x9a, 0x46, 0x3c, 0xa0, 0x06, 0xdb, 0x93, 0x1f, 0x79, 0xa1, 0x75, 0x05, 0xcd, 0x2b, 0x29, 0xb0,
	0x9b, 0x1f, 0x42, 0xce, 0x61, 0x4d, 0xa7, 0x03, 0xcd, 0x14, 0x4f, 0x0c, 0x97, 0x42, 0xbb, 0xce,
	0xde, 0xd2, 0x41, 0xf3, 0x68, 0xdf, 0x7b, 0xe8, 0x58, 0xef, 0xfc, 0xb4, 0xd7, 0x9b, 0x51, 0xfb,
	0xf3, 0x6c, 0xeb, 0x77, 0x05, 0x36, 0xee, 0x49, 0xc8, 0x0e, 0x54, 0x78, 0xe0, 0x3a, 0x7b, 0xce,
	0xc1, 0x4a, 0xa7, 0x7e, 0xdb, 0xa9, 0xaa, 0xca, 0xa6, 0xe3, 0x57, 0x78, 0x40, 0x8e, 0x81, 0x84,
	0x91, 0x1c, 0xd0, 0x28, 0x1b, 0xd8, 0x50, 0xc1, 0xb0, 0xcf, 0x03, 0xb7, 0x32, 0x2f, 0xdc, 0xcc,
	0x25, 0xdd, 0x42, 0xd1, 0x0d, 0xc8, 0x19, 0xac, 0x32, 0x29, 0x04, 0x32, 0xd3, 0xcf, 0x66, 0x76,
	0x97, 0xf6, 0x9c, 0x83, 0xe6, 0xd1, 0xae, 0x97, 0x07, 0xe2, 0x4d, 0x02, 0xf1, 0x2e, 0x27, 0x81,
	0x74, 0x1a, 0xb7, 0x9d, 0xe5, 0x9f, 0x4e, 0xa5, 0xe1, 0xf8, 0xcd, 0x82, 0xcc, 0x6a, 0xe4, 0x04,
	0x36, 0x02, 0xae, 0xe7, 0xbc, 0xaa, 0x8f, 0x79, 0xf9, 0xeb, 0x53, 0xc4, 0x9a, 0x5c, 0x40, 0x4d,
	0x1b, 0x6a, 0x52, 0xed, 0x2e, 0x5b, 0xf6, 0xf9, 0x42, 0xb9, 0xf5, 0x2c, 0x62, 0x1b, 0xfb, 0xee,
	0x64, 0x63, 0x16, 0x26, 0xad, 0x5f, 0x75, 0xd8, 0x7e, 0x50, 0x4b, 0x4e, 0x61, 0x33, 0xa2, 0xda,
	0xf4, 0xd3, 0x24, 0x7b, 0x97, 0x79, 0xbb, 0xce, 0xe3, 0xed, 0x66, 0xcc, 0x27, 0x8b, 0xd8, 0x76,
	0x5f, 0xc3, 0xb2, 0x91, 0x86, 0x46, 0x36, 0xe6, 0x7f, 0xbe, 0x65, 0x54, 0xd7, 0x9c, 0x61, 0x76,
	0xb8, 0xf6, 0x73, 0x86, 0xbc, 0x82, 0x6a, 0x8c, 0x7a, 0x54, 0x24, 0xbe, 0x20, 0x6b, 0x11, 0xf2,
	0x16, 0xea, 0x5c, 0x84, 0x0a, 0xb5, 0x2e, 0x32, 0x5e, 0x90, 0x9e, 0x50, 0xe4, 0x02, 0xd6, 0x19,
	0x57, 0x2c, 0xe5, 0xa6, 0xa3, 0x90, 0x8e, 0x51, 0x15, 0x79, 0x2f, 0xe8, 0x73, 0x0f, 0xce, 0xec,
	0x86, 0x34, 0x8d, 0x4c, 0x57, 0x7c, 0x46, 0x96, 0xa5, 0xec, 0xd6, 0x4a, 0xd9, 0xcd, 0xc3, 0xe4,
	0x0c, 0x9a, 0x23, 0xa4, 0x91, 0x19, 0x9d, 0x8c, 0x90, 0x8d, 0xdd, 0x7a, 0x19, 0xaf, 0x59, 0x92,
	0xbc, 0x07, 0x30, 0x8a, 0x0e, 0x87, 0x9c, 0x7d, 0x90, 0xa1, 0xdb, 0x28, 0xe3, 0x33, 0x03, 0x92,
	0x1e, 0x6c, 0x15, 0xff, 0x3e, 0xa2, 0x8a, 0xb9, 0xd6, 0xd9, 0x84, 0x2b, 0x65, 0xdc, 0xfe, 0xe6,
	0x49, 0x17, 0x56, 0x8b, 0x87, 0xbe, 0x4c, 0x0d, 0xba, 0x50, 0xc6, 0x6f, 0x0e, 0x9d, 0xb1, 0xba,
	0x54, 0x94, 0xa1, 0xdb, 0xfc, 0x1f, 0x2b, 0x8b, 0x66, 0xfb, 0x2b, 0x51, 0xf2, 0xeb, 0xcd, 0x25,
	0xc6, 0x49, 0x44, 0x0d, 0xba, 0xab, 0x65, 0xbc, 0xe6, 0x59, 0xf2, 0x06, 0x6a, 0x1a, 0x99, 0x42,
	0xe3, 0xae, 0x95, 0x71, 0x29, 0xa0, 0xd6, 0x0f, 0x27, 0x5f, 0x7f, 0x33, 0x35, 0xb2, 0x0f, 0xeb,
	0x0a, 0x75, 0x22, 0x85, 0x46, 0xdd, 0xd7, 0x28, 0x8c, 0xbd, 0xb5, 0x55, 0x7f, 0xed, 0xee, 0x69,
	0x0f, 0x85, 0x21, 0xc7, 0xf0, 0x74, 0x2a, 0xa3, 0x6c, 0x2c, 0xe4, 0x97, 0x08, 0x83, 0x10, 0xf3,
	0x85, 0x58, 0xf5, 0xb7, 0xef, 0xaa, 0xef, 0x66, 0x8a, 0xe4, 0x05, 0x90, 0x29, 0xa6, 0x30, 0xfb,
	0x1e, 0x31, 0xb0, 0x17, 0xb4, 0xea, 0x6f, 0xdd, 0x55, 0xfc, 0xa2, 0xd0, 0x81, 0xab, 0xc6, 0x64,
	0x88, 0x41, 0xcd, 0xae, 0x8b, 0x97, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x88, 0x2f, 0xe9,
	0x84, 0x06, 0x00, 0x00,
}
