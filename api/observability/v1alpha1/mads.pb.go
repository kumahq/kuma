// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: observability/v1alpha1/mads.proto

package v1alpha1

import (
	context "context"
	v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// MADS resource type.
//
// Describes a group of targets that need to be monitored.
type MonitoringAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MADS resource name.
	//
	// E.g., `/meshes/default/services/backend` or
	// `/meshes/default/dataplanes/backend-01`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of targets that need to be monitored.
	Targets []*MonitoringAssignment_Target `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	// Labels associated with every target in that assignment.
	//
	// E.g., `["job" : "backend"]`.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MonitoringAssignment) Reset() {
	*x = MonitoringAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_v1alpha1_mads_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringAssignment) ProtoMessage() {}

func (x *MonitoringAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_observability_v1alpha1_mads_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringAssignment.ProtoReflect.Descriptor instead.
func (*MonitoringAssignment) Descriptor() ([]byte, []int) {
	return file_observability_v1alpha1_mads_proto_rawDescGZIP(), []int{0}
}

func (x *MonitoringAssignment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MonitoringAssignment) GetTargets() []*MonitoringAssignment_Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *MonitoringAssignment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Describes a single target that needs to be monitored.
type MonitoringAssignment_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Labels associated with that particular target.
	//
	// E.g.,
	// `[
	//    "__address__" :      "192.168.0.1:8080",
	//    "__metrics_path__" : "/metrics"]`,
	//    "instance" :         "backend-01",
	//  ]`.
	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MonitoringAssignment_Target) Reset() {
	*x = MonitoringAssignment_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_v1alpha1_mads_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringAssignment_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringAssignment_Target) ProtoMessage() {}

func (x *MonitoringAssignment_Target) ProtoReflect() protoreflect.Message {
	mi := &file_observability_v1alpha1_mads_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringAssignment_Target.ProtoReflect.Descriptor instead.
func (*MonitoringAssignment_Target) Descriptor() ([]byte, []int) {
	return file_observability_v1alpha1_mads_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MonitoringAssignment_Target) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_observability_v1alpha1_mads_proto protoreflect.FileDescriptor

var file_observability_v1alpha1_mads_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6d, 0x61, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x1a, 0x1c, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x03, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6b,
	0x75, 0x6d, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x55, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x5c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x6b, 0x75, 0x6d, 0x61, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x86, 0x03, 0x0a, 0x24, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x64, 0x0a,
	0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x18, 0x2f, 0x76, 0x32,
	0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x3a, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x03, 0x3a, 0x01, 0x2a, 0x42, 0x0a,
	0x5a, 0x08, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_observability_v1alpha1_mads_proto_rawDescOnce sync.Once
	file_observability_v1alpha1_mads_proto_rawDescData = file_observability_v1alpha1_mads_proto_rawDesc
)

func file_observability_v1alpha1_mads_proto_rawDescGZIP() []byte {
	file_observability_v1alpha1_mads_proto_rawDescOnce.Do(func() {
		file_observability_v1alpha1_mads_proto_rawDescData = protoimpl.X.CompressGZIP(file_observability_v1alpha1_mads_proto_rawDescData)
	})
	return file_observability_v1alpha1_mads_proto_rawDescData
}

var file_observability_v1alpha1_mads_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_observability_v1alpha1_mads_proto_goTypes = []interface{}{
	(*MonitoringAssignment)(nil),        // 0: kuma.observability.v1alpha1.MonitoringAssignment
	(*MonitoringAssignment_Target)(nil), // 1: kuma.observability.v1alpha1.MonitoringAssignment.Target
	nil,                                 // 2: kuma.observability.v1alpha1.MonitoringAssignment.LabelsEntry
	nil,                                 // 3: kuma.observability.v1alpha1.MonitoringAssignment.Target.LabelsEntry
	(*v2.DeltaDiscoveryRequest)(nil),    // 4: envoy.api.v2.DeltaDiscoveryRequest
	(*v2.DiscoveryRequest)(nil),         // 5: envoy.api.v2.DiscoveryRequest
	(*v2.DeltaDiscoveryResponse)(nil),   // 6: envoy.api.v2.DeltaDiscoveryResponse
	(*v2.DiscoveryResponse)(nil),        // 7: envoy.api.v2.DiscoveryResponse
}
var file_observability_v1alpha1_mads_proto_depIdxs = []int32{
	1, // 0: kuma.observability.v1alpha1.MonitoringAssignment.targets:type_name -> kuma.observability.v1alpha1.MonitoringAssignment.Target
	2, // 1: kuma.observability.v1alpha1.MonitoringAssignment.labels:type_name -> kuma.observability.v1alpha1.MonitoringAssignment.LabelsEntry
	3, // 2: kuma.observability.v1alpha1.MonitoringAssignment.Target.labels:type_name -> kuma.observability.v1alpha1.MonitoringAssignment.Target.LabelsEntry
	4, // 3: kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService.DeltaMonitoringAssignments:input_type -> envoy.api.v2.DeltaDiscoveryRequest
	5, // 4: kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService.StreamMonitoringAssignments:input_type -> envoy.api.v2.DiscoveryRequest
	5, // 5: kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService.FetchMonitoringAssignments:input_type -> envoy.api.v2.DiscoveryRequest
	6, // 6: kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService.DeltaMonitoringAssignments:output_type -> envoy.api.v2.DeltaDiscoveryResponse
	7, // 7: kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService.StreamMonitoringAssignments:output_type -> envoy.api.v2.DiscoveryResponse
	7, // 8: kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService.FetchMonitoringAssignments:output_type -> envoy.api.v2.DiscoveryResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_observability_v1alpha1_mads_proto_init() }
func file_observability_v1alpha1_mads_proto_init() {
	if File_observability_v1alpha1_mads_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_observability_v1alpha1_mads_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_v1alpha1_mads_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringAssignment_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_observability_v1alpha1_mads_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_observability_v1alpha1_mads_proto_goTypes,
		DependencyIndexes: file_observability_v1alpha1_mads_proto_depIdxs,
		MessageInfos:      file_observability_v1alpha1_mads_proto_msgTypes,
	}.Build()
	File_observability_v1alpha1_mads_proto = out.File
	file_observability_v1alpha1_mads_proto_rawDesc = nil
	file_observability_v1alpha1_mads_proto_goTypes = nil
	file_observability_v1alpha1_mads_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MonitoringAssignmentDiscoveryServiceClient is the client API for MonitoringAssignmentDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitoringAssignmentDiscoveryServiceClient interface {
	DeltaMonitoringAssignments(ctx context.Context, opts ...grpc.CallOption) (MonitoringAssignmentDiscoveryService_DeltaMonitoringAssignmentsClient, error)
	StreamMonitoringAssignments(ctx context.Context, opts ...grpc.CallOption) (MonitoringAssignmentDiscoveryService_StreamMonitoringAssignmentsClient, error)
	FetchMonitoringAssignments(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error)
}

type monitoringAssignmentDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringAssignmentDiscoveryServiceClient(cc grpc.ClientConnInterface) MonitoringAssignmentDiscoveryServiceClient {
	return &monitoringAssignmentDiscoveryServiceClient{cc}
}

func (c *monitoringAssignmentDiscoveryServiceClient) DeltaMonitoringAssignments(ctx context.Context, opts ...grpc.CallOption) (MonitoringAssignmentDiscoveryService_DeltaMonitoringAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MonitoringAssignmentDiscoveryService_serviceDesc.Streams[0], "/kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService/DeltaMonitoringAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringAssignmentDiscoveryServiceDeltaMonitoringAssignmentsClient{stream}
	return x, nil
}

type MonitoringAssignmentDiscoveryService_DeltaMonitoringAssignmentsClient interface {
	Send(*v2.DeltaDiscoveryRequest) error
	Recv() (*v2.DeltaDiscoveryResponse, error)
	grpc.ClientStream
}

type monitoringAssignmentDiscoveryServiceDeltaMonitoringAssignmentsClient struct {
	grpc.ClientStream
}

func (x *monitoringAssignmentDiscoveryServiceDeltaMonitoringAssignmentsClient) Send(m *v2.DeltaDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitoringAssignmentDiscoveryServiceDeltaMonitoringAssignmentsClient) Recv() (*v2.DeltaDiscoveryResponse, error) {
	m := new(v2.DeltaDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringAssignmentDiscoveryServiceClient) StreamMonitoringAssignments(ctx context.Context, opts ...grpc.CallOption) (MonitoringAssignmentDiscoveryService_StreamMonitoringAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MonitoringAssignmentDiscoveryService_serviceDesc.Streams[1], "/kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService/StreamMonitoringAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringAssignmentDiscoveryServiceStreamMonitoringAssignmentsClient{stream}
	return x, nil
}

type MonitoringAssignmentDiscoveryService_StreamMonitoringAssignmentsClient interface {
	Send(*v2.DiscoveryRequest) error
	Recv() (*v2.DiscoveryResponse, error)
	grpc.ClientStream
}

type monitoringAssignmentDiscoveryServiceStreamMonitoringAssignmentsClient struct {
	grpc.ClientStream
}

func (x *monitoringAssignmentDiscoveryServiceStreamMonitoringAssignmentsClient) Send(m *v2.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitoringAssignmentDiscoveryServiceStreamMonitoringAssignmentsClient) Recv() (*v2.DiscoveryResponse, error) {
	m := new(v2.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringAssignmentDiscoveryServiceClient) FetchMonitoringAssignments(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error) {
	out := new(v2.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService/FetchMonitoringAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringAssignmentDiscoveryServiceServer is the server API for MonitoringAssignmentDiscoveryService service.
type MonitoringAssignmentDiscoveryServiceServer interface {
	DeltaMonitoringAssignments(MonitoringAssignmentDiscoveryService_DeltaMonitoringAssignmentsServer) error
	StreamMonitoringAssignments(MonitoringAssignmentDiscoveryService_StreamMonitoringAssignmentsServer) error
	FetchMonitoringAssignments(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error)
}

// UnimplementedMonitoringAssignmentDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMonitoringAssignmentDiscoveryServiceServer struct {
}

func (*UnimplementedMonitoringAssignmentDiscoveryServiceServer) DeltaMonitoringAssignments(MonitoringAssignmentDiscoveryService_DeltaMonitoringAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method DeltaMonitoringAssignments not implemented")
}
func (*UnimplementedMonitoringAssignmentDiscoveryServiceServer) StreamMonitoringAssignments(MonitoringAssignmentDiscoveryService_StreamMonitoringAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMonitoringAssignments not implemented")
}
func (*UnimplementedMonitoringAssignmentDiscoveryServiceServer) FetchMonitoringAssignments(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMonitoringAssignments not implemented")
}

func RegisterMonitoringAssignmentDiscoveryServiceServer(s *grpc.Server, srv MonitoringAssignmentDiscoveryServiceServer) {
	s.RegisterService(&_MonitoringAssignmentDiscoveryService_serviceDesc, srv)
}

func _MonitoringAssignmentDiscoveryService_DeltaMonitoringAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoringAssignmentDiscoveryServiceServer).DeltaMonitoringAssignments(&monitoringAssignmentDiscoveryServiceDeltaMonitoringAssignmentsServer{stream})
}

type MonitoringAssignmentDiscoveryService_DeltaMonitoringAssignmentsServer interface {
	Send(*v2.DeltaDiscoveryResponse) error
	Recv() (*v2.DeltaDiscoveryRequest, error)
	grpc.ServerStream
}

type monitoringAssignmentDiscoveryServiceDeltaMonitoringAssignmentsServer struct {
	grpc.ServerStream
}

func (x *monitoringAssignmentDiscoveryServiceDeltaMonitoringAssignmentsServer) Send(m *v2.DeltaDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitoringAssignmentDiscoveryServiceDeltaMonitoringAssignmentsServer) Recv() (*v2.DeltaDiscoveryRequest, error) {
	m := new(v2.DeltaDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MonitoringAssignmentDiscoveryService_StreamMonitoringAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoringAssignmentDiscoveryServiceServer).StreamMonitoringAssignments(&monitoringAssignmentDiscoveryServiceStreamMonitoringAssignmentsServer{stream})
}

type MonitoringAssignmentDiscoveryService_StreamMonitoringAssignmentsServer interface {
	Send(*v2.DiscoveryResponse) error
	Recv() (*v2.DiscoveryRequest, error)
	grpc.ServerStream
}

type monitoringAssignmentDiscoveryServiceStreamMonitoringAssignmentsServer struct {
	grpc.ServerStream
}

func (x *monitoringAssignmentDiscoveryServiceStreamMonitoringAssignmentsServer) Send(m *v2.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitoringAssignmentDiscoveryServiceStreamMonitoringAssignmentsServer) Recv() (*v2.DiscoveryRequest, error) {
	m := new(v2.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MonitoringAssignmentDiscoveryService_FetchMonitoringAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringAssignmentDiscoveryServiceServer).FetchMonitoringAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService/FetchMonitoringAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringAssignmentDiscoveryServiceServer).FetchMonitoringAssignments(ctx, req.(*v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitoringAssignmentDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kuma.observability.v1alpha1.MonitoringAssignmentDiscoveryService",
	HandlerType: (*MonitoringAssignmentDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchMonitoringAssignments",
			Handler:    _MonitoringAssignmentDiscoveryService_FetchMonitoringAssignments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeltaMonitoringAssignments",
			Handler:       _MonitoringAssignmentDiscoveryService_DeltaMonitoringAssignments_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamMonitoringAssignments",
			Handler:       _MonitoringAssignmentDiscoveryService_StreamMonitoringAssignments_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "observability/v1alpha1/mads.proto",
}
